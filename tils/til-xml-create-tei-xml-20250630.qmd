---
title: "create a valid TEI XML doc including NA handling"
author: "Sharon Howard"
date: "2025-06-30"
categories: [xml, make xml, NAs]
slug: til-xml-create-tei-xml-20250630
execute:
  warning: false
  message: false
---

## Includes

```{r}
source(here::here('R/shared.R'))
```

## Notes

-  NAs get turned into "NA" strings - handle with xml_remove()   
-  a couple of options for elements:  
-  turn NAs into "" blanks which will create empty elements, remove with xpath [not(text())] 
-  or leave them as "NA" and use xpath with [.='NA']  
-  (don't do that if for some reason there could be elements consisting of just the text "NA"!!) 
-  for attributes use [.='NA'] or [.=''] 
-  LIMITATION:  
-  never been able to work out how to do sub-looping for nested 1-to-many variables. 
-  hackarounds with XSLT (but can't run them from R) 
-  a) save as JSON and use a json2xml XSLT (very faffy and needs xslt3) 
-  b) make multiple simple XMLs and merge them with XSLT lookups (a bit less faffy, xslt2) (this one feels like it should be xslt1-able, would need to work out how to change the lookup) 
 
 




## Example

```{r}
# to convert NAs to "" 
# judges100 <- 
# judges100 |> 
  # if turning NAs into "" birth and death dates need to be char 
  # mutate(across(c(birth_date, death_date), as.character)) |> 
  # change NAs in any char cols to ""  
  # mutate(across(where(is.character), ~replace_na(., ""))) 
  # can also use replace_na without a mutate but have to name cols in a list 
  # replace_na(list(name_middle=""))  
 
library(xml2) 
 
# function to make a minimal valid teiHeader 
make_teiHeader <- function(data, doc_title="ATB"){ 
 
  date_stamp <- today() |> format('%Y-%m-%d') 
   
  # to add a comment 
  xml_add_child(tei_doc, xml_comment(" DO NOT EDIT THIS FILE: it's generated automatically from a script. ")) 
 
  xml_add_child(data, "teiHeader") 
   
  header_nodes <- xml_find_all(data, "//teiHeader") 
   
  xml_add_child(header_nodes, "fileDesc") 
   
  #  required in fileDesc: titleStmt, publicationStmt, sourceDesc 
  filedesc_nodes <- xml_find_all(data, "//teiHeader/fileDesc") 
  xml_add_child(filedesc_nodes, "titleStmt") 
  xml_add_child(filedesc_nodes, "publicationStmt") 
  xml_add_child(filedesc_nodes, "sourceDesc") 
   
  titlenodes <- xml_find_all(data, "//fileDesc/titleStmt") 
  xml_add_child(titlenodes, "title", doc_title) 
   
  #pub_info <- "..." 
  #src_info <- "sources: ...." 
  #encodesc_notes <- "..." 
   
  pubnodes <- xml_find_all(data, "//fileDesc/publicationStmt") 
  xml_add_child(pubnodes, "p", "...") 
   
  srcnodes <- xml_find_all(data, "//fileDesc/sourceDesc") 
  xml_add_child(srcnodes, "p", "...") 
   
  xml_add_child(header_nodes, "profileDesc") 
  profile_nodes <- xml_find_all(data, "//teiHeader/profileDesc") 
  xml_add_child(profile_nodes, "creation") 
   
  creation_nodes <- xml_find_all(data, "//profileDesc/creation") 
  xml_add_child(creation_nodes, "date") 
   
  xml_add_child(header_nodes, "encodingDesc") 
   
   
  encodesc_nodes <- xml_find_all(data, "//teiHeader/encodingDesc") 
  xml_add_child(encodesc_nodes, "p", '...') 
   
  # should make when attribute for date but cba right now 
  cd_nodes <- xml_find_all(data, "//profileDesc/creation/date") 
  xml_attr(cd_nodes, "when") <- date_stamp 
       
} 
 
 
 
tei_doc <- xml_new_root("TEI", xmlns = "http://www.tei-c.org/ns/1.0")  
 
# to add a comment at top level (in teiHeader) 
# xml_add_child(tei_doc, xml_comment("do something here")) 
 
# add teiHeader using function in teiHeader TIL  
make_teiHeader(tei_doc, "US Judges") 
 
# for tei you then need empty child "text" (no loop) and child of text "body" 
xml_add_child(tei_doc, "text") 
text_nodes <- xml_find_all(tei_doc, "//text") 
 
xml_add_child(text_nodes, "body") 
body_nodes <- xml_find_all(tei_doc, "//text/body")  
 
# make a list of people: next child of body "listPerson" 
xml_add_child(body_nodes, "listPerson") 
 
# adjusted the first loop to nest under listPerson  
listperson_nodes <- xml_find_all(tei_doc, "//body/listPerson") 
 
 
# make empty person_nodes. this needs a loop.  
for (person_nodes in 1:nrow(judges100)) { 
  xml_add_child(listperson_nodes, "person") 
} 
 
# for loop will do for now, though would be fun to use purrr:map  
# https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html 
 
# person 
person_nodes <- xml_find_all(tei_doc, "//listPerson/person") 
 
# add xml:id attribute. (nb original judge_id is numerical, can't use that in xml:id) 
xml_attr(person_nodes, "xml:id") <- judges100$id   
 
# add persName  
xml_add_child(person_nodes, "persName", judges100$persname) 
 
# um what are you doing here? you seem to make persName again after this. check  
# how to add attributes to persName rather than person? 
# create a new _nodes object and ensure it points to the right place 
type_nodes <- xml_find_all(tei_doc, "//person/persName") 
xml_attr(type_nodes, "type") <- "label" 
 
 
# persName for name elements 
# nesting: add an empty child. then repeat xml_find_all and add_child to that.  
persName_nodes <- xml_find_all(tei_doc, "//listPerson/person") 
xml_add_child(persName_nodes, "persName") 
 
# forename - but only under nested persName, not label persName 
forename_nodes <- xml_find_all(tei_doc, "//listPerson/person/persName[not(@type='label')]") 
xml_add_child(forename_nodes, "forename", judges100$name_first) 
# surname, ditto (can reuse forename_nodes in spite of your misleading naming) 
xml_add_child(forename_nodes, "surname", judges100$name_last) 
 
# birth 
xml_add_child(person_nodes, "birth", judges100$birth_date) 
 
# death.  
xml_add_child(person_nodes, "death", judges100$death_date) 
# let's see what happens 
xml_attr(person_nodes, "when") <- judges100$death_date 
 
# gender 
xml_add_child(person_nodes, "gender", judges100$gender) 
 
 
# remove empty or 'NA' elements 
# xpath - have to be named I think (tried wildcards, R crashed) 
empty_elem <-  
  xml_find_all(tei_doc, 
               "//birth[.='NA'] | 
                //death[.='NA'] | 
                //birth[not(text())] | 
                //death[not(text())] 
               ") 
xml_remove(empty_elem) 
 
 
# to remove "" or "NA" attributes. this wildcard seems fine. 
empty_attr <- xml_find_all(tei_doc, "//@*[.='' or .='NA']") 
xml_remove(empty_attr) 
 
 
 
# write to file [done] 
# write_xml(tei_doc, file = here::here("outputs/tei-judges.xml"), options =c("format")) 
 
# show the content of the file 
# cat(as.character(tei_doc)) 
 
# to read it back in... don't forget options="" 
# xml2::read_xml(here::here("outputs/tei-judges.xml"), options = "") 
 

```


## Resources

* [https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html](https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html)

```{r}
#| include: false
# atb/atb/people-places/people-standoff_241201.Rmd (and versions in various other files) 

# using local data
```
