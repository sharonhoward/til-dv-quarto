[
  {
    "objectID": "tils/til-nocode-list-elements-into-single-objects-20250630.html",
    "href": "tils/til-nocode-list-elements-into-single-objects-20250630.html",
    "title": "list2env() puts elements of a list into global environment",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-list-elements-into-single-objects-20250630.html#includes",
    "href": "tils/til-nocode-list-elements-into-single-objects-20250630.html#includes",
    "title": "list2env() puts elements of a list into global environment",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-list-elements-into-single-objects-20250630.html#notes",
    "href": "tils/til-nocode-list-elements-into-single-objects-20250630.html#notes",
    "title": "list2env() puts elements of a list into global environment",
    "section": "Notes",
    "text": "Notes\n\nbe wary of using this - not regarded as good practice?\nif you rerun the chunk, I think it just replaces them with the new versions cf. attach.\n\nand you need to be sure the names aren’t already being used!"
  },
  {
    "objectID": "tils/til-nocode-list-elements-into-single-objects-20250630.html#example",
    "href": "tils/til-nocode-list-elements-into-single-objects-20250630.html#example",
    "title": "list2env() puts elements of a list into global environment",
    "section": "Example",
    "text": "Example\n\n# list2env(named_list_of_dfs, envir = .GlobalEnv)"
  },
  {
    "objectID": "tils/til-nocode-list-elements-into-single-objects-20250630.html#resources",
    "href": "tils/til-nocode-list-elements-into-single-objects-20250630.html#resources",
    "title": "list2env() puts elements of a list into global environment",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/questions/59169631/split-a-list-into-separate-data-frame-in-r"
  },
  {
    "objectID": "tils/til-joins-join-by-20250630.html",
    "href": "tils/til-joins-join-by-20250630.html",
    "title": "join with join_by instead of by and avoid need to quote",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-joins-join-by-20250630.html#includes",
    "href": "tils/til-joins-join-by-20250630.html#includes",
    "title": "join with join_by instead of by and avoid need to quote",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-joins-join-by-20250630.html#notes",
    "href": "tils/til-joins-join-by-20250630.html#notes",
    "title": "join with join_by instead of by and avoid need to quote",
    "section": "Notes",
    "text": "Notes\n\nwith by= you have to quote the y though (til!) don’t need to quote the x.\neg\njudges100 |&gt;\ninner_join(judges100_appts, by=(judge_id=“judge_id”))\nbut with join_by you don’t need to quote at all. not sure if it works with different named cols"
  },
  {
    "objectID": "tils/til-joins-join-by-20250630.html#example",
    "href": "tils/til-joins-join-by-20250630.html#example",
    "title": "join with join_by instead of by and avoid need to quote",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n  select(judge_id, name_first, name_last, birth_date) |&gt; \n  inner_join(judges100_appts, join_by(judge_id)) |&gt; \n  arrange(judge_id) \n\n# A tibble: 126 × 18\n   judge_id name_first name_last birth_date court_name court_type president_name\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;         \n 1      110 John       Bartels         1897 U. S. Dis… USDC       Dwight D. Eis…\n 2      144 David      Belew           1920 U. S. Dis… USDC       Jimmy Carter  \n 3      155 Marion     Bennett         1914 Court of … Court of … Richard M. Ni…\n 4      155 Marion     Bennett         1914 U. S. Cou… USCA       Reassignment  \n 5      161 Helen      Berrigan        1948 U. S. Dis… USDC       William J. Cl…\n 6      188 Charles    Blair           1927 U. S. Dis… USDC       Richard M. Ni…\n 7      191 Theodorick Bland           1776 U. S. Dis… USDC       James Monroe  \n 8      193 Solomon    Blatt           1921 U. S. Dis… USDC       Richard M. Ni…\n 9      195 Alan       Bloch           1932 U. S. Dis… USDC       Jimmy Carter  \n10      196 Frederic   Block           1934 U. S. Dis… USDC       William J. Cl…\n# ℹ 116 more rows\n# ℹ 11 more variables: president_party &lt;chr&gt;, nomination_date &lt;chr&gt;,\n#   predecessor_last_name &lt;chr&gt;, predecessor_first_name &lt;chr&gt;,\n#   senate_confirmation_date &lt;chr&gt;, commission_date &lt;chr&gt;,\n#   chief_judge_begin &lt;int&gt;, chief_judge_end &lt;int&gt;,\n#   retirement_from_active_service &lt;chr&gt;, termination_date &lt;chr&gt;,\n#   termination_reason &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-joins-join-by-20250630.html#resources",
    "href": "tils/til-joins-join-by-20250630.html#resources",
    "title": "join with join_by instead of by and avoid need to quote",
    "section": "Resources",
    "text": "Resources\n\nhttps://www.tidyverse.org/blog/2023/01/dplyr-1-1-0-joins/"
  },
  {
    "objectID": "tils/til-tables-prop-table-20250630.html",
    "href": "tils/til-tables-prop-table-20250630.html",
    "title": "frequency tables made proportional with proportions()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-prop-table-20250630.html#includes",
    "href": "tils/til-tables-prop-table-20250630.html#includes",
    "title": "frequency tables made proportional with proportions()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-prop-table-20250630.html#notes",
    "href": "tils/til-tables-prop-table-20250630.html#notes",
    "title": "frequency tables made proportional with proportions()",
    "section": "Notes",
    "text": "Notes\n\nproportion of what? looks like topic, ie the first var that goes in table. check when using it\nbut also! can use cor() to make a correlation matrix (-1 to +1) which might be better?"
  },
  {
    "objectID": "tils/til-tables-prop-table-20250630.html#example",
    "href": "tils/til-tables-prop-table-20250630.html#example",
    "title": "frequency tables made proportional with proportions()",
    "section": "Example",
    "text": "Example\n\nproportions(table(topic=cheshire_petitions$topic, type=cheshire_petitions$petition_type)) \n\n                    type\ntopic                 collective collective on behalf    multiple\n  alehouse           0.004893964          0.001631321 0.000000000\n  charitable brief   0.006525285          0.001631321 0.003262643\n  cottage            0.003262643          0.003262643 0.013050571\n  dissenting worship 0.000000000          0.000000000 0.004893964\n  employment         0.000000000          0.000000000 0.001631321\n  imprisoned debtors 0.000000000          0.000000000 0.000000000\n  litigation         0.026101142          0.008156607 0.047308320\n  military relief    0.000000000          0.003262643 0.000000000\n  officeholding      0.008156607          0.000000000 0.006525285\n  other              0.006525285          0.000000000 0.001631321\n  paternity          0.004893964          0.000000000 0.006525285\n  poor relief        0.032626427          0.001631321 0.006525285\n  rates              0.070146819          0.000000000 0.021207178\n                    type\ntopic                multiple on behalf      single\n  alehouse                  0.000000000 0.021207178\n  charitable brief          0.000000000 0.014681892\n  cottage                   0.004893964 0.125611746\n  dissenting worship        0.000000000 0.003262643\n  employment                0.000000000 0.022838499\n  imprisoned debtors        0.000000000 0.001631321\n  litigation                0.000000000 0.208809135\n  military relief           0.000000000 0.045676998\n  officeholding             0.000000000 0.019575856\n  other                     0.000000000 0.019575856\n  paternity                 0.000000000 0.091353997\n  poor relief               0.001631321 0.088091354\n  rates                     0.000000000 0.035889070"
  },
  {
    "objectID": "tils/til-str-match-all-unnest-20250630.html",
    "href": "tils/til-str-match-all-unnest-20250630.html",
    "title": "unnest str_match_all with map and as_tibble",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-str-match-all-unnest-20250630.html#includes",
    "href": "tils/til-str-match-all-unnest-20250630.html#includes",
    "title": "unnest str_match_all with map and as_tibble",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-str-match-all-unnest-20250630.html#notes",
    "href": "tils/til-str-match-all-unnest-20250630.html#notes",
    "title": "unnest str_match_all with map and as_tibble",
    "section": "Notes",
    "text": "Notes\n\nslightly silly example, couldn’t think of anything more sensible :-)\n\nget definite and indefinite articles\nas_tibble needs .name_repair (= unique/universal) but if you just do it with “unique” you get repeated new names message, which is bad if you have a lot of results!\n\nbut it seems you can suppress the message by using make.names\ni think it’s always two cols, if so you can name them manually with ~c(“a”, “b”)"
  },
  {
    "objectID": "tils/til-str-match-all-unnest-20250630.html#example",
    "href": "tils/til-str-match-all-unnest-20250630.html#example",
    "title": "unnest str_match_all with map and as_tibble",
    "section": "Example",
    "text": "Example\n\ndivs_txt_csv &lt;- \n  read_csv(here::here(\"data/csv/atb_bookrem_divs_text.csv\")) \n \ndivs_txt_csv |&gt; \n  select(div_txt) |&gt; \n  slice(2:15) |&gt; \n  #mutate(s = str_match_all(div_txt, \"\\\\b(an|a|the)\\\\b\")) |&gt; \n  mutate(s = str_match_all(div_txt, regex(\"\\\\b(God|Lord)\\\\b\", ignore_case = TRUE))) |&gt; \n  mutate(s = map(s, as_tibble, .name_repair= ~ c(\"a\", \"b\"))) |&gt;  \n  unnest(s, keep_empty = TRUE) |&gt; \n  relocate(div_txt, .after = last_col()) \n\n# A tibble: 36 × 3\n   a     b     div_txt                                                          \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;                                                            \n 1 Lord  Lord  Alice Wandesford, the fifth child of Christopher Wandesford esqu…\n 2 Lord  Lord  Lord, guide my heart, and give my soul direction, Subdue my pass…\n 3 Lord  Lord  Lord, guide my heart, and give my soul direction, Subdue my pass…\n 4 Lord  Lord  Lord, guide my heart, and give my soul direction, Subdue my pass…\n 5 God   God   Dedication I'll dedicate my soul unto my God: My childhood, nona…\n 6 God   God   Dedication I'll dedicate my soul unto my God: My childhood, nona…\n 7 Lord  Lord  Dedication I'll dedicate my soul unto my God: My childhood, nona…\n 8 Lord  Lord  Prayer Then guide my heart, Lord, give my soul direction, Subdue…\n 9 Lord  Lord  Prayer Then guide my heart, Lord, give my soul direction, Subdue…\n10 Lord  Lord  Prayer Then guide my heart, Lord, give my soul direction, Subdue…\n# ℹ 26 more rows"
  },
  {
    "objectID": "tils/til-filter-grouping-by-20250630.html",
    "href": "tils/til-filter-grouping-by-20250630.html",
    "title": "filter with .by (instead of group_by and then filter)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-grouping-by-20250630.html#includes",
    "href": "tils/til-filter-grouping-by-20250630.html#includes",
    "title": "filter with .by (instead of group_by and then filter)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-grouping-by-20250630.html#notes",
    "href": "tils/til-filter-grouping-by-20250630.html#notes",
    "title": "filter with .by (instead of group_by and then filter)",
    "section": "Notes",
    "text": "Notes\n\neg filter(n()&gt;1, .by = grp) should do same thing as add_count then filter n&gt;1.\nexample using n()&gt;X in the filter, ie greater than X. then .by to group by topic.\nneed to use this a lot more!"
  },
  {
    "objectID": "tils/til-filter-grouping-by-20250630.html#example",
    "href": "tils/til-filter-grouping-by-20250630.html#example",
    "title": "filter with .by (instead of group_by and then filter)",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  filter(n()&gt;25, .by=topic) |&gt; \n  count(topic, sort = T) \n\n# A tibble: 6 × 2\n  topic               n\n  &lt;chr&gt;           &lt;int&gt;\n1 litigation        178\n2 cottage            92\n3 poor relief        80\n4 rates              78\n5 paternity          63\n6 military relief    30"
  },
  {
    "objectID": "tils/til-filter-grouping-by-20250630.html#resources",
    "href": "tils/til-filter-grouping-by-20250630.html#resources",
    "title": "filter with .by (instead of group_by and then filter)",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/dplyr_by.html"
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html",
    "href": "tils/til-functions-dfname-to-var-20250630.html",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html#includes",
    "href": "tils/til-functions-dfname-to-var-20250630.html#includes",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html#notes",
    "href": "tils/til-functions-dfname-to-var-20250630.html#notes",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "Notes",
    "text": "Notes\n\ndeparse(substitute(.)) isn’t pipable afaict… but it is if you put it in a function\nNB object has to already exist! and may not work as expected if you use sthg like as_tibble before it\nuseful when you’re making several DFs that you want to combine with bind_rows and add a “src” column\nwith this you don’t have to name the src column manually, just use the source df name.\ndoesn’t need mutate, that’s already in the function. if piping, no args. if not piped, the df name."
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html#function",
    "href": "tils/til-functions-dfname-to-var-20250630.html#function",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "Function",
    "text": "Function\n\nobj_name_as_var &lt;- function(d){ \n  d_name &lt;- deparse(substitute(d)) \n  d |&gt; \n    mutate(src = d_name) \n}"
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html#example",
    "href": "tils/til-functions-dfname-to-var-20250630.html#example",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n  obj_name_as_var() \n\n# A tibble: 100 × 16\n   judge_id name_first name_middle name_last name_suffix birth_date\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1      432 George     Edward      Cire      &lt;NA&gt;              1922\n 2     3518 Gerald     Austin      McHugh    Jr.               1954\n 3      831 John       &lt;NA&gt;        Gayle     &lt;NA&gt;              1792\n 4      188 Charles    Stanley     Blair     &lt;NA&gt;              1927\n 5     2080 Harold     Lyman       Ryan      &lt;NA&gt;              1923\n 6     2736 Henry      Harold      Kennedy   Jr.               1948\n 7     1678 Kevin      Michael     Moore     &lt;NA&gt;              1951\n 8     3016 Louise     W.          Flanagan  &lt;NA&gt;              1962\n 9      393 David      Kellogg     Cartter   &lt;NA&gt;              1812\n10     1136 Joseph     Chappell    Hutcheson Jr.               1879\n# ℹ 90 more rows\n# ℹ 10 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;, src &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-functions-dfname-to-var-20250630.html#resources",
    "href": "tils/til-functions-dfname-to-var-20250630.html#resources",
    "title": "function to use an object name as a variable (eg for bind_rows)",
    "section": "Resources",
    "text": "Resources\n\nhttp://adv-r.had.co.nz/Computing-on-the-language.html#capturing-expressions"
  },
  {
    "objectID": "tils/til-grouping-dot-by-20250630.html",
    "href": "tils/til-grouping-dot-by-20250630.html",
    "title": "group using .by more concisely than group_by",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dot-by-20250630.html#includes",
    "href": "tils/til-grouping-dot-by-20250630.html#includes",
    "title": "group using .by more concisely than group_by",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dot-by-20250630.html#notes",
    "href": "tils/til-grouping-dot-by-20250630.html#notes",
    "title": "group using .by more concisely than group_by",
    "section": "Notes",
    "text": "Notes\n\ni should use .by more often instead of group_by…!\nmuch more concise than group_by mutate/summarise ungroup if you only want to do a single action"
  },
  {
    "objectID": "tils/til-grouping-dot-by-20250630.html#example",
    "href": "tils/til-grouping-dot-by-20250630.html#example",
    "title": "group using .by more concisely than group_by",
    "section": "Example",
    "text": "Example\n\njudges100_appts |&gt; \n# make a unique judge-appointment ID based on judge_id + row_number \n  mutate(judge_appt_id = paste(judge_id, row_number(), sep=\"_\"), .by = judge_id) |&gt; \n  arrange(judge_appt_id) |&gt; \n  relocate(judge_appt_id) \n\n# A tibble: 126 × 16\n   judge_appt_id judge_id court_name   court_type president_name president_party\n   &lt;chr&gt;            &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;          \n 1 1059_1            1059 U. S. Distr… USDC       Jimmy Carter   Democratic     \n 2 1074_1            1074 U. S. Distr… USDC       Theodore Roos… Republican     \n 3 110_1              110 U. S. Distr… USDC       Dwight D. Eis… Republican     \n 4 1136_1            1136 U. S. Distr… USDC       Woodrow Wilson Democratic     \n 5 1136_2            1136 U. S. Court… USCA       Herbert Hoover Republican     \n 6 1204_1            1204 U. S. Distr… USDC       Jimmy Carter   Democratic     \n 7 1206_1            1206 U. S. Court… USCA       Dwight D. Eis… Republican     \n 8 1206_2            1206 U. S. Court… USCA       Reassignment   Reassignment   \n 9 1243_1            1243 U. S. Distr… USDC       Jimmy Carter   Democratic     \n10 1260_1            1260 U. S. Distr… USDC       Herbert Hoover Republican     \n# ℹ 116 more rows\n# ℹ 10 more variables: nomination_date &lt;chr&gt;, predecessor_last_name &lt;chr&gt;,\n#   predecessor_first_name &lt;chr&gt;, senate_confirmation_date &lt;chr&gt;,\n#   commission_date &lt;chr&gt;, chief_judge_begin &lt;int&gt;, chief_judge_end &lt;int&gt;,\n#   retirement_from_active_service &lt;chr&gt;, termination_date &lt;chr&gt;,\n#   termination_reason &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-grouping-dot-by-20250630.html#resources",
    "href": "tils/til-grouping-dot-by-20250630.html#resources",
    "title": "group using .by more concisely than group_by",
    "section": "Resources",
    "text": "Resources\n\nhttps://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/"
  },
  {
    "objectID": "tils/til-functions-group-by-at-20250630.html",
    "href": "tils/til-functions-group-by-at-20250630.html",
    "title": "group_by_at() can take a string, useful in functions",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-group-by-at-20250630.html#includes",
    "href": "tils/til-functions-group-by-at-20250630.html#includes",
    "title": "group_by_at() can take a string, useful in functions",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-group-by-at-20250630.html#notes",
    "href": "tils/til-functions-group-by-at-20250630.html#notes",
    "title": "group_by_at() can take a string, useful in functions",
    "section": "Notes",
    "text": "Notes\n\n\nwe can make use of the group_by_at that can take string as input avoiding the syms and evaluation (!!!)\n\nexample in SO\nMEAN_OUT2 &lt;- function(VARS) {\n             DF %&gt;%  \n                  group_by_at(VARS) %&gt;%  \n                  summarise(Mean = mean(Output)) %&gt;%  \n                  as.data.frame() \n } \ncaveat: not entirely sure about my example…"
  },
  {
    "objectID": "tils/til-functions-group-by-at-20250630.html#function",
    "href": "tils/til-functions-group-by-at-20250630.html#function",
    "title": "group_by_at() can take a string, useful in functions",
    "section": "Function",
    "text": "Function\n\ntranspose_agg_data &lt;- function(data, key=key, rows){ \n  data |&gt; \n    # drop existing doc_count.  \n    select(-doc_count) |&gt; \n    pivot_longer(-{{key}}, names_to = rows, values_to = \"n\") |&gt; \n    # make new doc_count for rows. nb use of group_by_at. \n    # don't really need this?   \n    group_by_at(rows) |&gt; \n    mutate(doc_count = sum(n)) |&gt; \n    ungroup() |&gt; \n    pivot_wider(names_from = {{key}}, values_from = n)  \n}"
  },
  {
    "objectID": "tils/til-functions-group-by-at-20250630.html#resources",
    "href": "tils/til-functions-group-by-at-20250630.html#resources",
    "title": "group_by_at() can take a string, useful in functions",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/a/52437493/7281022"
  },
  {
    "objectID": "tils/til-xml-teiheader-20250630.html",
    "href": "tils/til-xml-teiheader-20250630.html",
    "title": "function to make a minimal valid teiHeader for a tei xml file",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-teiheader-20250630.html#includes",
    "href": "tils/til-xml-teiheader-20250630.html#includes",
    "title": "function to make a minimal valid teiHeader for a tei xml file",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-teiheader-20250630.html#notes",
    "href": "tils/til-xml-teiheader-20250630.html#notes",
    "title": "function to make a minimal valid teiHeader for a tei xml file",
    "section": "Notes",
    "text": "Notes\n\nwill require xml2"
  },
  {
    "objectID": "tils/til-xml-teiheader-20250630.html#function",
    "href": "tils/til-xml-teiheader-20250630.html#function",
    "title": "function to make a minimal valid teiHeader for a tei xml file",
    "section": "Function",
    "text": "Function\n\nmake_teiHeader &lt;- function(data, doc_title=\"ATB\"){ \n \n  date_stamp &lt;- today() |&gt; format('%Y-%m-%d') \n   \n  # to add a comment \n  xml_add_child(tei_doc, xml_comment(\" DO NOT EDIT THIS FILE: it's generated automatically from a script. \")) \n \n   \n  xml_add_child(data, \"teiHeader\") \n   \n  header_nodes &lt;- xml_find_all(data, \"//teiHeader\") \n   \n  xml_add_child(header_nodes, \"fileDesc\") \n   \n  #  required in fileDesc: titleStmt, publicationStmt, sourceDesc \n  filedesc_nodes &lt;- xml_find_all(data, \"//teiHeader/fileDesc\") \n  xml_add_child(filedesc_nodes, \"titleStmt\") \n  xml_add_child(filedesc_nodes, \"publicationStmt\") \n  xml_add_child(filedesc_nodes, \"sourceDesc\") \n   \n  titlenodes &lt;- xml_find_all(data, \"//fileDesc/titleStmt\") \n  xml_add_child(titlenodes, \"title\", doc_title) \n   \n  #pub_info &lt;- \"...\" \n  #src_info &lt;- \"sources: ....\" \n  #encodesc_notes &lt;- \"...\" \n   \n  pubnodes &lt;- xml_find_all(data, \"//fileDesc/publicationStmt\") \n  xml_add_child(pubnodes, \"p\", \"...\") \n   \n  srcnodes &lt;- xml_find_all(data, \"//fileDesc/sourceDesc\") \n  xml_add_child(srcnodes, \"p\", \"...\") \n   \n  xml_add_child(header_nodes, \"profileDesc\") \n  profile_nodes &lt;- xml_find_all(data, \"//teiHeader/profileDesc\") \n  xml_add_child(profile_nodes, \"creation\") \n   \n  creation_nodes &lt;- xml_find_all(data, \"//profileDesc/creation\") \n  xml_add_child(creation_nodes, \"date\") \n   \n  xml_add_child(header_nodes, \"encodingDesc\") \n   \n   \n  encodesc_nodes &lt;- xml_find_all(data, \"//teiHeader/encodingDesc\") \n  xml_add_child(encodesc_nodes, \"p\", '...') \n   \n  # should make when attribute for date but cba right now \n  cd_nodes &lt;- xml_find_all(data, \"//profileDesc/creation/date\") \n  xml_attr(cd_nodes, \"when\") &lt;- date_stamp \n       \n}"
  },
  {
    "objectID": "tils/til-nocode-joins-m2m-warnings-20250630.html",
    "href": "tils/til-nocode-joins-m2m-warnings-20250630.html",
    "title": "dplyr join warnings for many to many matches",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-joins-m2m-warnings-20250630.html#includes",
    "href": "tils/til-nocode-joins-m2m-warnings-20250630.html#includes",
    "title": "dplyr join warnings for many to many matches",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-joins-m2m-warnings-20250630.html#notes",
    "href": "tils/til-nocode-joins-m2m-warnings-20250630.html#notes",
    "title": "dplyr join warnings for many to many matches",
    "section": "Notes",
    "text": "Notes\n\n\nIf multiple matches are expected, set multiple = \"all\" to silence this warning.\n\nwould be helpful if it told you which rows have multiple matches - and the blogpost has it doing that?"
  },
  {
    "objectID": "tils/til-nocode-joins-m2m-warnings-20250630.html#resources",
    "href": "tils/til-nocode-joins-m2m-warnings-20250630.html#resources",
    "title": "dplyr join warnings for many to many matches",
    "section": "Resources",
    "text": "Resources\n\nhttps://www.tidyverse.org/blog/2023/01/dplyr-1-1-0-joins/"
  },
  {
    "objectID": "tils/til-grouping-cur-group-id-20250630.html",
    "href": "tils/til-grouping-cur-group-id-20250630.html",
    "title": "give a numerical ID to each group in a grouped DF",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-cur-group-id-20250630.html#includes",
    "href": "tils/til-grouping-cur-group-id-20250630.html#includes",
    "title": "give a numerical ID to each group in a grouped DF",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-cur-group-id-20250630.html#notes",
    "href": "tils/til-grouping-cur-group-id-20250630.html#notes",
    "title": "give a numerical ID to each group in a grouped DF",
    "section": "Notes",
    "text": "Notes\n\ncf dense_rank TIL, this is an id for a group, gives a grouped variable a shared id"
  },
  {
    "objectID": "tils/til-grouping-cur-group-id-20250630.html#example",
    "href": "tils/til-grouping-cur-group-id-20250630.html#example",
    "title": "give a numerical ID to each group in a grouped DF",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  select(petition_id, topic, response) |&gt; \n  group_by(topic) |&gt; \n  #arrange(-nn, .by_group = T) |&gt; # again, this doesn't make any difference to numbering \n  mutate(grp_id = cur_group_id(), n_topic=n()) |&gt; \n  ungroup() |&gt; \n  count(topic, response, grp_id, n_topic)  \n\n# A tibble: 71 × 5\n   topic            response    grp_id n_topic     n\n   &lt;chr&gt;            &lt;chr&gt;        &lt;int&gt;   &lt;int&gt; &lt;int&gt;\n 1 alehouse         granted          1      17     7\n 2 alehouse         no_response      1      17     5\n 3 alehouse         nothing          1      17     3\n 4 alehouse         rejected         1      17     2\n 5 charitable brief granted          2      16     5\n 6 charitable brief no_response      2      16     8\n 7 charitable brief referred         2      16     2\n 8 charitable brief uncertain        2      16     1\n 9 cottage          absent           3      92     1\n10 cottage          grant_cond       3      92    23\n# ℹ 61 more rows"
  },
  {
    "objectID": "tils/til-tables-with-table-nas-20250630.html",
    "href": "tils/til-tables-with-table-nas-20250630.html",
    "title": "frequency tables - handle NAs in table()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-with-table-nas-20250630.html#includes",
    "href": "tils/til-tables-with-table-nas-20250630.html#includes",
    "title": "frequency tables - handle NAs in table()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-with-table-nas-20250630.html#notes",
    "href": "tils/til-tables-with-table-nas-20250630.html#notes",
    "title": "frequency tables - handle NAs in table()",
    "section": "Notes",
    "text": "Notes\n\nuseNA=“no” “ifany” or “always”\nalso learned about with/table\n\nusing with() you get the dimname names by default, but you can choose to name them with (name)="
  },
  {
    "objectID": "tils/til-tables-with-table-nas-20250630.html#example",
    "href": "tils/til-tables-with-table-nas-20250630.html#example",
    "title": "frequency tables - handle NAs in table()",
    "section": "Example",
    "text": "Example\n\nwith(cheshire_petitions, \n     table(type=petition_type, gender=petition_gender, useNA = \"ifany\")) \n\n                      gender\ntype                     f  fm   m &lt;NA&gt;\n  collective             0   0   0  100\n  collective on behalf   4   0   8    0\n  multiple               2  26  41    0\n  multiple on behalf     1   1   2    0\n  single               125   0 303    0"
  },
  {
    "objectID": "tils/til-select-not-all-any-of-20250630.html",
    "href": "tils/til-select-not-all-any-of-20250630.html",
    "title": "de-select multiple columns with all_of() or any_of()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-select-not-all-any-of-20250630.html#includes",
    "href": "tils/til-select-not-all-any-of-20250630.html#includes",
    "title": "de-select multiple columns with all_of() or any_of()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-select-not-all-any-of-20250630.html#notes",
    "href": "tils/til-select-not-all-any-of-20250630.html#notes",
    "title": "de-select multiple columns with all_of() or any_of()",
    "section": "Notes",
    "text": "Notes\n\nneater than using minus sign? though less concise. and perhaps more usable inside functions?\n[got this from Kieran Healy, but i’m not sure where]\n\nall_of() is for strict selection. If any of the variables in the character vector is missing, an error is thrown.\n\n\nany_of() doesn’t check for missing variables. It is especially useful with negative selections, when you would like to make sure a variable is removed."
  },
  {
    "objectID": "tils/til-select-not-all-any-of-20250630.html#example",
    "href": "tils/til-select-not-all-any-of-20250630.html#example",
    "title": "de-select multiple columns with all_of() or any_of()",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n select(!all_of(c(\"petition_gender\", \"year\"))) \n\n# A tibble: 613 × 10\n   petition_id topic      subtopic petition_type named_petrs response petitioner\n         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;     \n 1        1116 litigation anti     collective              0 no_resp… inhabitan…\n 2        1117 litigation anti     single                  1 granted  Richard S…\n 3        1118 litigation anti     single                  1 granted  Robert Th…\n 4        1119 litigation anti     single                  1 granted  Margarett…\n 5        1120 litigation anti     single                  1 grant_p… Llewellen…\n 6        1121 cottage    pro      multiple on …           2 granted  Raphe Lef…\n 7        1122 litigation anti     collective              0 no_resp… the inhab…\n 8        1123 officehol… dischar… single                  1 no_resp… Laurence …\n 9        1124 litigation anti     single                  1 no_resp… George Ha…\n10        1125 cottage    pro      multiple on …           2 grant_c… Thomas Ma…\n# ℹ 603 more rows\n# ℹ 3 more variables: abstract &lt;chr&gt;, reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-select-not-all-any-of-20250630.html#resources",
    "href": "tils/til-select-not-all-any-of-20250630.html#resources",
    "title": "de-select multiple columns with all_of() or any_of()",
    "section": "Resources",
    "text": "Resources\n\nhttps://tidyselect.r-lib.org/reference/all_of.html"
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html",
    "href": "tils/til-functions-rename-var-20250630.html",
    "title": "functions rename variables with !! and :=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html#includes",
    "href": "tils/til-functions-rename-var-20250630.html#includes",
    "title": "functions rename variables with !! and :=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html#notes",
    "href": "tils/til-functions-rename-var-20250630.html#notes",
    "title": "functions rename variables with !! and :=",
    "section": "Notes",
    "text": "Notes\n\nstep 1 embracing and name injection [dplyr vignette]\nstep 2 reuse new name [SO]\nthis is a function to std surnames, adapted from loc xml (kept some stuff commented out for reference…)\ncol doesn’t need to be quoted\nuseful SO explanation:\n\nUse {{var}} when using the column names directly.\n\n\nI am not sure if “cont_chg_{{ var }}” works, I prefer to use .data pronoun there.\n\n\nTo assign column names use !!name := to create new columns."
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html#function",
    "href": "tils/til-functions-rename-var-20250630.html#function",
    "title": "functions rename variables with !! and :=",
    "section": "Function",
    "text": "Function\n\nstd_surnames &lt;- function(df, col){ \n \n  val &lt;- deparse(substitute(col)) \n  col_std &lt;- paste0(val, \"_std\") \n   \n  df |&gt; \n    # lowercase \n    mutate(!!col_std := str_to_lower({{col}})) |&gt; \n    # replace space with hyphen \n    mutate(!!col_std := str_replace_all(.data[[col_std]], \" +\", \"-\"))   \n    # remove other punct \n    #mutate(!!col_std := str_replace_all(.data[[col_std]], \"[:punct:]\", \"\"))  |&gt; \n    # in case it's created any extra spaces anywhere  \n    # mutate(!!col_std := str_replace_all(.data[[col_std]], \"  +\", \" \")) \n}"
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html#example",
    "href": "tils/til-functions-rename-var-20250630.html#example",
    "title": "functions rename variables with !! and :=",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n  select(persname) |&gt; \n  std_surnames(persname) \n\n# A tibble: 100 × 2\n   persname         persname_std    \n   &lt;chr&gt;            &lt;chr&gt;           \n 1 George Cire      george-cire     \n 2 Gerald McHugh    gerald-mchugh   \n 3 John Gayle       john-gayle      \n 4 Charles Blair    charles-blair   \n 5 Harold Ryan      harold-ryan     \n 6 Henry Kennedy    henry-kennedy   \n 7 Kevin Moore      kevin-moore     \n 8 Louise Flanagan  louise-flanagan \n 9 David Cartter    david-cartter   \n10 Joseph Hutcheson joseph-hutcheson\n# ℹ 90 more rows"
  },
  {
    "objectID": "tils/til-functions-rename-var-20250630.html#resources",
    "href": "tils/til-functions-rename-var-20250630.html#resources",
    "title": "functions rename variables with !! and :=",
    "section": "Resources",
    "text": "Resources\n\nhttps://cran.r-project.org/web/packages/dplyr/vignettes/programming.html\nhttps://stackoverflow.com/questions/67142718/embracing-operator-inside-mutate-function"
  },
  {
    "objectID": "tils/til-lists-make-in-groupby-summarise-20250630.html",
    "href": "tils/til-lists-make-in-groupby-summarise-20250630.html",
    "title": "make a list column using list() inside summarise",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-make-in-groupby-summarise-20250630.html#includes",
    "href": "tils/til-lists-make-in-groupby-summarise-20250630.html#includes",
    "title": "make a list column using list() inside summarise",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-make-in-groupby-summarise-20250630.html#example",
    "href": "tils/til-lists-make-in-groupby-summarise-20250630.html#example",
    "title": "make a list column using list() inside summarise",
    "section": "Example",
    "text": "Example\n\njudges100_appts |&gt; \n  group_by(judge_id) |&gt; \n  # if you want to ensure they're in date order \n  arrange(nomination_date, .by_group = TRUE) |&gt; \n  summarise(nominations = list(nomination_date)) |&gt; \n  ungroup() \n\n# A tibble: 100 × 2\n   judge_id nominations\n      &lt;int&gt; &lt;list&gt;     \n 1      110 &lt;chr [1]&gt;  \n 2      144 &lt;chr [1]&gt;  \n 3      155 &lt;chr [2]&gt;  \n 4      161 &lt;chr [1]&gt;  \n 5      188 &lt;chr [1]&gt;  \n 6      191 &lt;chr [1]&gt;  \n 7      193 &lt;chr [1]&gt;  \n 8      195 &lt;chr [1]&gt;  \n 9      196 &lt;chr [1]&gt;  \n10      208 &lt;chr [1]&gt;  \n# ℹ 90 more rows"
  },
  {
    "objectID": "tils/til-nocode-export-pdf-options-20250630.html",
    "href": "tils/til-nocode-export-pdf-options-20250630.html",
    "title": "pdf options",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-export-pdf-options-20250630.html#includes",
    "href": "tils/til-nocode-export-pdf-options-20250630.html#includes",
    "title": "pdf options",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-export-pdf-options-20250630.html#notes",
    "href": "tils/til-nocode-export-pdf-options-20250630.html#notes",
    "title": "pdf options",
    "section": "Notes",
    "text": "Notes\n\nNB making nice PDFs will drive you round the bend\nNB that {tinytex} was installed to handle latex dependencies (might need reinstalling)\npdf options in yaml header\nunder pdf_document:\ndf_print: not sure if this is doing anything much for this stuff since you’re using tables…\nlatex_engine: important to specify this as xelatex or lualatex (idk what diffs) to have a lot of the other options, esp font stuff\ntop level options:\nmainfont: can use any system font; use quotes if more than one word\nmonofont: if you need it\nlinestretch: increases line spacing but not padding inside tables\ndocumentclass: (eg) scrreprt need to find out more about these\ngeometry: several page settings - paper size, orientation, margins\nmargin=xxcm for all margins; to set them separately: left=xx, right=xx, top=xx, bottom=xx\ngetting more advanced… header-includes and\n\ntinytex should hopefully handle anything not already installed.\n\nheader-includes:\n- \\usepackage[default]{sourcesanspro}"
  },
  {
    "objectID": "tils/til-filter-instead-of-join-20250630.html",
    "href": "tils/til-filter-instead-of-join-20250630.html",
    "title": "filter is sometimes simpler (and more flexible) than joins",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-instead-of-join-20250630.html#includes",
    "href": "tils/til-filter-instead-of-join-20250630.html#includes",
    "title": "filter is sometimes simpler (and more flexible) than joins",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-instead-of-join-20250630.html#notes",
    "href": "tils/til-filter-instead-of-join-20250630.html#notes",
    "title": "filter is sometimes simpler (and more flexible) than joins",
    "section": "Notes",
    "text": "Notes\n\nyou could potentially have multiple conditions in the filter, which you can’t easily do with joins"
  },
  {
    "objectID": "tils/til-filter-instead-of-join-20250630.html#example",
    "href": "tils/til-filter-instead-of-join-20250630.html#example",
    "title": "filter is sometimes simpler (and more flexible) than joins",
    "section": "Example",
    "text": "Example\n\ncheshire_select &lt;- \n  cheshire_petitions[3,] \n \ncheshire_petitions |&gt; \n  filter(topic %in% cheshire_select$topic) \n\n# A tibble: 178 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 2        1117  1577 litigat… anti     single                  1 m              \n 3        1118  1587 litigat… anti     single                  1 m              \n 4        1119  1589 litigat… anti     single                  1 f              \n 5        1120  1590 litigat… anti     single                  1 m              \n 6        1122  1590 litigat… anti     collective              0 &lt;NA&gt;           \n 7        1124  1592 litigat… anti     single                  1 m              \n 8        1126  1594 litigat… other    collective              0 &lt;NA&gt;           \n 9        1127  1594 litigat… pro      multiple                3 fm             \n10        1132  1597 litigat… anti     single                  1 m              \n# ℹ 168 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-grouping-uncount-20250630.html",
    "href": "tils/til-grouping-uncount-20250630.html",
    "title": "uncount - the opposite of count",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-uncount-20250630.html#includes",
    "href": "tils/til-grouping-uncount-20250630.html#includes",
    "title": "uncount - the opposite of count",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-uncount-20250630.html#notes",
    "href": "tils/til-grouping-uncount-20250630.html#notes",
    "title": "uncount - the opposite of count",
    "section": "Notes",
    "text": "Notes\n\nthis is a silly example but I can’t think of a better way to do one right now!\nmaybe get s&b data?"
  },
  {
    "objectID": "tils/til-grouping-uncount-20250630.html#example",
    "href": "tils/til-grouping-uncount-20250630.html#example",
    "title": "uncount - the opposite of count",
    "section": "Example",
    "text": "Example\n\njudges100_appts_counted &lt;- \njudges100_appts |&gt; \n  count(court_name)  \n \njudges100_appts_counted |&gt; \n  uncount(n) \n\n# A tibble: 126 × 1\n   court_name                                                 \n   &lt;chr&gt;                                                      \n 1 Court of Claims                                            \n 2 Court of Claims                                            \n 3 Supreme Court of the United States                         \n 4 Supreme Court of the United States                         \n 5 Supreme Court of the United States                         \n 6 Supreme Court of the United States, Chief Justice          \n 7 Supreme Court of the United States, Chief Justice          \n 8 U. S. Circuit Courts for the Fourth Circuit                \n 9 U. S. Circuit Courts for the Ninth Circuit                 \n10 U. S. Court of Appeals for the District of Columbia Circuit\n# ℹ 116 more rows"
  },
  {
    "objectID": "tils/til-combn-make-pairs-20250630.html",
    "href": "tils/til-combn-make-pairs-20250630.html",
    "title": "make unique pairs from a list of values",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-combn-make-pairs-20250630.html#includes",
    "href": "tils/til-combn-make-pairs-20250630.html#includes",
    "title": "make unique pairs from a list of values",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-combn-make-pairs-20250630.html#notes",
    "href": "tils/til-combn-make-pairs-20250630.html#notes",
    "title": "make unique pairs from a list of values",
    "section": "Notes",
    "text": "Notes\n\n\nIf x is a positive integer, returns all combinations of the elements of seq(x) taken m at a time.\n\ncompletely unique pairs - eg you don’t get a+b and b+a. if you want that, use expand_grid() TIL\ncombn makes a matrix, so then you have to turn it into a tibble.\n\nas_tibble .name_repair can be used to create column names, nb need to prefix c(a,b, etc) with tilde.\nneeds public data if moved to gh.io?"
  },
  {
    "objectID": "tils/til-combn-make-pairs-20250630.html#example",
    "href": "tils/til-combn-make-pairs-20250630.html#example",
    "title": "make unique pairs from a list of values",
    "section": "Example",
    "text": "Example\n\nagg_variables_csv &lt;- \n  read_csv(here::here(\"data/agg_variables.csv\"), show_col_types = FALSE) \n \nagg_variables_names &lt;- \nagg_variables_csv$name \n \nnew_col_names &lt;- c(\"rows\", \"series\") \n \n \ncombn(agg_variables_names, m=2 ) |&gt;  \n  # transpose the matrix else you get stupidly wide df. \n  t() |&gt; \n  as_tibble(.name_repair = ~new_col_names) \n\n# A tibble: 120 × 2\n   rows             series                \n   &lt;chr&gt;            &lt;chr&gt;                 \n 1 offence_category offence_subcategory   \n 2 offence_category plea                  \n 3 offence_category verdict_category      \n 4 offence_category verdict_subcategory   \n 5 offence_category punishment_category   \n 6 offence_category punishment_subcategory\n 7 offence_category defendant_gender      \n 8 offence_category defendant_age         \n 9 offence_category victim_gender         \n10 offence_category victim_age            \n# ℹ 110 more rows\n\n  #as_tibble(.name_repair = ~c(\"rows\", \"series\")) # either way works but nb placing of ~"
  },
  {
    "objectID": "tils/til-combn-make-pairs-20250630.html#resources",
    "href": "tils/til-combn-make-pairs-20250630.html#resources",
    "title": "make unique pairs from a list of values",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/a/1710387/7281022\nhttps://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/combn"
  },
  {
    "objectID": "tils/til-functions-split-data-20250630.html",
    "href": "tils/til-functions-split-data-20250630.html",
    "title": "functions use a column name as an arg and convert to a string",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-split-data-20250630.html#includes",
    "href": "tils/til-functions-split-data-20250630.html#includes",
    "title": "functions use a column name as an arg and convert to a string",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-split-data-20250630.html#notes",
    "href": "tils/til-functions-split-data-20250630.html#notes",
    "title": "functions use a column name as an arg and convert to a string",
    "section": "Notes",
    "text": "Notes\n\nthis was used in a workflow with patchwork wrap_plots. related functions in the qmd."
  },
  {
    "objectID": "tils/til-functions-split-data-20250630.html#function",
    "href": "tils/til-functions-split-data-20250630.html#function",
    "title": "functions use a column name as an arg and convert to a string",
    "section": "Function",
    "text": "Function\n\nsplit_data &lt;- function(data, grp){ \n \ngrp_character &lt;- deparse(substitute(grp)) \n \ndata_names &lt;- \n  # sort should put in the same order as the group_split (though idk why group_split reorders them) \n  sort(unique(data[[grp_character]])) \n \n  data_split &lt;- \n  data |&gt; \n  group_split({{grp}}) \n \n  names(data_split) &lt;- data_names \n   \n  data_split  \n   \n}"
  },
  {
    "objectID": "tils/til-functions-split-data-20250630.html#example",
    "href": "tils/til-functions-split-data-20250630.html#example",
    "title": "functions use a column name as an arg and convert to a string",
    "section": "Example",
    "text": "Example\n\nsplit_data(cheshire_petitions, topic) \n\n&lt;list_of&lt;\n  tbl_df&lt;\n    petition_id    : double\n    year           : double\n    topic          : character\n    subtopic       : character\n    petition_type  : character\n    named_petrs    : double\n    petition_gender: character\n    response       : character\n    petitioner     : character\n    abstract       : character\n    reference      : character\n    repository     : character\n  &gt;\n&gt;[13]&gt;\n$alehouse\n# A tibble: 17 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1197  1618 alehouse pro      single                  1 m              \n 2        1208  1618 alehouse pro      single                  1 m              \n 3        1296  1638 alehouse anti     collective              0 &lt;NA&gt;           \n 4        1347  1648 alehouse &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 5        1438  1648 alehouse &lt;NA&gt;     single                  1 m              \n 6        1442  1648 alehouse &lt;NA&gt;     single                  1 m              \n 7        1450  1648 alehouse &lt;NA&gt;     single                  1 m              \n 8        1451  1648 alehouse &lt;NA&gt;     single                  1 m              \n 9        1474  1648 alehouse &lt;NA&gt;     single                  1 m              \n10        1497  1648 alehouse &lt;NA&gt;     single                  1 m              \n11        1522  1658 alehouse anti     collective              0 &lt;NA&gt;           \n12        1557  1658 alehouse pro      single                  1 f              \n13        1580  1658 alehouse pro      single                  1 m              \n14        1600  1658 alehouse pro      collective o…           1 m              \n15        1601  1668 alehouse &lt;NA&gt;     single                  1 f              \n16        1637  1668 alehouse &lt;NA&gt;     single                  1 m              \n17        1646  1668 alehouse &lt;NA&gt;     single                  1 m              \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$`charitable brief`\n# A tibble: 16 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1365  1648 charita… &lt;NA&gt;     single                  1 m              \n 2        1377  1648 charita… &lt;NA&gt;     single                  1 m              \n 3        1416  1648 charita… &lt;NA&gt;     single                  1 m              \n 4        1461  1648 charita… &lt;NA&gt;     multiple                2 fm             \n 5        1487  1648 charita… &lt;NA&gt;     single                  1 m              \n 6        1490  1648 charita… &lt;NA&gt;     single                  1 m              \n 7        1518  1648 charita… &lt;NA&gt;     single                  1 m              \n 8        1582  1658 charita… county:… single                  1 m              \n 9        1658  1678 charita… fire     collective o…           1 m              \n10        1702  1708 charita… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n11        1703  1708 charita… &lt;NA&gt;     single                  1 m              \n12        1713  1778 charita… &lt;NA&gt;     single                  1 m              \n13        1717  1798 charita… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n14        1718  1798 charita… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n15        1727  1768 charita… &lt;NA&gt;     multiple                2 f              \n16        1728  1788 charita… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$cottage\n# A tibble: 92 × 12\n   petition_id  year topic   subtopic petition_type  named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;          \n 1        1121  1590 cottage pro      multiple on b…           2 m              \n 2        1125  1592 cottage pro      multiple on b…           2 m              \n 3        1128  1594 cottage pro      single                   1 m              \n 4        1130  1594 cottage pro      single                   1 m              \n 5        1133  1597 cottage anti     collective               0 &lt;NA&gt;           \n 6        1180  1618 cottage pro      multiple                 2 fm             \n 7        1190  1618 cottage pro      single                   1 m              \n 8        1192  1618 cottage pro      single                   1 m              \n 9        1194  1618 cottage pro      single                   1 m              \n10        1195  1618 cottage pro      single                   1 m              \n# ℹ 82 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$`dissenting worship`\n# A tibble: 5 × 12\n  petition_id  year topic     subtopic petition_type named_petrs petition_gender\n        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n1        1711  1758 dissenti… &lt;NA&gt;     single                  1 m              \n2        1719  1798 dissenti… &lt;NA&gt;     single                  1 m              \n3        1723  1748 dissenti… &lt;NA&gt;     multiple                6 m              \n4        1724  1748 dissenti… &lt;NA&gt;     multiple                6 m              \n5        1726  1768 dissenti… &lt;NA&gt;     multiple                4 m              \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$employment\n# A tibble: 15 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1236  1628 employm… &lt;NA&gt;     single                  1 f              \n 2        1238  1628 employm… &lt;NA&gt;     single                  1 m              \n 3        1245  1628 employm… &lt;NA&gt;     single                  1 f              \n 4        1256  1628 employm… &lt;NA&gt;     single                  1 f              \n 5        1348  1648 employm… &lt;NA&gt;     multiple                2 m              \n 6        1415  1648 employm… &lt;NA&gt;     single                  1 f              \n 7        1418  1648 employm… &lt;NA&gt;     single                  1 m              \n 8        1449  1648 employm… &lt;NA&gt;     single                  1 f              \n 9        1452  1648 employm… &lt;NA&gt;     single                  1 m              \n10        1453  1648 employm… &lt;NA&gt;     single                  1 m              \n11        1467  1648 employm… &lt;NA&gt;     single                  1 m              \n12        1504  1648 employm… &lt;NA&gt;     single                  1 f              \n13        1507  1648 employm… &lt;NA&gt;     single                  1 m              \n14        1532  1658 employm… release… single                  1 m              \n15        1707  1738 employm… &lt;NA&gt;     single                  1 m              \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$`imprisoned debtors`\n# A tibble: 1 × 12\n  petition_id  year topic     subtopic petition_type named_petrs petition_gender\n        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n1        1714  1778 imprison… &lt;NA&gt;     single                  1 m              \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$litigation\n# A tibble: 178 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 2        1117  1577 litigat… anti     single                  1 m              \n 3        1118  1587 litigat… anti     single                  1 m              \n 4        1119  1589 litigat… anti     single                  1 f              \n 5        1120  1590 litigat… anti     single                  1 m              \n 6        1122  1590 litigat… anti     collective              0 &lt;NA&gt;           \n 7        1124  1592 litigat… anti     single                  1 m              \n 8        1126  1594 litigat… other    collective              0 &lt;NA&gt;           \n 9        1127  1594 litigat… pro      multiple                3 fm             \n10        1132  1597 litigat… anti     single                  1 m              \n# ℹ 168 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$`military relief`\n# A tibble: 30 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1156  1608 militar… &lt;NA&gt;     single                  1 m              \n 2        1165  1608 militar… &lt;NA&gt;     single                  1 m              \n 3        1178  1618 militar… veteran  single                  1 m              \n 4        1200  1618 militar… veteran  single                  1 m              \n 5        1240  1628 militar… &lt;NA&gt;     single                  1 m              \n 6        1250  1628 militar… &lt;NA&gt;     single                  1 m              \n 7        1251  1628 militar… &lt;NA&gt;     single                  1 m              \n 8        1260  1628 militar… &lt;NA&gt;     single                  1 m              \n 9        1358  1648 militar… &lt;NA&gt;     single                  1 f              \n10        1523  1658 militar… widow    single                  1 f              \n# ℹ 20 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$officeholding\n# A tibble: 21 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1123  1592 officeh… dischar… single                  1 m              \n 2        1138  1598 officeh… other    multiple                2 m              \n 3        1157  1608 officeh… &lt;NA&gt;     single                  1 m              \n 4        1368  1648 officeh… &lt;NA&gt;     single                  1 m              \n 5        1391  1648 officeh… &lt;NA&gt;     single                  1 m              \n 6        1397  1648 officeh… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 7        1402  1648 officeh… &lt;NA&gt;     multiple                2 m              \n 8        1411  1648 officeh… &lt;NA&gt;     single                  1 m              \n 9        1421  1648 officeh… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n10        1480  1648 officeh… &lt;NA&gt;     single                  1 m              \n# ℹ 11 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$other\n# A tibble: 17 × 12\n   petition_id  year topic subtopic    petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1131  1595 other passport    single                  1 m              \n 2        1212  1618 other highway re… collective              0 &lt;NA&gt;           \n 3        1213  1618 other badger's l… single                  1 f              \n 4        1281  1638 other highway re… multiple                3 m              \n 5        1301  1638 other highway re… single                  1 m              \n 6        1437  1648 other &lt;NA&gt;        collective              0 &lt;NA&gt;           \n 7        1448  1648 other &lt;NA&gt;        single                  1 f              \n 8        1455  1648 other &lt;NA&gt;        collective              0 &lt;NA&gt;           \n 9        1520  1648 other &lt;NA&gt;        single                  1 m              \n10        1521  1648 other &lt;NA&gt;        single                  1 m              \n11        1545  1658 other release fr… single                  1 f              \n12        1577  1658 other excise off… single                  1 m              \n13        1606  1668 other &lt;NA&gt;        single                  1 f              \n14        1609  1668 other &lt;NA&gt;        collective              0 &lt;NA&gt;           \n15        1706  1718 other &lt;NA&gt;        single                  1 m              \n16        1716  1798 other &lt;NA&gt;        single                  1 m              \n17        1720  1798 other &lt;NA&gt;        single                  1 m              \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$paternity\n# A tibble: 63 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1152  1608 paterni… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 2        1158  1608 paterni… &lt;NA&gt;     single                  1 f              \n 3        1166  1608 paterni… &lt;NA&gt;     single                  1 f              \n 4        1185  1618 paterni… pro      single                  1 f              \n 5        1201  1618 paterni… pro      single                  1 f              \n 6        1209  1618 paterni… pro      single                  1 m              \n 7        1218  1618 paterni… pro      single                  1 f              \n 8        1230  1618 paterni… anti     single                  1 m              \n 9        1249  1628 paterni… &lt;NA&gt;     single                  1 f              \n10        1263  1628 paterni… &lt;NA&gt;     single                  1 m              \n# ℹ 53 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$`poor relief`\n# A tibble: 80 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1129  1594 poor re… pro      single                  1 m              \n 2        1175  1618 poor re… pro      single                  1 f              \n 3        1193  1618 poor re… pro      single                  1 f              \n 4        1206  1618 poor re… pro      single                  1 m              \n 5        1207  1618 poor re… pro      collective o…           1 m              \n 6        1214  1618 poor re… pro      single                  1 f              \n 7        1221  1618 poor re… pro      collective              0 &lt;NA&gt;           \n 8        1227  1618 poor re… pro      multiple                2 fm             \n 9        1233  1628 poor re… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n10        1262  1628 poor re… &lt;NA&gt;     single                  1 m              \n# ℹ 70 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n$rates\n# A tibble: 78 × 12\n   petition_id  year topic subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1140  1599 rates anti     collective              0 &lt;NA&gt;           \n 2        1146  1608 rates &lt;NA&gt;     multiple                2 m              \n 3        1148  1608 rates &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 4        1151  1608 rates &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 5        1167  1608 rates &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 6        1169  1608 rates &lt;NA&gt;     single                  1 m              \n 7        1243  1628 rates &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 8        1247  1628 rates &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 9        1253  1628 rates &lt;NA&gt;     single                  1 m              \n10        1257  1628 rates &lt;NA&gt;     multiple                6 m              \n# ℹ 68 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-strings-snakecase-20250630.html",
    "href": "tils/til-strings-snakecase-20250630.html",
    "title": "convert strings between case formats with snakecase package",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-strings-snakecase-20250630.html#includes",
    "href": "tils/til-strings-snakecase-20250630.html#includes",
    "title": "convert strings between case formats with snakecase package",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-strings-snakecase-20250630.html#notes",
    "href": "tils/til-strings-snakecase-20250630.html#notes",
    "title": "convert strings between case formats with snakecase package",
    "section": "Notes",
    "text": "Notes\n\ncf janitor::clean_names for column names\nto use hyphens instead of underscores just use sep_out\nsnakecase::to_snake_case(“Help Me OutHere”, sep_out = “-”)"
  },
  {
    "objectID": "tils/til-strings-snakecase-20250630.html#example",
    "href": "tils/til-strings-snakecase-20250630.html#example",
    "title": "convert strings between case formats with snakecase package",
    "section": "Example",
    "text": "Example\n\njudges100_appts |&gt; \n  mutate(court_name = snakecase::to_snake_case(court_name)) |&gt; \n  relocate(court_name) \n\n# A tibble: 126 × 15\n   court_name judge_id court_type president_name president_party nomination_date\n   &lt;chr&gt;         &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;           &lt;chr&gt;          \n 1 u_s_distr…     2997 USDC       George W. Bush Republican      01/15/2003     \n 2 u_s_distr…      110 USDC       Dwight D. Eis… Republican      04/20/1959     \n 3 u_s_distr…      144 USDC       Jimmy Carter   Democratic      02/09/1979     \n 4 court_of_…      155 Court of … Richard M. Ni… Republican      05/22/1972     \n 5 u_s_distr…      161 USDC       William J. Cl… Democratic      11/18/1993     \n 6 u_s_distr…      188 USDC       Richard M. Ni… Republican      07/14/1971     \n 7 u_s_distr…      191 USDC       James Monroe   Jeffersonian R… 01/03/1820     \n 8 u_s_distr…      193 USDC       Richard M. Ni… Republican      05/18/1971     \n 9 u_s_distr…      195 USDC       Jimmy Carter   Democratic      08/03/1979     \n10 u_s_distr…      196 USDC       William J. Cl… Democratic      07/22/1994     \n# ℹ 116 more rows\n# ℹ 9 more variables: predecessor_last_name &lt;chr&gt;,\n#   predecessor_first_name &lt;chr&gt;, senate_confirmation_date &lt;chr&gt;,\n#   commission_date &lt;chr&gt;, chief_judge_begin &lt;int&gt;, chief_judge_end &lt;int&gt;,\n#   retirement_from_active_service &lt;chr&gt;, termination_date &lt;chr&gt;,\n#   termination_reason &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-xml-create-tei-xml-20250630.html",
    "href": "tils/til-xml-create-tei-xml-20250630.html",
    "title": "create a valid TEI XML doc including NA handling",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-create-tei-xml-20250630.html#includes",
    "href": "tils/til-xml-create-tei-xml-20250630.html#includes",
    "title": "create a valid TEI XML doc including NA handling",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-create-tei-xml-20250630.html#notes",
    "href": "tils/til-xml-create-tei-xml-20250630.html#notes",
    "title": "create a valid TEI XML doc including NA handling",
    "section": "Notes",
    "text": "Notes\n\nNAs get turned into “NA” strings - handle with xml_remove()\n\na couple of options for elements:\n\nturn NAs into “” blanks which will create empty elements, remove with xpath [not(text())]\nor leave them as “NA” and use xpath with [.=‘NA’]\n\n(don’t do that if for some reason there could be elements consisting of just the text “NA”!!)\nfor attributes use [.=‘NA’] or [.=’’]\nLIMITATION:\n\nnever been able to work out how to do sub-looping for nested 1-to-many variables.\nhackarounds with XSLT (but can’t run them from R)\n\nsave as JSON and use a json2xml XSLT (very faffy and needs xslt3)\n\n\nmake multiple simple XMLs and merge them with XSLT lookups (a bit less faffy, xslt2) (this one feels like it should be xslt1-able, would need to work out how to change the lookup)"
  },
  {
    "objectID": "tils/til-xml-create-tei-xml-20250630.html#example",
    "href": "tils/til-xml-create-tei-xml-20250630.html#example",
    "title": "create a valid TEI XML doc including NA handling",
    "section": "Example",
    "text": "Example\n\n# to convert NAs to \"\" \n# judges100 &lt;- \n# judges100 |&gt; \n  # if turning NAs into \"\" birth and death dates need to be char \n  # mutate(across(c(birth_date, death_date), as.character)) |&gt; \n  # change NAs in any char cols to \"\"  \n  # mutate(across(where(is.character), ~replace_na(., \"\"))) \n  # can also use replace_na without a mutate but have to name cols in a list \n  # replace_na(list(name_middle=\"\"))  \n \nlibrary(xml2) \n \n# function to make a minimal valid teiHeader \nmake_teiHeader &lt;- function(data, doc_title=\"ATB\"){ \n \n  date_stamp &lt;- today() |&gt; format('%Y-%m-%d') \n   \n  # to add a comment \n  xml_add_child(tei_doc, xml_comment(\" DO NOT EDIT THIS FILE: it's generated automatically from a script. \")) \n \n  xml_add_child(data, \"teiHeader\") \n   \n  header_nodes &lt;- xml_find_all(data, \"//teiHeader\") \n   \n  xml_add_child(header_nodes, \"fileDesc\") \n   \n  #  required in fileDesc: titleStmt, publicationStmt, sourceDesc \n  filedesc_nodes &lt;- xml_find_all(data, \"//teiHeader/fileDesc\") \n  xml_add_child(filedesc_nodes, \"titleStmt\") \n  xml_add_child(filedesc_nodes, \"publicationStmt\") \n  xml_add_child(filedesc_nodes, \"sourceDesc\") \n   \n  titlenodes &lt;- xml_find_all(data, \"//fileDesc/titleStmt\") \n  xml_add_child(titlenodes, \"title\", doc_title) \n   \n  #pub_info &lt;- \"...\" \n  #src_info &lt;- \"sources: ....\" \n  #encodesc_notes &lt;- \"...\" \n   \n  pubnodes &lt;- xml_find_all(data, \"//fileDesc/publicationStmt\") \n  xml_add_child(pubnodes, \"p\", \"...\") \n   \n  srcnodes &lt;- xml_find_all(data, \"//fileDesc/sourceDesc\") \n  xml_add_child(srcnodes, \"p\", \"...\") \n   \n  xml_add_child(header_nodes, \"profileDesc\") \n  profile_nodes &lt;- xml_find_all(data, \"//teiHeader/profileDesc\") \n  xml_add_child(profile_nodes, \"creation\") \n   \n  creation_nodes &lt;- xml_find_all(data, \"//profileDesc/creation\") \n  xml_add_child(creation_nodes, \"date\") \n   \n  xml_add_child(header_nodes, \"encodingDesc\") \n   \n   \n  encodesc_nodes &lt;- xml_find_all(data, \"//teiHeader/encodingDesc\") \n  xml_add_child(encodesc_nodes, \"p\", '...') \n   \n  # should make when attribute for date but cba right now \n  cd_nodes &lt;- xml_find_all(data, \"//profileDesc/creation/date\") \n  xml_attr(cd_nodes, \"when\") &lt;- date_stamp \n       \n} \n \n \n \ntei_doc &lt;- xml_new_root(\"TEI\", xmlns = \"http://www.tei-c.org/ns/1.0\")  \n \n# to add a comment at top level (in teiHeader) \n# xml_add_child(tei_doc, xml_comment(\"do something here\")) \n \n# add teiHeader using function in teiHeader TIL  \nmake_teiHeader(tei_doc, \"US Judges\") \n \n# for tei you then need empty child \"text\" (no loop) and child of text \"body\" \nxml_add_child(tei_doc, \"text\") \ntext_nodes &lt;- xml_find_all(tei_doc, \"//text\") \n \nxml_add_child(text_nodes, \"body\") \nbody_nodes &lt;- xml_find_all(tei_doc, \"//text/body\")  \n \n# make a list of people: next child of body \"listPerson\" \nxml_add_child(body_nodes, \"listPerson\") \n \n# adjusted the first loop to nest under listPerson  \nlistperson_nodes &lt;- xml_find_all(tei_doc, \"//body/listPerson\") \n \n \n# make empty person_nodes. this needs a loop.  \nfor (person_nodes in 1:nrow(judges100)) { \n  xml_add_child(listperson_nodes, \"person\") \n} \n \n# for loop will do for now, though would be fun to use purrr:map  \n# https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html \n \n# person \nperson_nodes &lt;- xml_find_all(tei_doc, \"//listPerson/person\") \n \n# add xml:id attribute. (nb original judge_id is numerical, can't use that in xml:id) \nxml_attr(person_nodes, \"xml:id\") &lt;- judges100$id   \n \n# add persName  \nxml_add_child(person_nodes, \"persName\", judges100$persname) \n \n# um what are you doing here? you seem to make persName again after this. check  \n# how to add attributes to persName rather than person? \n# create a new _nodes object and ensure it points to the right place \ntype_nodes &lt;- xml_find_all(tei_doc, \"//person/persName\") \nxml_attr(type_nodes, \"type\") &lt;- \"label\" \n \n \n# persName for name elements \n# nesting: add an empty child. then repeat xml_find_all and add_child to that.  \npersName_nodes &lt;- xml_find_all(tei_doc, \"//listPerson/person\") \nxml_add_child(persName_nodes, \"persName\") \n \n# forename - but only under nested persName, not label persName \nforename_nodes &lt;- xml_find_all(tei_doc, \"//listPerson/person/persName[not(@type='label')]\") \nxml_add_child(forename_nodes, \"forename\", judges100$name_first) \n# surname, ditto (can reuse forename_nodes in spite of your misleading naming) \nxml_add_child(forename_nodes, \"surname\", judges100$name_last) \n \n# birth \nxml_add_child(person_nodes, \"birth\", judges100$birth_date) \n \n# death.  \nxml_add_child(person_nodes, \"death\", judges100$death_date) \n# let's see what happens \nxml_attr(person_nodes, \"when\") &lt;- judges100$death_date \n \n# gender \nxml_add_child(person_nodes, \"gender\", judges100$gender) \n \n \n# remove empty or 'NA' elements \n# xpath - have to be named I think (tried wildcards, R crashed) \nempty_elem &lt;-  \n  xml_find_all(tei_doc, \n               \"//birth[.='NA'] | \n                //death[.='NA'] | \n                //birth[not(text())] | \n                //death[not(text())] \n               \") \nxml_remove(empty_elem) \n \n \n# to remove \"\" or \"NA\" attributes. this wildcard seems fine. \nempty_attr &lt;- xml_find_all(tei_doc, \"//@*[.='' or .='NA']\") \nxml_remove(empty_attr) \n \n \n \n# write to file [done] \n# write_xml(tei_doc, file = here::here(\"outputs/tei-judges.xml\"), options =c(\"format\")) \n \n# show the content of the file \n# cat(as.character(tei_doc)) \n \n# to read it back in... don't forget options=\"\" \n# xml2::read_xml(here::here(\"outputs/tei-judges.xml\"), options = \"\")"
  },
  {
    "objectID": "tils/til-xml-create-tei-xml-20250630.html#resources",
    "href": "tils/til-xml-create-tei-xml-20250630.html#resources",
    "title": "create a valid TEI XML doc including NA handling",
    "section": "Resources",
    "text": "Resources\n\nhttps://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html"
  },
  {
    "objectID": "tils/til-lists-names-using-vectors-20250630.html",
    "href": "tils/til-lists-names-using-vectors-20250630.html",
    "title": "add names to a list with a vector of filenames",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-names-using-vectors-20250630.html#includes",
    "href": "tils/til-lists-names-using-vectors-20250630.html#includes",
    "title": "add names to a list with a vector of filenames",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-names-using-vectors-20250630.html#notes",
    "href": "tils/til-lists-names-using-vectors-20250630.html#notes",
    "title": "add names to a list with a vector of filenames",
    "section": "Notes",
    "text": "Notes\n\nyou don’t actually need to have the vector of names from the same source\nbut it ensures they will match up…"
  },
  {
    "objectID": "tils/til-lists-names-using-vectors-20250630.html#example",
    "href": "tils/til-lists-names-using-vectors-20250630.html#example",
    "title": "add names to a list with a vector of filenames",
    "section": "Example",
    "text": "Example\n\n# get list of files \ndiv_csvs_files &lt;- list.files(here::here(\"data/csv/\"), pattern = \"*.csv\", full.names = T) \n \n# use map() to read_csv a folder of CSV files (makes a list) \ndivs_list &lt;- \n  map(div_csvs_files, read_csv)  \n \n# csv names include file extension which needs to be removed.  \ndiv_filenames &lt;-  \ndiv_csvs_files |&gt; \n  # remove .csv (will be a list) \n  map(tools::file_path_sans_ext) |&gt; \n  # get just the filename \n  map(basename) |&gt; \n  # flatten list to a vector \n  unlist() \n \n \nnames(divs_list) &lt;- div_filenames"
  },
  {
    "objectID": "tils/til-purrr-pluck-20250630.html",
    "href": "tils/til-purrr-pluck-20250630.html",
    "title": "extract things with purrr pluck",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-purrr-pluck-20250630.html#includes",
    "href": "tils/til-purrr-pluck-20250630.html#includes",
    "title": "extract things with purrr pluck",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-purrr-pluck-20250630.html#notes",
    "href": "tils/til-purrr-pluck-20250630.html#notes",
    "title": "extract things with purrr pluck",
    "section": "Notes",
    "text": "Notes\n\ndata and documentation https://github.com/Beyond-Notability/bn_r_doc\nfile https://github.com/Beyond-Notability/bn_r_doc/blob/main/loc/outputs/loc_bn_records.json"
  },
  {
    "objectID": "tils/til-purrr-pluck-20250630.html#example",
    "href": "tils/til-purrr-pluck-20250630.html#example",
    "title": "extract things with purrr pluck",
    "section": "Example",
    "text": "Example\n\nbn_loc_readjson &lt;- \n  jsonlite::read_json(here::here(\"data/loc_bn_records.json\")) \n# unsimplified with read_json \n \n \npluck(bn_loc_readjson, 3) # all of the 3rd record, i think \n\n$lccnID\n[1] \"03006891\"\n\n$title\n[1] \"England under the Angevin kings\"\n\n$date\n[1] \"1887\"\n\n$place\n[1] \"London and New York\"\n\n$publisher\n[1] \"Macmillan and Co.\"\n\n$callNumber\n[1] \"DA205 .N838\"\n\n$creators\n$creators[[1]]\n$creators[[1]]$name\n[1] \"Norgate, Kate\"\n\n$creators[[1]]$creatorType\n[1] \"author\"\n\n$creators[[1]]$namePos\n[1] 1\n\n$creators[[1]]$bn_id\n[1] \"Q1000\"\n\n$creators[[1]]$bn_name\n[1] \"Kate Norgate\"\n\n\n\n$keywords\nnamed list()\n\n$permalink\n[1] \"https://lccn.loc.gov/03006891\"\n\n$itemType\n[1] \"book\"\n\npluck(bn_loc_readjson, 3, 2) # 3rd record, 2nd thing (title) \n\n[1] \"England under the Angevin kings\""
  },
  {
    "objectID": "tils/til-dates-unixtime-to-date-20250630.html",
    "href": "tils/til-dates-unixtime-to-date-20250630.html",
    "title": "convert unix timestamps to date with lubridate as_datetime",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-dates-unixtime-to-date-20250630.html#includes",
    "href": "tils/til-dates-unixtime-to-date-20250630.html#includes",
    "title": "convert unix timestamps to date with lubridate as_datetime",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-dates-unixtime-to-date-20250630.html#notes",
    "href": "tils/til-dates-unixtime-to-date-20250630.html#notes",
    "title": "convert unix timestamps to date with lubridate as_datetime",
    "section": "Notes",
    "text": "Notes\n\nas.numeric(posixct) makes a unix timestamp"
  },
  {
    "objectID": "tils/til-dates-unixtime-to-date-20250630.html#example",
    "href": "tils/til-dates-unixtime-to-date-20250630.html#example",
    "title": "convert unix timestamps to date with lubridate as_datetime",
    "section": "Example",
    "text": "Example\n\nunixdate &lt;- as.numeric(as.POSIXct(\"2013-09-16 2:13:46 EST\")) \n \nas_datetime(unixdate) \n\n[1] \"2013-09-16 01:13:46 UTC\""
  },
  {
    "objectID": "tils/til-grouping-dense-rank-20250630.html",
    "href": "tils/til-grouping-dense-rank-20250630.html",
    "title": "make numerical within-group IDs with dense_rank",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dense-rank-20250630.html#includes",
    "href": "tils/til-grouping-dense-rank-20250630.html#includes",
    "title": "make numerical within-group IDs with dense_rank",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dense-rank-20250630.html#notes",
    "href": "tils/til-grouping-dense-rank-20250630.html#notes",
    "title": "make numerical within-group IDs with dense_rank",
    "section": "Notes",
    "text": "Notes\n\nNB not a real “ranking” of anything. looks like alphabetical order of the variable and can’t be changed. so probably couldn’t use it if (say) you wanted ids ordered by a count."
  },
  {
    "objectID": "tils/til-grouping-dense-rank-20250630.html#example",
    "href": "tils/til-grouping-dense-rank-20250630.html#example",
    "title": "make numerical within-group IDs with dense_rank",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  select(petition_id, topic, response) |&gt; \n  # in_grp_id is *only* a unique id within the group (topic in this case) \n  group_by(topic) |&gt; \n  #arrange(n_response, .by_group = T) |&gt; # this doesn't seem to make any difference \n  mutate(in_grp_id = dense_rank(response), n_topic=n()) |&gt; \n  ungroup() |&gt; \n  count(topic, response, in_grp_id, n_topic)  \n\n# A tibble: 71 × 5\n   topic            response    in_grp_id n_topic     n\n   &lt;chr&gt;            &lt;chr&gt;           &lt;int&gt;   &lt;int&gt; &lt;int&gt;\n 1 alehouse         granted             1      17     7\n 2 alehouse         no_response         2      17     5\n 3 alehouse         nothing             3      17     3\n 4 alehouse         rejected            4      17     2\n 5 charitable brief granted             1      16     5\n 6 charitable brief no_response         2      16     8\n 7 charitable brief referred            3      16     2\n 8 charitable brief uncertain           4      16     1\n 9 cottage          absent              1      92     1\n10 cottage          grant_cond          2      92    23\n# ℹ 61 more rows"
  },
  {
    "objectID": "tils/til-functions-glue-alt-text-20250630.html",
    "href": "tils/til-functions-glue-alt-text-20250630.html",
    "title": "function to make alt text for dataviz using glue()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-glue-alt-text-20250630.html#includes",
    "href": "tils/til-functions-glue-alt-text-20250630.html#includes",
    "title": "function to make alt text for dataviz using glue()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-glue-alt-text-20250630.html#notes",
    "href": "tils/til-functions-glue-alt-text-20250630.html#notes",
    "title": "function to make alt text for dataviz using glue()",
    "section": "Notes",
    "text": "Notes\n\nformula “chart type of type of data where reason for including chart”\nwhat was the source for this? bluesky/twitter? is it a quote? looks like one\n\nPlaying around with @AmyCesal boiler plate example for writing alt text, but adapted to a #rstats function.”chart type of type of data where reason for including chart” along with the data source.\n\nbut how is this added to output ???"
  },
  {
    "objectID": "tils/til-functions-glue-alt-text-20250630.html#function",
    "href": "tils/til-functions-glue-alt-text-20250630.html#function",
    "title": "function to make alt text for dataviz using glue()",
    "section": "Function",
    "text": "Function\n\nwrite_alt_text &lt;- function( \n  chart_type,  \n  type_of_data,  \n  reason,  \n  source \n){ \n  glue::glue( \n    \"{chart_type} of {type_of_data} where {reason}. \\n\\nData source from {source}\" \n    ) \n}"
  },
  {
    "objectID": "tils/til-functions-glue-alt-text-20250630.html#resources",
    "href": "tils/til-functions-glue-alt-text-20250630.html#resources",
    "title": "function to make alt text for dataviz using glue()",
    "section": "Resources",
    "text": "Resources\n\nhttps://medium.com/nightingale/writing-alt-text-for-data-visualization-2a218ef43f81"
  },
  {
    "objectID": "tils/til-lists-bind-rows-flatten-list-20250630.html",
    "href": "tils/til-lists-bind-rows-flatten-list-20250630.html",
    "title": "flatten a list of DFs into a single DF with bind_rows",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-bind-rows-flatten-list-20250630.html#includes",
    "href": "tils/til-lists-bind-rows-flatten-list-20250630.html#includes",
    "title": "flatten a list of DFs into a single DF with bind_rows",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lists-bind-rows-flatten-list-20250630.html#notes",
    "href": "tils/til-lists-bind-rows-flatten-list-20250630.html#notes",
    "title": "flatten a list of DFs into a single DF with bind_rows",
    "section": "Notes",
    "text": "Notes\n\nexample needs a folder with 2+ CSV files in it, with the same structure"
  },
  {
    "objectID": "tils/til-lists-bind-rows-flatten-list-20250630.html#example",
    "href": "tils/til-lists-bind-rows-flatten-list-20250630.html#example",
    "title": "flatten a list of DFs into a single DF with bind_rows",
    "section": "Example",
    "text": "Example\n\n# get list of files \ndiv_csvs_files &lt;- \n  list.files(here::here(\"data/csv/\"), pattern = \"*.csv\", full.names = T) \n \n# use map() to read_csv a folder of CSV files (makes a list) \ndivs_list &lt;- \n  map(div_csvs_files, read_csv)  \n \n# nb this can be a bit slow. check if there are more efficient methods? \nbind_rows(divs_list) \n\n# A tibble: 338 × 5\n   book         div_id  div_sort div_txt                               title_txt\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                                 &lt;chr&gt;    \n 1 atb-book-one div-002        1 Bishop Hall's 'Observations' in His … Bishop H…\n 2 atb-book-one div-003        2 A Prayer O most great and gracious G… A Prayer \n 3 atb-book-one div-004        3 The Dedication I'll dedicate my soul… The Dedi…\n 4 atb-book-one div-005        4 Alice Wandesford, the fifth child of… &lt;NA&gt;     \n 5 atb-book-one div-006        5 Proverbs The fear of the Lord is the… Proverbs \n 6 atb-book-one div-007        6 A Preface to the Book For as much as… A Prefac…\n 7 atb-book-one div-008        7 (Remember to put the relation of my … &lt;NA&gt;     \n 8 atb-book-one div-009        8 The first deliverance of that kind w… &lt;NA&gt;     \n 9 atb-book-one div-010        9 A Preservation in the Smallpox, 1631… A Preser…\n10 atb-book-one div-011       10 London, 1631. The First Dawning of G… London, …\n# ℹ 328 more rows"
  },
  {
    "objectID": "dv/resources.html",
    "href": "dv/resources.html",
    "title": "DV Resources",
    "section": "",
    "text": "(unsystematic; adding links as and when I find something or remember)"
  },
  {
    "objectID": "dv/resources.html#general-inspiration",
    "href": "dv/resources.html#general-inspiration",
    "title": "DV Resources",
    "section": "General inspiration",
    "text": "General inspiration\n\nFrom Data To Viz\nR Graph Gallery\nFundamentals of Data Visualization\nVizdex - list of dataviz blogs\nDataviz resources"
  },
  {
    "objectID": "dv/resources.html#charts-i-really-want-to-make",
    "href": "dv/resources.html#charts-i-really-want-to-make",
    "title": "DV Resources",
    "section": "Charts I really want to make",
    "text": "Charts I really want to make\n\nBraided ribbons"
  },
  {
    "objectID": "dv/resources.html#packages-and-tools",
    "href": "dv/resources.html#packages-and-tools",
    "title": "DV Resources",
    "section": "Packages and tools",
    "text": "Packages and tools\n\nggplot\n\ndocs\nextensions\n\nwaffle\nggbeeswarm\n\n(not tried yet)\n\nggcorrheatmap\nggplayfair"
  },
  {
    "objectID": "dv/resources.html#other-stuff",
    "href": "dv/resources.html#other-stuff",
    "title": "DV Resources",
    "section": "Other stuff",
    "text": "Other stuff"
  },
  {
    "objectID": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html",
    "href": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html",
    "title": "multiple labs() are allowed in a ggplot",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html#includes",
    "href": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html#includes",
    "title": "multiple labs() are allowed in a ggplot",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html#notes",
    "href": "dv/dv-til/til-nocode-ggplot-labs-repeat-20250630.html#notes",
    "title": "multiple labs() are allowed in a ggplot",
    "section": "Notes",
    "text": "Notes\n\nyou can even replace previously specified labels. might be handy for overriding function defaults?"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-scale-reverse-20250630.html",
    "href": "dv/dv-til/til-ggplot-scale-reverse-20250630.html",
    "title": "reverse numerical scales in ggplot",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#includes",
    "href": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#includes",
    "title": "reverse numerical scales in ggplot",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#notes",
    "href": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#notes",
    "title": "reverse numerical scales in ggplot",
    "section": "Notes",
    "text": "Notes\n\ndoes the same thing as mutate fct_rev before ggplot, but with a numerical col\n(could you also use it with a chr column? no, has to be num.)"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#example",
    "href": "dv/dv-til/til-ggplot-scale-reverse-20250630.html#example",
    "title": "reverse numerical scales in ggplot",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  count(topic) |&gt; \n  ggplot(aes(n, topic)) + \n  geom_col() + \n  scale_x_reverse() # yes very ridiculous \n\n\n\n\n\n\n\n  #scale_y_reverse() # chr data: nope."
  },
  {
    "objectID": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html",
    "href": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html",
    "title": "multiple scales in a ggplot with ggnewscale",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#includes",
    "href": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#includes",
    "title": "multiple scales in a ggplot with ggnewscale",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#notes",
    "href": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#notes",
    "title": "multiple scales in a ggplot with ggnewscale",
    "section": "Notes",
    "text": "Notes\n\npackage docs example as i haven’t thought up anything for this"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#example",
    "href": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#example",
    "title": "multiple scales in a ggplot with ggnewscale",
    "section": "Example",
    "text": "Example\n\nlibrary(ggnewscale) \n \n# Equivalent to melt(volcano), but we don't want to depend on reshape2 \ntopography &lt;- expand.grid(x = 1:nrow(volcano), \n                          y = 1:ncol(volcano)) \ntopography$z &lt;- c(volcano) \n \n# point measurements of something at a few locations \nmeasurements &lt;- data.frame(x = runif(30, 1, 80), \n                           y = runif(30, 1, 60), \n                           thing = rnorm(30)) \n \nggplot(mapping = aes(x, y)) + \n  geom_contour(data = topography, aes(z = z, color = after_stat(level))) + \n  # Color scale for topography \n  scale_color_viridis_c(option = \"D\") + \n  # geoms below will use another color scale \n  new_scale_color() + \n  geom_point(data = measurements, size = 3, aes(color = thing)) + \n  # Color scale applied to geoms added after new_scale_color() \n  scale_color_viridis_c(option = \"A\")"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#resources",
    "href": "dv/dv-til/til-ggplot-multiple-scales-ggnewscale-20250630.html#resources",
    "title": "multiple scales in a ggplot with ggnewscale",
    "section": "Resources",
    "text": "Resources\n\nhttps://eliocamp.github.io/ggnewscale/index.html"
  },
  {
    "objectID": "dv/dv-til/reorder-within.html",
    "href": "dv/dv-til/reorder-within.html",
    "title": "reordering faceted charts",
    "section": "",
    "text": "Sometimes you want to reorder by counts of values in ggplot faceted charts (small multiples). In a single chart you could easily do this with something like fct_reorder. But that won’t work with a faceted chart. The solution is the reorder_within functions in the tidytext package.\nFocus here on bar charts, but should work with any facet-able ggplot chart."
  },
  {
    "objectID": "dv/dv-til/reorder-within.html#notes",
    "href": "dv/dv-til/reorder-within.html#notes",
    "title": "reordering faceted charts",
    "section": "",
    "text": "Sometimes you want to reorder by counts of values in ggplot faceted charts (small multiples). In a single chart you could easily do this with something like fct_reorder. But that won’t work with a faceted chart. The solution is the reorder_within functions in the tidytext package.\nFocus here on bar charts, but should work with any facet-able ggplot chart."
  },
  {
    "objectID": "dv/dv-til/reorder-within.html#examples",
    "href": "dv/dv-til/reorder-within.html#examples",
    "title": "reordering faceted charts",
    "section": "Examples",
    "text": "Examples\nusing cheshire petitions\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(tidytext)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(mindseyedata)\n\n\n\na single chart for comparison\nThe ggplot default is alphabetical order. (For reasons best known to itself, in a horizontal bar chart it sorts descending Z-A, which always looks wrong to me… this can be fixed with fct_rev()).\n\ncheshire_petitions |&gt;\n  count(topic) |&gt;\n  mutate(topic = fct_rev(topic)) |&gt;\n  ggplot(aes(n, topic)) +\n  geom_col()\n\n\n\n\n\n\n\n\nbut often you’d prefer to order the chart by counts. This is easy with a single chart.\n\ncheshire_petitions |&gt;\n  count(topic) |&gt;\n  mutate(topic = fct_reorder(topic, n)) |&gt;\n  ggplot(aes(n, topic)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\nthe faceted chart\nOK, so I want to add an extra dimension and make a faceted chart. (NB fct_rev works fine.)\n\ncheshire_petitions |&gt;\n  count(topic, petition_gender) |&gt;\n  filter(petition_gender %in% c(\"f\", \"m\")) |&gt;\n  mutate(topic = fct_rev(topic)) |&gt;\n  ggplot(aes(n, topic)) +\n  geom_col() +\n  facet_wrap(~petition_gender, scales=\"free\")\n\n\n\n\n\n\n\n\nBut if I try to reorder with fct_reorder, weird things start to happen. The problem is that it sorts by the overall counts, not within each facet.\n\ncheshire_petitions |&gt;\n  count(topic, petition_gender) |&gt;\n  filter(petition_gender %in% c(\"f\", \"m\")) |&gt;\n  mutate(topic = fct_reorder(topic, n)) |&gt;\n  ggplot(aes(n, topic)) +\n  geom_col() +\n  facet_wrap(~petition_gender, scales=\"free\")\n\n\n\n\n\n\n\n\nSo instead, I need to use reorder_within() and scale_*_reordered()\nI always forget which order the variables should go in reorder_within; the faceting variable needs to go last.\n\ncheshire_petitions |&gt;\n  count(topic, petition_gender) |&gt;\n  filter(petition_gender %in% c(\"f\", \"m\")) |&gt;\n  mutate(topic = reorder_within(topic, n, petition_gender)) |&gt;\n  ggplot(aes(n, topic)) +\n  geom_col() +\n  scale_y_reordered() +\n  facet_wrap(~petition_gender, scales=\"free\")\n\n\n\n\n\n\n\n\nIt’s possible to reorder_within multiple variables: check the docuemntation."
  },
  {
    "objectID": "dv/dv-til/reorder-within.html#resources",
    "href": "dv/dv-til/reorder-within.html#resources",
    "title": "reordering faceted charts",
    "section": "Resources",
    "text": "Resources\n\ndocumentation\nReordering and facetting for ggplot2\nOrdering categories within ggplot2 facets"
  },
  {
    "objectID": "dv/ridgeline.html",
    "href": "dv/ridgeline.html",
    "title": "Ridgeline plots",
    "section": "",
    "text": "ggridges\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggridges)\n\nlibrary(mindseyedata)\nlibrary(historydata)\n\n\ninquests &lt;-\ncoroners |&gt;\n  select(rowid, doc_year, doc_month, parish, gender, verdict) |&gt;\n  filter(verdict!=\"undetermined\")\n\n\n\ncheshire_petitions |&gt;\n  # filter out small topics and keep only 17th century\n  filter(n()&gt;20, .by = topic) |&gt;\n  filter(between(year, 1600, 1700)) |&gt;\n  # reverse topics order because ggplot is annoying\n  mutate(topic = fct_rev(topic)) |&gt;\n  # not sure if height makes any difference at all\n  ggplot(aes(x=year, y=topic, group=topic, fill=topic, height=after_stat(density))) + \n  # stat=binline for squared effect\n  geom_density_ridges(stat = \"binline\", bins = 10, scale = 0.95, \n                      draw_baseline = FALSE, show.legend = FALSE) +\n  # `expand` option for both axes to remove unneeded padding \n  scale_y_discrete(expand = c(0, 0)) +     \n  scale_x_continuous(expand = c(0, 0), breaks = seq(1600, 1700, 10) ) +  \n  scale_fill_tableau(direction = -1) +\n  #clip = \"off\" to avoid clipping of the very top of the top ridgeline\n  coord_cartesian(clip = \"off\") +  \n  theme_ridges(font_size=12) +\n  theme(axis.text.y = element_text(vjust = 0), legend.position = \"none\", \n        panel.grid.minor.x=element_blank(),\n        panel.grid.major.x=element_blank()\n        ) +\n  labs(y=NULL, x=\"decade\", title = \"Petition topics 1608-1698\")\n\n\n\n\n\n\n\n\n\ninquests |&gt;\n  mutate(verdict = fct_rev(verdict)) |&gt;\n  ggplot(aes(x=doc_year, y=verdict, group=verdict, fill=verdict, height = after_stat(density))) +   \n  geom_density_ridges(stat = \"binline\", bins = 9, scale = 0.95, \n                      draw_baseline = FALSE, show.legend = FALSE) +\n  # `expand` option for both axes to remove unneeded padding \n  scale_y_discrete(expand = c(0, 0)) +     \n  scale_x_continuous(expand = c(0, 0), breaks = seq(1760, 1800, 5) ) +  \n  scale_fill_tableau(direction = -1) +\n  #clip = \"off\" to avoid clipping of the very top of the top ridgeline\n  coord_cartesian(clip = \"off\") +  \n  theme_ridges(font_size=12) +\n  theme(axis.text.y = element_text(vjust = 0), legend.position = \"none\", \n        panel.grid.minor.x=element_blank(),\n        panel.grid.major.x=element_blank()\n        ) +\n  labs(y=NULL, x=\"year\", title = \"Inquest verdicts 1760-1799\")\n\n\n\n\n\n\n\n\nmonths instead of time series\n\ninquests |&gt;\n  mutate(verdict = fct_rev(verdict)) |&gt;\n  ggplot(aes(x=doc_month, y=verdict, group=verdict, fill=verdict, height = after_stat(density))) +   \n  geom_density_ridges(stat = \"binline\", bins = 12, scale = 0.95, \n                      draw_baseline = FALSE, show.legend = FALSE) +\n  # `expand` option for both axes to remove unneeded padding \n  scale_y_discrete(expand = c(0, 0)) +     \n  #scale_x_continuous(expand = c(0, 0), breaks = seq(1760, 1800, 5) ) +  \n  scale_fill_tableau(direction = -1) +\n  #clip = \"off\" to avoid clipping of the very top of the top ridgeline\n  coord_cartesian(clip = \"off\") +  \n  theme_ridges(font_size=12) +\n  theme(axis.text.y = element_text(vjust = 0), legend.position = \"none\", \n        panel.grid.minor.x=element_blank(),\n        panel.grid.major.x=element_blank()\n        ) +\n  labs(y=NULL, x=\"month\", title = \"Inquest verdicts by month\")\n\n\n\n\n\n\n\n\nThis ridgeline shows a smoothed trend line, but adds the actual distribution of dates as points, more like a beeswarm.\n\ninquests |&gt;\n  mutate(verdict = fct_rev(verdict)) |&gt;\n  ggplot(aes(x=doc_year, y=verdict, group=verdict, fill=verdict, height=after_stat(density))) +   \n  geom_density_ridges(jittered_points = TRUE, position = \"points_sina\", \n                      scale = 0.95, alpha=0.6, point_size=.5, bandwidth=4) +\n  # `expand` option for both axes to remove unneeded padding \n  scale_y_discrete(expand = c(0, 0)) +     \n  scale_x_continuous(expand = c(0, 0), breaks = seq(1760, 1800, 5) ) +  \n  scale_fill_tableau(direction = -1) +\n  #clip = \"off\" to avoid clipping of the very top of the top ridgeline\n  coord_cartesian(clip = \"off\") +  \n  theme_ridges(font_size=12) +\n  theme(axis.text.y = element_text(vjust = 0), legend.position = \"none\", \n        panel.grid.minor.x=element_blank(),\n        panel.grid.major.x=element_blank()\n        ) +\n  labs(y=NULL, x=\"decade\", title = \"Inquest verdicts 1760-1799\")"
  },
  {
    "objectID": "dv/beeswarm.html",
    "href": "dv/beeswarm.html",
    "title": "Beeswarms",
    "section": "",
    "text": "ggbeeswarm package\nsee BN ppa post for a variety of beeswarms!\nso far I think only used this with at least one numerical variable (eg dates, ages, heights would probably work too); could experiment with categorical though?\nusing coroners data\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggbeeswarm)\n\nlibrary(mindseyedata)\n\n\ninquests &lt;-\ncoroners |&gt;\n  select(rowid, doc_year, doc_month, parish, gender, verdict) |&gt;\n  filter(verdict!=\"undetermined\")\n\n\ni can’t remember what cex does exactly, but it seems to narrow things slightly if a lot of points?\ncan also use corral/corral.width\n\ninquests |&gt;\n  arrange(doc_year, verdict) |&gt;\n  ggplot(aes(y=doc_year, x=verdict)) +\n  geom_beeswarm(size=0.4, cex = 0.8) +\n  scale_y_reverse()\n\n\n\n\n\n\n\n\ntry different methods\n\ninquests |&gt;\n  arrange(doc_year, verdict) |&gt;\n  ggplot(aes(y=doc_year, x=verdict)) +\n  geom_beeswarm(size=0.5, method = \"hex\", cex=0.8) +\n  scale_y_reverse()\n\n\n\n\n\n\n\n\nfilter male only for a closer look\n\ninquests |&gt;\n  filter(gender==\"male\") |&gt;\n  arrange(doc_year, verdict) |&gt;\n  ggplot(aes(y=doc_year, x=verdict)) +\n  geom_beeswarm(size=0.5, method = \"swarm\", cex = 0.9) +\n  scale_y_reverse()\n\n\n\n\n\n\n\n\nfilter to one verdict type and use gender as variable\n\ninquests |&gt;\n  filter(verdict==\"accidental\") |&gt;\n  arrange(doc_year, gender) |&gt;\n  ggplot(aes(y=doc_year, x=gender)) +\n  geom_beeswarm(size=0.6, method = \"swarm\") +\n  scale_y_reverse()\n\n\n\n\n\n\n\n\nwith faceting.\ndivide months into four seasons. don’t think this is very illuminating but you get the drift.\n\ninquests |&gt;\n  mutate(season = case_match(\n    doc_month,\n    c(\"Jan\", \"Feb\", \"Dec\") ~ \"winter\",\n    c(\"Apr\", \"May\", \"Mar\") ~ \"spring\",\n    c(\"Jun\", \"Jul\", \"Aug\") ~ \"summer\",\n    c(\"Sep\", \"Oct\", \"Nov\") ~ \"autumn\"\n  )) |&gt;\n  ggplot(aes(y=doc_year, x=verdict, colour=verdict)) +\n  ggbeeswarm::geom_beeswarm(size=0.2,  method = \"swarm\") + #, cex=0.8\n  scale_y_reverse() +\n  scale_colour_ptol() +\n  facet_wrap(~season) +\n  guides(colour = guide_legend(override.aes = list(size=2))) +\n  theme(legend.position = \"bottom\") +\n  theme(axis.text.x = element_blank()) +\n  labs(y=NULL, x=NULL, colour=NULL)\n\n\n\n\n\n\n\n\n\ninquests |&gt;\n  mutate(season = case_match(\n    doc_month,\n    c(\"Jan\", \"Feb\", \"Dec\") ~ \"winter\",\n    c(\"Apr\", \"May\", \"Mar\") ~ \"spring\",\n    c(\"Jun\", \"Jul\", \"Aug\") ~ \"summer\",\n    c(\"Sep\", \"Oct\", \"Nov\") ~ \"autumn\"\n  )) |&gt;\n  ggplot(aes(y=doc_year, x=season, colour=season)) +\n  ggbeeswarm::geom_beeswarm(size=0.2,  method = \"swarm\") + #, cex=0.8\n  scale_y_reverse() +\n  scale_colour_colorblind() +\n  facet_wrap(~verdict) +\n  guides(colour = guide_legend(override.aes = list(size=2))) +\n  theme(legend.position = \"bottom\") +\n  theme(axis.text.x = element_blank()) +\n  labs(y=NULL, x=NULL, colour=NULL)\n\n\n\n\n\n\n\n\nwhat if you use a different chart option? the package also has geom_quasirandom (which has a number of method options)\n\ninquests |&gt;\n  arrange(doc_year, verdict) |&gt;\n  ggplot(aes(y=doc_year, x=verdict)) +\n  geom_quasirandom(size=0.5) +\n  scale_y_reverse()\n\n\n\n\n\n\n\n\nthat’s interesting!\n\ninquests |&gt;\n  arrange(doc_year, verdict) |&gt;\n  ggplot(aes(y=doc_year, x=verdict)) +\n  geom_quasirandom(size=0.5, method = \"tukey\") +\n  scale_y_reverse()"
  },
  {
    "objectID": "dv/waffle.html",
    "href": "dv/waffle.html",
    "title": "Waffle charts",
    "section": "",
    "text": "Waffle charts (aka “square pie charts”) represent categorical data via a grid of small squares forming a larger square or rectangle, which resembles a waffle.\n\n\n\nvisually pleasing alternative to pie charts or stacked bar charts for showing how parts relate to the whole\ncan be used for either amounts or proportions\neasier to see/compare smaller amounts or percentages than with a stacked bar\n\n\n\n\n\nmaybe less good for showing fine differences in proportional version (all % are rounded to whole number)\n\n\n\n\n\n“parliament charts” in various shapes"
  },
  {
    "objectID": "dv/waffle.html#notes",
    "href": "dv/waffle.html#notes",
    "title": "Waffle charts",
    "section": "",
    "text": "Waffle charts (aka “square pie charts”) represent categorical data via a grid of small squares forming a larger square or rectangle, which resembles a waffle.\n\n\n\nvisually pleasing alternative to pie charts or stacked bar charts for showing how parts relate to the whole\ncan be used for either amounts or proportions\neasier to see/compare smaller amounts or percentages than with a stacked bar\n\n\n\n\n\nmaybe less good for showing fine differences in proportional version (all % are rounded to whole number)\n\n\n\n\n\n“parliament charts” in various shapes"
  },
  {
    "objectID": "dv/waffle.html#examples",
    "href": "dv/waffle.html#examples",
    "title": "Waffle charts",
    "section": "Examples",
    "text": "Examples\nUsing cheshire_petitions in mindseyedata and Apprenticeship Disputes in the Lord Mayor’s Court of London 1573-1723\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(readxl)\nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(waffle)\n\nlibrary(mindseyedata)\n\napprentices_xlsx &lt;-\n  read_excel(here::here(\"data/apprenticeship_disputes.xlsx\"), \n             sheet = \"Main index\") |&gt;\n  clean_names(\"snake\") \n\napprentices &lt;-\n  apprentices_xlsx |&gt;\n  rename(year_binding=x21, year_petition=x27) |&gt;\n  # minor cleaning, some inconsistencies in data\n  mutate(across(\n    c(year_binding, year_petition, result_of_the_proceedings, reason_for_the_petition), \n                ~str_remove_all(., \"x|z\"))) |&gt;\n  mutate(across(\n    c(year_binding, year_petition, result_of_the_proceedings, reason_for_the_petition), \n                ~na_if(., \"\"))) |&gt;\n  \n  mutate(result_of_the_proceedings = str_to_upper(result_of_the_proceedings)) |&gt;\n  mutate(reason_for_the_petition = case_when(\n    reason_for_the_petition %in% c(\"e\", \"p\") ~ str_to_upper(reason_for_the_petition),\n    .default = reason_for_the_petition\n  )) |&gt;\n  mutate(across(c(year_binding, year_petition), parse_number))  |&gt;\n  mutate(reason = if_else(str_detect(reason_for_the_petition, \"^U\"), \n                          \"U\", \n                          reason_for_the_petition )) |&gt;\n  mutate(reason = case_match(\n    reason,\n    \"B\" ~ \"Not bound correctly\",\n    \"C\" ~ \"Unreasonable chastisement\",\n    \"E\" ~ \"Non-enrollment\",\n    \"F\" ~ \"Master a foreigner\",\n    \"I\" ~ \"Instruction not provided\",\n    \"N\" ~ \"Necessaries not provided\",\n    \"P\" ~ \"Expelled from service\",\n    \"S\" ~ \"Not in business in the city\", \n    \"U\" ~ \"Bound under the age of 14\"\n  ))  |&gt;\n  mutate(result = case_match(\n    result_of_the_proceedings,\n    \"A\" ~ \"agreement reached\",\n    \"D\" ~ \"apprentice discharged\",\n    \"N\" ~ \"no decision\",\n    \"W\" ~ \"jury decides for defendant\"\n  )) |&gt;\n  # remove 2 and 3 digit year of binding which are probably errors\n  mutate(year_binding=if_else(year_binding&lt;1500, NA, year_binding)) |&gt;\n  mutate(p_petition = case_when(\n    is.na(year_petition) ~ NA,\n    year_petition&lt;1650 ~ \"1569-1649\",\n    year_petition&lt;1675 ~ \"1650-1674\",\n    year_petition&lt;1700 ~ \"1675-1699\",\n    .default = \"1700-1722\"\n  )) |&gt;\n  mutate(p_binding = case_when(\n    is.na(year_binding) ~ NA,\n    year_binding&lt;1650 ~ \"1573-1649\",\n    year_binding&lt;1675 ~ \"1650-1674\",\n    year_binding&lt;1700 ~ \"1675-1699\",\n    .default = \"1700-1723\"\n  )) |&gt;\n  mutate(apprentice_years = if_else(\n    str_detect(number_of_years_of_the_apprenticeship, \"[0-9]\"), \n    number_of_years_of_the_apprenticeship,\n    \"\")) |&gt;\n  mutate(apprentice_years = parse_number(apprentice_years))  |&gt;\n  select(id, number_of_petition, p_binding, p_petition, reason, result, apprentice_years)  \n\n\ncheshire_petitions &lt;-\n  cheshire_petitions |&gt;\n  select(petition_id, year, topic, petition_type, petition_gender, \n         response, petitioner, reference) |&gt;\n  mutate(petition_type = str_remove(petition_type, \" *on behalf\")) \n\n\n\nwaffle package\nA popular and easy to use ggplot-based package is waffle, by Bob Rudis.\nFor comparison though, let’s start with a quick look at two more familiar types of chart that waffle charts are often used to replace, the stacked bar chart and pie chart (which is essentially a bar chart turned into a circle).\nThere is a difficulty with the apprentices data: one category (non-enrollment) is much larger than all the rest put together, which is not an uncommon experience with history data.\n\napprentices |&gt;\n  count(reason) |&gt;\n  # remove a few very small categories and NAs\n  filter(n&gt;100) |&gt;\n  ggplot(aes(\"\", n, fill=reason)) +\n  geom_col(position = \"fill\") +\n  scale_fill_ptol() +\n  scale_y_continuous(labels = percent_format()) +\n  labs(fill=\"complaint\", y=\"% of cases\", x=NULL, \n       title = \"Apprentices' complaints\")\n\n\n\n\n\n\n\n\nThe pie chart is prettier but has the same problem; adding percentage labels to the pie helps. I’d generally only use pie charts for a smaller number of categories. (Based on code here.)\n\napprentices |&gt;\n  count(reason) |&gt;\n  filter(n&gt;100) |&gt;\n  mutate(prop = round(n / sum(n)*100),1) |&gt;\n  mutate(prop_label = paste0(prop, \"%\")) |&gt;\n  ggplot(aes(x=\"\", y=prop, fill=reason)) +\n  geom_col(width = 1, color=\"white\") +\n  geom_text(aes(label = prop_label), position = position_stack(vjust=0.5), \n            color = \"white\", size=3) +\n  coord_polar(\"y\", start=0) +\n  scale_fill_ptol() +\n  theme_void()  +\n  labs(title=\"Apprentices' complaints\", fill=\"complaint\")  \n\n\n\n\n\n\n\n\ncaveat: categories can get broken up over multiple rows, which might be less readable? Very tiny categories (less than 1%) are omitted.\n\napprentices |&gt;\n  count(reason) |&gt;\n  filter(n&gt;100) |&gt; \n  ggplot(aes(fill=reason, values=n)) +\n  geom_waffle(colour=\"white\", n_rows = 10, make_proportional = TRUE) +\n  coord_equal() +\n  scale_fill_ptol() +\n  theme_enhance_waffle() +\n  labs(title = \"Apprentices' complaints\", caption = \"1 square=1% of cases\", \n       fill=\"complaint\")\n\n\n\n\n\n\n\n\na non-proportional waffle chart, with one square per case for the top 6 topics of Cheshire TPOP petitions.\n\ncheshire_petitions  |&gt;\n  count(topic) |&gt;\n  filter(n&gt;25) |&gt; \n  ggplot(aes(fill=topic, values=n)) +\n  geom_waffle(colour=\"white\", n_rows = 20) +\n  coord_equal() +\n  scale_fill_colorblind() +\n  theme_enhance_waffle() +\n  theme(axis.ticks = element_blank()) +\n  labs(caption = \"1 square=1 petition\")\n\n\n\n\n\n\n\n\n\n\nadd another dimension\nAs the waffles are based on {ggplot}, it’s straightforward to incorporate faceting (aka small multiples or trellis charts) to add another variable to make comparisons.\nHere, the apprentices data is split up into four time periods.\n\napprentices |&gt;\n  filter(!is.na(p_petition)) |&gt;\n  add_count(reason) |&gt;\n  filter(n&gt;100) |&gt; \n  count(p_petition, reason, name=\"nn\") |&gt;\n  ggplot(aes(fill=reason, values=nn)) +\n  geom_waffle(colour=\"white\", n_rows = 10, make_proportional = TRUE) +\n  coord_equal() +\n  facet_wrap(~p_petition) +\n  scale_fill_ptol() +\n  theme_enhance_waffle() +\n    theme(axis.ticks = element_blank()) +\n  labs(caption = \"1 square=1% of cases\")  \n\n\n\n\n\n\n\n\nBreakdown of Cheshire petitions by topic and petitioner type (“collective” petitions are from groups like “the inhabitants of Runcorn” rather than named individuals).\n\ncheshire_petitions |&gt;\n  add_count(topic, name=\"n_topic\") |&gt;\n  filter(n_topic&gt;25) |&gt; \n  count(petition_type, topic, n_topic) |&gt;\n  ggplot(aes(fill=petition_type, values=n)) +\n  geom_waffle(colour=\"white\", n_rows = 10, make_proportional = TRUE) +\n  coord_equal() +\n  facet_wrap(~topic) +\n  scale_fill_colorblind() +\n  theme_enhance_waffle() +\n  theme(axis.ticks = element_blank()) +\n  labs(caption = \"1 square=1% of petitions\", fill=\"petitioner\\ntype\")\n\n\n\n\n\n\n\n\n\n\nparliament charts\na semi-circular version of a waffle chart used to visualise party representation in legislatures. R package for making these (and other shapes), ggparliament.\nThis one’s the Australian House of Representatives in 2010.\n\nlibrary(ggparliament)\naus_rep &lt;-\nelection_data |&gt; \n  filter(country==\"Australia\" & house==\"Representatives\" & year==2010)\n\naus_house &lt;- parliament_data(election_data = aus_rep,\n                                       type = \"horseshoe\",\n                                       parl_rows = 4,\n                                       party_seats = aus_rep$seats)\n\naus_house |&gt;\n    ggplot(aes(x = x, y = y, colour = party_short)) +\n    geom_parliament_seats() + \n    theme_ggparliament() +\n    labs(colour = NULL, \n         title = \"Australian Parliament 2010\") +\n    scale_colour_manual(values = aus_house$colour, \n                        limits = aus_house$party_short)"
  },
  {
    "objectID": "dv/waffle.html#resources",
    "href": "dv/waffle.html#resources",
    "title": "Waffle charts",
    "section": "Resources",
    "text": "Resources\n\nR Graph Gallery\n\nR packages:\n\nB Rudis (2023). waffle. R package version 1.0.2. https://github.com/hrbrmstr/waffle\nR Hickman, Z Meers, T Leeper (2024). ggparliament: Parliament Plots. R package version 3.1.6. https://github.com/zmeers/ggparliament"
  },
  {
    "objectID": "dv/residuals-scatterplots.html",
    "href": "dv/residuals-scatterplots.html",
    "title": "Visualising residuals with scatterplots",
    "section": "",
    "text": "I’ve seen this type of scatterplot used to visualise residuals; came across a tutorial for making them.\nIt’s also a bit of practice for statistical modelling using lm().\nUsing Playfair’s Data on Wages and the Price of Wheat from the HistData package. (lm() might not be the best model for this…)\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(patchwork)\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(mindseyedata)\nlibrary(HistData)\n\n\nplayfair_wheat &lt;-\nWheat |&gt;\n  clean_names(\"snake\") |&gt;\n  filter(if_all(everything(), ~ !is.na(.x)))"
  },
  {
    "objectID": "dv/residuals-scatterplots.html#notes",
    "href": "dv/residuals-scatterplots.html#notes",
    "title": "Visualising residuals with scatterplots",
    "section": "",
    "text": "I’ve seen this type of scatterplot used to visualise residuals; came across a tutorial for making them.\nIt’s also a bit of practice for statistical modelling using lm().\nUsing Playfair’s Data on Wages and the Price of Wheat from the HistData package. (lm() might not be the best model for this…)\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(patchwork)\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(mindseyedata)\nlibrary(HistData)\n\n\nplayfair_wheat &lt;-\nWheat |&gt;\n  clean_names(\"snake\") |&gt;\n  filter(if_all(everything(), ~ !is.na(.x)))"
  },
  {
    "objectID": "dv/residuals-scatterplots.html#examples",
    "href": "dv/residuals-scatterplots.html#examples",
    "title": "Visualising residuals with scatterplots",
    "section": "Examples",
    "text": "Examples\nThe data (after dropping a few NAs).\n\nhead(playfair_wheat)\n\n  year wheat wages\n1 1565  41.0  5.00\n2 1570  45.0  5.05\n3 1575  42.0  5.08\n4 1580  49.0  5.12\n5 1585  41.5  5.15\n6 1590  47.0  5.25\n\n\nWhat does a simple scatterplot look like?\n\nplayfair_wheat |&gt;\n  ggplot(aes(wages, wheat)) +\n  geom_point()\n\n\n\n\n\n\n\n\nSteps to make the residuals plot:\n\nFit a regression model to predict variable (Y).\nObtain the predicted and residual values associated with each observation on (Y).\nPlot the actual and predicted values of (Y) so that they are distinguishable, but connected.\nUse the residuals to make an aesthetic adjustment to highlight points which are poorly predicted by the model.\n\nI’ll treat wheat prices as the response variable (could easily be the other way round with this data).\n\n# Fit the model\nfit_wheat &lt;- lm(wheat ~ wages, data = playfair_wheat)  \n# lm(outcome/response_variable [y] ~ predictor/explanatory_variable [x], data=df)\n\nfit_wheat\n\n\nCall:\nlm(formula = wheat ~ wages, data = playfair_wheat)\n\nCoefficients:\n(Intercept)        wages  \n     28.505        1.177  \n\n\nadd predicted and residuals to the original data\n\nwheat_fitted &lt;-\nplayfair_wheat |&gt;\n  mutate(predicted = predict(fit_wheat), residuals = residuals(fit_wheat))\n\nhead(wheat_fitted)\n\n  year wheat wages predicted residuals\n1 1565  41.0  5.00  34.39133  6.608674\n2 1570  45.0  5.05  34.45019 10.549808\n3 1575  42.0  5.08  34.48551  7.514488\n4 1580  49.0  5.12  34.53260 14.467395\n5 1585  41.5  5.15  34.56792  6.932075\n6 1590  47.0  5.25  34.68566 12.314343\n\n\nMaking and adjusting the scatterplot to highlight the residuals:\n\nplot the actual data\nplot the predicted values so they’re distinguishable from the actual values\nconnect the actual data points with their corresponding predicted value\naesthetic adjustments, eg\n\n\nfade out connection lines with alpha\nadd best fit line with geom_smooth()\n\n\nfinal adjustments to highlight the size of the residual.\n\nAn example at step 4:\n\nwheat_fitted |&gt;\n  # set up with outcome variable on y-axis\nggplot(aes(x = wages, y = wheat)) +  \n  # (3) connect actual and predicted; (4) use alpha to fade lines\n  geom_segment(aes(xend = wages, yend = predicted), alpha = .2) +  \n  # (1) plot the actual points\n  geom_point() + \n  # (2) add the predicted values as open circles.\n  geom_point(aes(y = predicted), shape=1) + \n  # (4) add the regression line\n  geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") \n\n\n\n\n\n\n\n\nStep 5 options include\n\nchange alpha, colour, size of actual values based on absolute value of residuals\nchange colour according to whether difference is plus or minus and/or by how much.\n\n(the example colours are terrible though)\n\nwheat_fitted |&gt;\nggplot(aes(x = wages, y = wheat)) + \n  geom_segment(aes(xend = wages, yend = predicted), alpha = .2) + \n  geom_point(aes(colour=residuals, size=abs(residuals)), show.legend = F) + \n  geom_point(aes(y = predicted), shape = 1) + \n  geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") + \n  scale_color_gradient2(low = \"blue\", mid = \"white\", high = \"red\")  \n\n\n\n\n\n\n\n\nThe tutorial also shows how to do faceted versions to compare regressions on multiple variables if you have more than two. I’ll need different data for that!\nNB that geom_smooth doesn’t think lm is actually the optimal model for this data…\n\nwheat_fitted |&gt;\n  ggplot(aes(wages, wheat)) +\n  geom_point() +\n  geom_smooth(se=FALSE)"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html",
    "href": "notes/note-words-to-numbers-20250729.html",
    "title": "function to convert words to numbers",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html#includes",
    "href": "notes/note-words-to-numbers-20250729.html#includes",
    "title": "function to convert words to numbers",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html#notes",
    "href": "notes/note-words-to-numbers-20250729.html#notes",
    "title": "function to convert words to numbers",
    "section": "Notes",
    "text": "Notes\n\nfunction found on RStudio/Posit community forum by @nutterb\nhttps://forum.posit.co/t/convert-written-numbers-to-integers/10302/2\nhis comments are the bit where I maybe learned something not just C&Ping a function…\n\n\nConsider that numbers repeat themselves cyclically over the the range of 1 to 9, we really only need to know how to translate the text ranging from “one” to “ninety nine”. Anything larger is just a matter of adding a scalar to the translation. For example:\n\n\n55 = 50 + 5\n155 = (1 * 100) + 50 + 5\n1155 = (1 * 1000) + (1 * 100) + 50 + 5\n155,155 = (100 + 50 + 5) * 1000 + (100 + 50 + 5)\n\n\nThe code below seems to behave reasonably well for translating text numbers to their numeric representations and is configured to work up to the quadrilions. By adding magnitudes to magnitude_reference, it could be extended further. But I suspect it will lose precision somewhere along the order of 4.5 quadrillion.\n\nBut don’t use the code in the forum post (it doesn’t work in a mutate) - use the github version below instead.\n\nadded a fully vectorized version of this to my playground package at https://github.com/nutterb/Bluegrass/blob/devel-main/R/word_to_number.R\n\nWhat about going the other way?\n\nxfun::numbers_to_words"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html#function",
    "href": "notes/note-words-to-numbers-20250729.html#function",
    "title": "function to convert words to numbers",
    "section": "Function",
    "text": "Function\n\nword_to_number &lt;- function(x){\n  # Remove punctuation and 'and'\n  x &lt;- tolower(gsub(\"([[:punct:]]| and )\", \" \", x))\n  # separate into distinct words\n  x &lt;- strsplit(x, \"\\\\s+\")\n  x &lt;- lapply(X = x,\n              FUN = trimws)\n  \n  coll &lt;- checkmate::makeAssertCollection()\n  \n  # verify that all words are found in the reference vectors.\n  bad_text_in_x &lt;- \n    vapply(X = x,\n           FUN = function(k) (!all(k %in% names(c(word_to_number_reference, magnitude_reference)))),\n           FUN.VALUE = logical(1))\n  \n  if (any(bad_text_in_x))\n    coll$push(\"Text found that is not compatible with conversion. Check your spelling?\")\n  \n  checkmate::reportAssertions(coll)\n  \n  num &lt;- vapply(X = x,\n                FUN = word_to_number_single,\n                FUN.VALUE = numeric(1))\n\n  if (any(is.na(num)))  \n    warning(sprintf(\"Unable to translate '%s'\", \n                    paste0(x[is.na(num)], collapse = ', ')))\n  \n  num\n}\n\n# UNEXPORTED --------------------------------------------------------\n\nword_to_number_single &lt;- function(x){\n  # translate words to the numeric reference\n  num &lt;- c(word_to_number_reference, magnitude_reference)[x]\n  \n  # Identify positions with a magnitude indicator\n  magnitude_at &lt;- \n    which(names(num) %in% \n            c(\"quadrillion\", \"trillion\", \"billion\",\n              \"million\", \"thousand\"))\n  \n  # Create an indexing vector for each magnitude class of the number\n  magnitude_index &lt;- \n    cut(seq_along(num), \n        breaks = unique(c(0, magnitude_at, length(num))))\n  \n  # Make a list with each magnitude\n  num_component &lt;- \n    lapply(unique(magnitude_index),\n           FUN = function(i) num[magnitude_index == i])\n  \n  # Transate each component\n  num_component &lt;- \n    vapply(num_component,\n           FUN = word_to_number_translate_hundred,\n           FUN.VALUE = numeric(1))\n  \n  # Add the components together\n  sum(num_component)\n}\n\n# ROUTINE TO TRANSLATE HUNDREDS\n\nword_to_number_translate_hundred &lt;- function(n){\n  # set a magnitude multiplier for thousands and greater\n  if (tail(names(n), 1) %in% names(magnitude_reference)){\n    magnitude &lt;- tail(n, 1)\n    n &lt;- head(n, -1)\n  } else {\n    magnitude &lt;- 1\n  }\n  \n  # if hundred appears anywhere but the second position or of the\n  # value preceding hundred is greater than 9, handle with care\n  # (for instance, 1200)\n  if ( (\"hundred\" %in% names(n) && which(names(n) == \"hundred\") != 2) ||\n       (\"hundred\" %in% names(n) && n[1] &gt; 1) )\n  {\n    which_hundred &lt;- which(names(n) == \"hundred\")\n    (sum(n[seq_along(n) &lt; which_hundred]) * 100 + \n        sum(n[seq_along(n) &gt; which_hundred])) * magnitude\n  } else {\n    op &lt;- rep(\"+\", length(n) - 1)\n    op[names(n)[-1] == \"hundred\"] &lt;- \"*\"\n    op &lt;- c(op, \"\")\n    eval(parse(text = paste(paste(n, op), collapse = \" \"))) * magnitude\n  }\n}\n\n# CORE REFERENCE NUMBERS\n\nword_to_number_reference &lt;- \n  c(\"zero\" = 0,\n    \"one\" = 1,\n    \"two\" = 2,\n    \"three\" = 3,\n    \"four\" = 4,\n    \"five\" = 5,\n    \"six\" = 6,\n    \"seven\" = 7,\n    \"eight\" = 8,\n    \"nine\" = 9,\n    \"ten\" = 10,\n    \"eleven\" = 11,\n    \"twelve\" = 12,\n    \"thirteen\" = 13,\n    \"fourteen\" = 14,\n    \"fifteen\" = 15,\n    \"sixteen\" = 16,\n    \"seventeen\" = 17,\n    \"eighteen\" = 18,\n    \"nineteen\" = 19,\n    \"twenty\" = 20,\n    \"thirty\" = 30,\n    \"forty\" = 40,\n    \"fifty\" = 50,\n    \"sixty\" = 60,\n    \"seventy\" = 70,\n    \"eighty\" = 80,\n    \"ninety\" = 90,\n    \"hundred\" = 100)\n\n# MAGNITUDE REFERENCE NUMBERS\n\nmagnitude_reference &lt;- \n  c(\"thousand\" = 1000,\n    \"million\" =  1e6,\n    \"billion\" =  1e9,\n    \"trillion\" = 1e12,\n    \"quadrillion\" = 1e15)"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html#examples",
    "href": "notes/note-words-to-numbers-20250729.html#examples",
    "title": "function to convert words to numbers",
    "section": "Examples",
    "text": "Examples\nwords to numbers\n\nword_to_number(\"six hundred and fifty-three\")\n\n[1] 653\n\nword_to_number(\"seventy-four thousand, eight hundred and twenty-nine\")\n\n[1] 74829\n\n\nnumbers to words\n\nxfun::numbers_to_words(25374, and = TRUE)\n\n[1] \"twenty-five thousand, three hundred and seventy-four\"\n\n\nin a dataframe with mutate\n(I do have data somewhere with words, but let’s just make it up for this)\n\npetitions_year_word &lt;-\ncheshire_petitions |&gt;\n  slice_sample(n=10) |&gt;\n  select(year) |&gt;\n  mutate(year_word = xfun::numbers_to_words(year, and = TRUE))\n\npetitions_year_word\n\n# A tibble: 10 × 2\n    year year_word                                \n   &lt;dbl&gt; &lt;chr&gt;                                    \n 1  1618 one thousand, six hundred and eighteen   \n 2  1658 one thousand, six hundred and fifty-eight\n 3  1618 one thousand, six hundred and eighteen   \n 4  1648 one thousand, six hundred and forty-eight\n 5  1658 one thousand, six hundred and fifty-eight\n 6  1648 one thousand, six hundred and forty-eight\n 7  1658 one thousand, six hundred and fifty-eight\n 8  1668 one thousand, six hundred and sixty-eight\n 9  1608 one thousand, six hundred and eight      \n10  1618 one thousand, six hundred and eighteen   \n\n\n\npetitions_year_word |&gt;\n  mutate(year_num = word_to_number(year_word))\n\n# A tibble: 10 × 3\n    year year_word                                 year_num\n   &lt;dbl&gt; &lt;chr&gt;                                        &lt;dbl&gt;\n 1  1618 one thousand, six hundred and eighteen        1618\n 2  1658 one thousand, six hundred and fifty-eight     1658\n 3  1618 one thousand, six hundred and eighteen        1618\n 4  1648 one thousand, six hundred and forty-eight     1648\n 5  1658 one thousand, six hundred and fifty-eight     1658\n 6  1648 one thousand, six hundred and forty-eight     1648\n 7  1658 one thousand, six hundred and fifty-eight     1658\n 8  1668 one thousand, six hundred and sixty-eight     1668\n 9  1608 one thousand, six hundred and eight           1608\n10  1618 one thousand, six hundred and eighteen        1618"
  },
  {
    "objectID": "notes/note-words-to-numbers-20250729.html#resources",
    "href": "notes/note-words-to-numbers-20250729.html#resources",
    "title": "function to convert words to numbers",
    "section": "Resources",
    "text": "Resources\n\nforum post\nword_to_number.R"
  },
  {
    "objectID": "notes/note-automate-count-20251006.html",
    "href": "notes/note-automate-count-20251006.html",
    "title": "automate counts",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-automate-count-20251006.html#includes",
    "href": "notes/note-automate-count-20251006.html#includes",
    "title": "automate counts",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-automate-count-20251006.html#notes",
    "href": "notes/note-automate-count-20251006.html#notes",
    "title": "automate counts",
    "section": "Notes",
    "text": "Notes\nThe scenario: I have a dataset with several variables and want to do counts of all the 2-way combinations (maybe even 3-way combinations) for faceted ggplots or automated tests.\nI have some tutorials on eg automating multiple plots, but with interval data rather than categorical data that you need to count before you can start analysis."
  },
  {
    "objectID": "notes/note-automate-count-20251006.html#examples",
    "href": "notes/note-automate-count-20251006.html#examples",
    "title": "automate counts",
    "section": "Examples",
    "text": "Examples\n\npetitions &lt;-\ncheshire_petitions |&gt;\n  select(petition_id, topic, petition_type, petition_gender, response) |&gt;\n  mutate(petition_type= str_remove(petition_type, \" *on behalf\")) |&gt;\n  mutate(response = case_when(\n    response %in% c(\"absent\", \"uncertain\") ~ NA,\n    str_detect(response, \"grant|referred\") ~ \"positive\",\n    .default = \"negative\"\n  )) \n\n\ncount variables singly using pivot_longer\nbefore getting on to doing multiple variables, an easy way to count lots of single variables\n(recording it here because it took me, a dummy, ages to work it out…)\n\npetitions |&gt;\n  pivot_longer(-petition_id, names_to = \"variable\", values_to = \"value\") |&gt;\n  count(variable, value) \n\n# A tibble: 23 × 3\n   variable        value          n\n   &lt;chr&gt;           &lt;chr&gt;      &lt;int&gt;\n 1 petition_gender f            132\n 2 petition_gender fm            27\n 3 petition_gender m            354\n 4 petition_gender &lt;NA&gt;         100\n 5 petition_type   collective   112\n 6 petition_type   multiple      73\n 7 petition_type   single       428\n 8 response        negative     255\n 9 response        positive     334\n10 response        &lt;NA&gt;          24\n# ℹ 13 more rows\n\n\nonce you’ve done that, you can look at the counts for each variable with ggplot faceting.\n\npetitions |&gt;\n  pivot_longer(-petition_id, names_to = \"variable\", values_to = \"value\") |&gt;\n  count(variable, value) |&gt;\n  ggplot(aes(value, n)) +\n  geom_col() +\n# need at least \"free_x\" here; free\" if groups are very different\n  facet_wrap(~variable, scales=\"free\") \n\n\n\n\n\n\n\n\nyou could do things like compute averages for each variable. (A bit weird for this data. Need better example.)\n\npetitions |&gt;\n  pivot_longer(-petition_id, names_to = \"variable\", values_to = \"value\") |&gt;\n  count(variable, value) |&gt;\n  group_by(variable) |&gt;\n  summarise(mn = mean(n), med=median(n)) |&gt;\n  ungroup()\n\n# A tibble: 4 × 3\n  variable           mn   med\n  &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt;\n1 petition_gender 153.    116\n2 petition_type   204.    112\n3 response        204.    255\n4 topic            47.2    21\n\n\n\n\ncounting combinations of multiple variables\nexample: petitions data has four categorical variables (topic, petition_type, petition_gender, response). I want to do counts of each combination of pairs without having to type the names out every time.\nfirst, get the variable names and store in a named vector\n\n# drop the id column\npetitions_cat &lt;-\npetitions |&gt;\n   select(-petition_id)\n\n(cat_names &lt;- \n  petitions_cat |&gt;\n  names() |&gt; \n  # use set_names to name the names \n  # then you'll get named lists, easier to do things with\n  # https://aosmith.rbind.io/2018/08/20/automating-exploratory-plots/\n  set_names() \n)\n\n            topic     petition_type   petition_gender          response \n          \"topic\"   \"petition_type\" \"petition_gender\"        \"response\" \n\n\nAnother way to count one variable at a time, but this time you get a list of dataframes.\ni’m not sure how this works or where i got it from… (nb the list elements are named because you used a named vector!)\n\nmap(cat_names, ~petitions_cat |&gt;  count(.data[[.x]])) \n\n$topic\n# A tibble: 13 × 2\n   topic                  n\n   &lt;chr&gt;              &lt;int&gt;\n 1 alehouse              17\n 2 charitable brief      16\n 3 cottage               92\n 4 dissenting worship     5\n 5 employment            15\n 6 imprisoned debtors     1\n 7 litigation           178\n 8 military relief       30\n 9 officeholding         21\n10 other                 17\n11 paternity             63\n12 poor relief           80\n13 rates                 78\n\n$petition_type\n# A tibble: 3 × 2\n  petition_type     n\n  &lt;chr&gt;         &lt;int&gt;\n1 collective      112\n2 multiple         73\n3 single          428\n\n$petition_gender\n# A tibble: 4 × 2\n  petition_gender     n\n  &lt;chr&gt;           &lt;int&gt;\n1 f                 132\n2 fm                 27\n3 m                 354\n4 &lt;NA&gt;              100\n\n$response\n# A tibble: 3 × 2\n  response     n\n  &lt;chr&gt;    &lt;int&gt;\n1 negative   255\n2 positive   334\n3 &lt;NA&gt;        24\n\n\nbut counting 2 at a time gets more complicated.\nthere are six possible 2 way combos (as long as you can assume it doesn’t matter which way round you have them)\n\ntopic x petition_type\ntopic x petition_gender\ntopic x response\npetition_type x petition_gender\npetition_type x response\npetition_gender x response\n\nyou need to get each pair in a list\neasy way to make the pairs is combn() but that makes a matrix.\n\ncombn(cat_names, m=2 ) \n\n     [,1]            [,2]              [,3]       [,4]             \n[1,] \"topic\"         \"topic\"           \"topic\"    \"petition_type\"  \n[2,] \"petition_type\" \"petition_gender\" \"response\" \"petition_gender\"\n     [,5]            [,6]             \n[1,] \"petition_type\" \"petition_gender\"\n[2,] \"response\"      \"response\"       \n\n\nseveral options to turn the matrix into a list (see SO: Convert a matrix to a list of column-vectors)\n\nconvert to tibble then to list (straight to as.list() doesn’t quite work)\n\n\n(petition_cat_names &lt;-\n  combn(cat_names, m=2 ) |&gt;  \n  # give the columns short names in .name_repair\n  as_tibble(.name_repair = ~c(\"tp\", \"tg\", \"tr\", \"pg\", \"pr\", \"gr\") ) \n)\n\n# A tibble: 2 × 6\n  tp            tg              tr       pg              pr            gr       \n  &lt;chr&gt;         &lt;chr&gt;           &lt;chr&gt;    &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;    \n1 topic         topic           topic    petition_type   petition_type petition…\n2 petition_type petition_gender response petition_gender response      response \n\n\n\nas.list()\n\n\n(petition_cat_names_list &lt;-\n  petition_cat_names |&gt; \n   as.list())\n\n$tp\n[1] \"topic\"         \"petition_type\"\n\n$tg\n[1] \"topic\"           \"petition_gender\"\n\n$tr\n[1] \"topic\"    \"response\"\n\n$pg\n[1] \"petition_type\"   \"petition_gender\"\n\n$pr\n[1] \"petition_type\" \"response\"     \n\n$gr\n[1] \"petition_gender\" \"response\"       \n\n\n\nuse map with [ to pull out the values (learned this from Jenny Bryan)\n\n\nmap(petition_cat_names, `[`)\n\n$tp\n[1] \"topic\"         \"petition_type\"\n\n$tg\n[1] \"topic\"           \"petition_gender\"\n\n$tr\n[1] \"topic\"    \"response\"\n\n$pg\n[1] \"petition_type\"   \"petition_gender\"\n\n$pr\n[1] \"petition_type\" \"response\"     \n\n$gr\n[1] \"petition_gender\" \"response\"       \n\n\n\nor skip making the tibble using asplit(), but then it needs naming\n\n\ncombn(cat_names, m=2) |&gt; \n  asplit(MARGIN = 2) |&gt; \n  set_names(c(\"tp\", \"tg\", \"tr\", \"pg\", \"pr\", \"gr\"))\n\n$tp\n[1] \"topic\"         \"petition_type\"\n\n$tg\n[1] \"topic\"           \"petition_gender\"\n\n$tr\n[1] \"topic\"    \"response\"\n\n$pg\n[1] \"petition_type\"   \"petition_gender\"\n\n$pr\n[1] \"petition_type\" \"response\"     \n\n$gr\n[1] \"petition_gender\" \"response\"       \n\n\nIt’s helpful to test the next step with a single pair before trying to scale up.\n\npetition_cat_names[[4]] # pull out both rows in 4th column, as a vector\n\n[1] \"petition_type\"   \"petition_gender\"\n\n\nCan’t just use the stored variables directly inside count(); need across(all_of()).\n\npetitions |&gt;\n  count(across(all_of(petition_cat_names[[4]])))\n\n# A tibble: 8 × 3\n  petition_type petition_gender     n\n  &lt;chr&gt;         &lt;chr&gt;           &lt;int&gt;\n1 collective    f                   4\n2 collective    m                   8\n3 collective    &lt;NA&gt;              100\n4 multiple      f                   3\n5 multiple      fm                 27\n6 multiple      m                  43\n7 single        f                 125\n8 single        m                 303\n\n\nNow for some purrr::map magic to scale it up.\nFor this make a little helper function.\n\nacross_count &lt;- function(data, vars) {\n  data |&gt;\n    count(across(all_of({{vars}})))\n}\n\ntada!\n\npetition_cat_names_list |&gt;\n  map(~across_count(petitions_cat, .x))\n\n$tp\n# A tibble: 33 × 3\n   topic              petition_type     n\n   &lt;chr&gt;              &lt;chr&gt;         &lt;int&gt;\n 1 alehouse           collective        4\n 2 alehouse           single           13\n 3 charitable brief   collective        5\n 4 charitable brief   multiple          2\n 5 charitable brief   single            9\n 6 cottage            collective        4\n 7 cottage            multiple         11\n 8 cottage            single           77\n 9 dissenting worship multiple          3\n10 dissenting worship single            2\n# ℹ 23 more rows\n\n$tg\n# A tibble: 37 × 3\n   topic            petition_gender     n\n   &lt;chr&gt;            &lt;chr&gt;           &lt;int&gt;\n 1 alehouse         f                   2\n 2 alehouse         m                  12\n 3 alehouse         &lt;NA&gt;                3\n 4 charitable brief f                   1\n 5 charitable brief fm                  1\n 6 charitable brief m                  10\n 7 charitable brief &lt;NA&gt;                4\n 8 cottage          f                  19\n 9 cottage          fm                  7\n10 cottage          m                  64\n# ℹ 27 more rows\n\n$tr\n# A tibble: 32 × 3\n   topic              response     n\n   &lt;chr&gt;              &lt;chr&gt;    &lt;int&gt;\n 1 alehouse           negative    10\n 2 alehouse           positive     7\n 3 charitable brief   negative     8\n 4 charitable brief   positive     7\n 5 charitable brief   &lt;NA&gt;         1\n 6 cottage            negative    31\n 7 cottage            positive    59\n 8 cottage            &lt;NA&gt;         2\n 9 dissenting worship negative     5\n10 employment         negative     4\n# ℹ 22 more rows\n\n$pg\n# A tibble: 8 × 3\n  petition_type petition_gender     n\n  &lt;chr&gt;         &lt;chr&gt;           &lt;int&gt;\n1 collective    f                   4\n2 collective    m                   8\n3 collective    &lt;NA&gt;              100\n4 multiple      f                   3\n5 multiple      fm                 27\n6 multiple      m                  43\n7 single        f                 125\n8 single        m                 303\n\n$pr\n# A tibble: 9 × 3\n  petition_type response     n\n  &lt;chr&gt;         &lt;chr&gt;    &lt;int&gt;\n1 collective    negative    55\n2 collective    positive    51\n3 collective    &lt;NA&gt;         6\n4 multiple      negative    33\n5 multiple      positive    39\n6 multiple      &lt;NA&gt;         1\n7 single        negative   167\n8 single        positive   244\n9 single        &lt;NA&gt;        17\n\n$gr\n# A tibble: 12 × 3\n   petition_gender response     n\n   &lt;chr&gt;           &lt;chr&gt;    &lt;int&gt;\n 1 f               negative    55\n 2 f               positive    72\n 3 f               &lt;NA&gt;         5\n 4 fm              negative    11\n 5 fm              positive    15\n 6 fm              &lt;NA&gt;         1\n 7 m               negative   146\n 8 m               positive   196\n 9 m               &lt;NA&gt;        12\n10 &lt;NA&gt;            negative    43\n11 &lt;NA&gt;            positive    51\n12 &lt;NA&gt;            &lt;NA&gt;         6\n\n\nCan do the same thing in a group_by/summarise pipeline (might want to do something other than just count)\ntest with a single pair\n\npetitions_cat |&gt;\n  group_by(across(all_of(petition_cat_names[[4]]))) |&gt;\n  summarise(n = n(), .groups = \"drop_last\") |&gt;\n  ungroup()\n\n# A tibble: 8 × 3\n  petition_type petition_gender     n\n  &lt;chr&gt;         &lt;chr&gt;           &lt;int&gt;\n1 collective    f                   4\n2 collective    m                   8\n3 collective    &lt;NA&gt;              100\n4 multiple      f                   3\n5 multiple      fm                 27\n6 multiple      m                  43\n7 single        f                 125\n8 single        m                 303\n\n\nmake the across(all_of()) function\n\nacross_group_by &lt;- function(data, vars) {\n  data |&gt;\n    group_by(across(all_of(vars)))\n}\n\nstart with map in the group_by function to create a list of three grouped DFs, and then summarise inside the map (took me so long to work this out…)\n\npetition_cat_names_list |&gt; \n  map(~across_group_by(petitions_cat, .x) |&gt;  \n        summarise(n = n(), .groups = \"drop_last\") |&gt; \n        ungroup() |&gt;\n        mutate(pct = round(n/sum(n)*100, 2))\n      )\n\n$tp\n# A tibble: 33 × 4\n   topic              petition_type     n   pct\n   &lt;chr&gt;              &lt;chr&gt;         &lt;int&gt; &lt;dbl&gt;\n 1 alehouse           collective        4  0.65\n 2 alehouse           single           13  2.12\n 3 charitable brief   collective        5  0.82\n 4 charitable brief   multiple          2  0.33\n 5 charitable brief   single            9  1.47\n 6 cottage            collective        4  0.65\n 7 cottage            multiple         11  1.79\n 8 cottage            single           77 12.6 \n 9 dissenting worship multiple          3  0.49\n10 dissenting worship single            2  0.33\n# ℹ 23 more rows\n\n$tg\n# A tibble: 37 × 4\n   topic            petition_gender     n   pct\n   &lt;chr&gt;            &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n 1 alehouse         f                   2  0.33\n 2 alehouse         m                  12  1.96\n 3 alehouse         &lt;NA&gt;                3  0.49\n 4 charitable brief f                   1  0.16\n 5 charitable brief fm                  1  0.16\n 6 charitable brief m                  10  1.63\n 7 charitable brief &lt;NA&gt;                4  0.65\n 8 cottage          f                  19  3.1 \n 9 cottage          fm                  7  1.14\n10 cottage          m                  64 10.4 \n# ℹ 27 more rows\n\n$tr\n# A tibble: 32 × 4\n   topic              response     n   pct\n   &lt;chr&gt;              &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1 alehouse           negative    10  1.63\n 2 alehouse           positive     7  1.14\n 3 charitable brief   negative     8  1.31\n 4 charitable brief   positive     7  1.14\n 5 charitable brief   &lt;NA&gt;         1  0.16\n 6 cottage            negative    31  5.06\n 7 cottage            positive    59  9.62\n 8 cottage            &lt;NA&gt;         2  0.33\n 9 dissenting worship negative     5  0.82\n10 employment         negative     4  0.65\n# ℹ 22 more rows\n\n$pg\n# A tibble: 8 × 4\n  petition_type petition_gender     n   pct\n  &lt;chr&gt;         &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt;\n1 collective    f                   4  0.65\n2 collective    m                   8  1.31\n3 collective    &lt;NA&gt;              100 16.3 \n4 multiple      f                   3  0.49\n5 multiple      fm                 27  4.4 \n6 multiple      m                  43  7.01\n7 single        f                 125 20.4 \n8 single        m                 303 49.4 \n\n$pr\n# A tibble: 9 × 4\n  petition_type response     n   pct\n  &lt;chr&gt;         &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n1 collective    negative    55  8.97\n2 collective    positive    51  8.32\n3 collective    &lt;NA&gt;         6  0.98\n4 multiple      negative    33  5.38\n5 multiple      positive    39  6.36\n6 multiple      &lt;NA&gt;         1  0.16\n7 single        negative   167 27.2 \n8 single        positive   244 39.8 \n9 single        &lt;NA&gt;        17  2.77\n\n$gr\n# A tibble: 12 × 4\n   petition_gender response     n   pct\n   &lt;chr&gt;           &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1 f               negative    55  8.97\n 2 f               positive    72 11.8 \n 3 f               &lt;NA&gt;         5  0.82\n 4 fm              negative    11  1.79\n 5 fm              positive    15  2.45\n 6 fm              &lt;NA&gt;         1  0.16\n 7 m               negative   146 23.8 \n 8 m               positive   196 32.0 \n 9 m               &lt;NA&gt;        12  1.96\n10 &lt;NA&gt;            negative    43  7.01\n11 &lt;NA&gt;            positive    51  8.32\n12 &lt;NA&gt;            &lt;NA&gt;         6  0.98\n\n\n\n\nbonus select only version\nI might want to make a list of dfs for each pair but without group_by/count.\nselect only needs all_of\n\n# seems this doesn't need embracing?\nall_select &lt;- function(data, vars){\n  data |&gt; select(all_of(vars))\n}\n\n\npetition_cat_names_list |&gt;\n  map(~all_select(petitions_cat, .x) |&gt; \n        head()\n      )\n\n$tp\n# A tibble: 6 × 2\n  topic      petition_type\n  &lt;chr&gt;      &lt;chr&gt;        \n1 litigation collective   \n2 litigation single       \n3 litigation single       \n4 litigation single       \n5 litigation single       \n6 cottage    multiple     \n\n$tg\n# A tibble: 6 × 2\n  topic      petition_gender\n  &lt;chr&gt;      &lt;chr&gt;          \n1 litigation &lt;NA&gt;           \n2 litigation m              \n3 litigation m              \n4 litigation f              \n5 litigation m              \n6 cottage    m              \n\n$tr\n# A tibble: 6 × 2\n  topic      response\n  &lt;chr&gt;      &lt;chr&gt;   \n1 litigation negative\n2 litigation positive\n3 litigation positive\n4 litigation positive\n5 litigation positive\n6 cottage    positive\n\n$pg\n# A tibble: 6 × 2\n  petition_type petition_gender\n  &lt;chr&gt;         &lt;chr&gt;          \n1 collective    &lt;NA&gt;           \n2 single        m              \n3 single        m              \n4 single        f              \n5 single        m              \n6 multiple      m              \n\n$pr\n# A tibble: 6 × 2\n  petition_type response\n  &lt;chr&gt;         &lt;chr&gt;   \n1 collective    negative\n2 single        positive\n3 single        positive\n4 single        positive\n5 single        positive\n6 multiple      positive\n\n$gr\n# A tibble: 6 × 2\n  petition_gender response\n  &lt;chr&gt;           &lt;chr&gt;   \n1 &lt;NA&gt;            negative\n2 m               positive\n3 m               positive\n4 f               positive\n5 m               positive\n6 m               positive"
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html",
    "href": "notes/note-strings-variables-20250929.html",
    "title": "variable as column name",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#includes",
    "href": "notes/note-strings-variables-20250929.html#includes",
    "title": "variable as column name",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#notes",
    "href": "notes/note-strings-variables-20250929.html#notes",
    "title": "variable as column name",
    "section": "Notes",
    "text": "Notes\nI’m lazy. I don’t like typing the same thing over and over. Especially when I got data from somewhere which has long column names.\nSo sometimes I want to do something like\n\nvar &lt;- \"a_very_long_column_name_in_my_dataset\"\n\nand then reuse the stored short var instead of typing out a_very_long_column_name_in_my_dataset.\nExamples below may also work in writing functions; compare with the various TILs on naming things/functions.\nTodo: another post with more on working with multiple variables."
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#examples",
    "href": "notes/note-strings-variables-20250929.html#examples",
    "title": "variable as column name",
    "section": "Examples",
    "text": "Examples\nUsing a sample taken from the Addressing Health Pensions Database which has lots of variables with quite long descriptive names; the sample includes only some of them.\n\naddressing_health &lt;- \n  read_csv(here::here(\"data/addressing_health_sample1000.csv\"))\n\n\naddressing_health |&gt;\n  names()\n\n [1] \"id\"                      \"year\"                   \n [3] \"gender\"                  \"age_at_retirement_years\"\n [5] \"length_of_service_years\" \"length_of_service_days\" \n [7] \"indoor_outdoor\"          \"illness_days_total\"     \n [9] \"cause_medical\"           \"age_at_death_years\"     \n[11] \"ppg_salary_decimal\"      \"ppg_allowance_decimal\"  \n\n\nLet’s say I want to mess around with the columns length_of_service_years, ppg_allowance_decimal or cause_medical.\n\n(losy &lt;- \"length_of_service_years\")\n\n[1] \"length_of_service_years\"\n\n(pad &lt;- \"ppg_allowance_decimal\")\n\n[1] \"ppg_allowance_decimal\"\n\n(cause &lt;- \"cause_medical\")\n\n[1] \"cause_medical\""
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#in-tidyverse-pipes",
    "href": "notes/note-strings-variables-20250929.html#in-tidyverse-pipes",
    "title": "variable as column name",
    "section": "in tidyverse pipes",
    "text": "in tidyverse pipes\n\nselect\nuse all_of() or any_of() (seem to be interchangeable)\n\naddressing_health |&gt; \n  select(any_of(pad)) |&gt;\n  head(10)\n\n# A tibble: 10 × 1\n   ppg_allowance_decimal\n                   &lt;dbl&gt;\n 1                 66.0 \n 2                 20.9 \n 3                  8.47\n 4                 26.9 \n 5                 43.4 \n 6                 32.6 \n 7                 50.2 \n 8                 12.4 \n 9                 34.3 \n10                 45.5 \n\n\ncan select more than one with usual tidy-select stuff\n\naddressing_health |&gt; \n  select(any_of(c(losy, pad))) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   length_of_service_years ppg_allowance_decimal\n                     &lt;dbl&gt;                 &lt;dbl&gt;\n 1                      35                 66.0 \n 2                      37                 20.9 \n 3                      15                  8.47\n 4                      31                 26.9 \n 5                      21                 43.4 \n 6                      30                 32.6 \n 7                      35                 50.2 \n 8                      22                 12.4 \n 9                      29                 34.3 \n10                      26                 45.5 \n\n\n\n\ngroup by\nuse across() + all_of() (or any_of)\n\naddressing_health |&gt;\n  group_by(across(all_of(losy))) |&gt;\n  summarise(n = n()) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   length_of_service_years     n\n                     &lt;dbl&gt; &lt;int&gt;\n 1                       5     1\n 2                       6     1\n 3                       9     1\n 4                      10    23\n 5                      11    20\n 6                      12    25\n 7                      13    22\n 8                      14    28\n 9                      15    22\n10                      16    26\n\n\nor group_by_at() [in fact this is marked as superseded]\n\naddressing_health |&gt;\n  group_by_at(losy) |&gt;\n  summarise(n = n()) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   length_of_service_years     n\n                     &lt;dbl&gt; &lt;int&gt;\n 1                       5     1\n 2                       6     1\n 3                       9     1\n 4                      10    23\n 5                      11    20\n 6                      12    25\n 7                      13    22\n 8                      14    28\n 9                      15    22\n10                      16    26\n\n\n\n\nfilter\nuse get()\n\naddressing_health |&gt; \n  filter(get(losy) &lt;= 8)\n\n# A tibble: 2 × 12\n           id  year gender age_at_retirement_years length_of_service_years\n        &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;                   &lt;dbl&gt;\n1 19010000781  1900 M                           24                       6\n2 18811700452  1881 M                           50                       5\n# ℹ 7 more variables: length_of_service_days &lt;dbl&gt;, indoor_outdoor &lt;chr&gt;,\n#   illness_days_total &lt;dbl&gt;, cause_medical &lt;chr&gt;, age_at_death_years &lt;dbl&gt;,\n#   ppg_salary_decimal &lt;dbl&gt;, ppg_allowance_decimal &lt;dbl&gt;\n\n\n\n\nmutate\non the right hand side of a mutate, use get()\n\naddressing_health |&gt;\n  select(all_of(c(losy, pad))) |&gt;\n  mutate(p = get(losy)/get(pad)) |&gt;\n  head(10)\n\n# A tibble: 10 × 3\n   length_of_service_years ppg_allowance_decimal     p\n                     &lt;dbl&gt;                 &lt;dbl&gt; &lt;dbl&gt;\n 1                      35                 66.0  0.530\n 2                      37                 20.9  1.77 \n 3                      15                  8.47 1.77 \n 4                      31                 26.9  1.15 \n 5                      21                 43.4  0.484\n 6                      30                 32.6  0.921\n 7                      35                 50.2  0.697\n 8                      22                 12.4  1.77 \n 9                      29                 34.3  0.845\n10                      26                 45.5  0.572\n\n\nOn the left hand side of a mutate (eg, you want to base the new column name on the old one) is slightly more complex: use !! and :=\n\naddressing_health |&gt;\n  select(all_of(c(losy, pad))) |&gt;\n  filter(get(losy) &gt; 45) |&gt;\n  # nb !! goes outside paste()\n  mutate(!! paste0(\"p_\", losy) := get(losy)/get(pad))\n\n# A tibble: 28 × 3\n   length_of_service_years ppg_allowance_decimal p_length_of_service_years\n                     &lt;dbl&gt;                 &lt;dbl&gt;                     &lt;dbl&gt;\n 1                      48                 104                       0.462\n 2                      51                  35.9                     1.42 \n 3                      48                 353.                      0.136\n 4                      46                  93.3                     0.493\n 5                      46                  74.9                     0.614\n 6                      48                  38.6                     1.24 \n 7                      54                 237.                      0.228\n 8                      50                 120.                      0.417\n 9                      46                 300                       0.153\n10                      50                  86.7                     0.577\n# ℹ 18 more rows\n\n\nif for some reason you want to reuse the variable as a string on the righthand side (eg make a new grouping name?)\n\naddressing_health |&gt;\n  select(all_of(c(losy, pad))) |&gt;\n  mutate(new_grp = paste0(losy, \"_2\")) |&gt;\n  head(10)\n\n# A tibble: 10 × 3\n   length_of_service_years ppg_allowance_decimal new_grp                  \n                     &lt;dbl&gt;                 &lt;dbl&gt; &lt;chr&gt;                    \n 1                      35                 66.0  length_of_service_years_2\n 2                      37                 20.9  length_of_service_years_2\n 3                      15                  8.47 length_of_service_years_2\n 4                      31                 26.9  length_of_service_years_2\n 5                      21                 43.4  length_of_service_years_2\n 6                      30                 32.6  length_of_service_years_2\n 7                      35                 50.2  length_of_service_years_2\n 8                      22                 12.4  length_of_service_years_2\n 9                      29                 34.3  length_of_service_years_2\n10                      26                 45.5  length_of_service_years_2\n\n\nyou could also make the new variable name beforehand rather than doing paste inside mutate\n\nnewvarname &lt;- paste0(\"p_\", losy)\n\naddressing_health |&gt; \n  select(all_of(c(losy, pad))) |&gt;\n  mutate( !! newvarname := get(losy)/get(pad) ) |&gt;\n  head(10)\n\n# A tibble: 10 × 3\n   length_of_service_years ppg_allowance_decimal p_length_of_service_years\n                     &lt;dbl&gt;                 &lt;dbl&gt;                     &lt;dbl&gt;\n 1                      35                 66.0                      0.530\n 2                      37                 20.9                      1.77 \n 3                      15                  8.47                     1.77 \n 4                      31                 26.9                      1.15 \n 5                      21                 43.4                      0.484\n 6                      30                 32.6                      0.921\n 7                      35                 50.2                      0.697\n 8                      22                 12.4                      1.77 \n 9                      29                 34.3                      0.845\n10                      26                 45.5                      0.572\n\n\n\n\nsummarise\nsame as mutate, I think.\n\naddressing_health |&gt; \n  summarise(ml = mean(get(losy)), !! paste0(\"mean_\", pad) := mean(get(pad)))\n\n# A tibble: 1 × 2\n     ml mean_ppg_allowance_decimal\n  &lt;dbl&gt;                      &lt;dbl&gt;\n1  26.5                       60.3\n\n\n\n\ncount() (and add_count()?)\nas with group_by, use across(all_of()) (alternatively could use pick() but that also seems to be deprecated, boo)\n\naddressing_health |&gt;\n  count(across(all_of(losy)), sort = T) |&gt;\n  head(10)\n\n# A tibble: 10 × 2\n   length_of_service_years     n\n                     &lt;dbl&gt; &lt;int&gt;\n 1                      20    46\n 2                      30    45\n 3                      25    38\n 4                      24    36\n 5                      32    36\n 6                      18    35\n 7                      33    35\n 8                      28    34\n 9                      26    33\n10                      27    33\n\n\n\naddressing_health |&gt;\n  count(pick(cause))\n\n# A tibble: 2 × 2\n  cause_medical     n\n  &lt;chr&gt;         &lt;int&gt;\n1 Med             595\n2 Non-Med         405"
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#working-with-vectors",
    "href": "notes/note-strings-variables-20250929.html#working-with-vectors",
    "title": "variable as column name",
    "section": "working with vectors",
    "text": "working with vectors\nLet’s say I want to get the mean, median and standard deviation of each numerical column, as separate vectors rather than in a dataframe.\nThis is largely a lesson in subsetting… but NB that the shorthand form x$y doesn’t work; you have to use x[[y]].\n(Hadley Wickham explains this is because x$var gets translated as x[[“var”]] instead of x[[var]])\n\nmean_losy &lt;- mean(addressing_health[[losy]])\nmedian_losy &lt;- median(addressing_health[[losy]])\nsd_losy &lt;- sd(addressing_health[[losy]])\n\nmean_losy\n\n[1] 26.537\n\nmedian_losy\n\n[1] 26\n\nsd_losy\n\n[1] 9.590444\n\n\n\nmean_pension &lt;- mean(addressing_health[[pad]])\nmedian_pension &lt;- median(addressing_health[[pad]])\nsd_pension &lt;- sd(addressing_health[[pad]])\n\nmean_pension\n\n[1] 60.32141\n\nmedian_pension\n\n[1] 31\n\nsd_pension\n\n[1] 90.80907\n\n\nOr I want to get the length of service columnn - don’t need get() or anything else this way\n\nhead( addressing_health[losy] )\n\n# A tibble: 6 × 1\n  length_of_service_years\n                    &lt;dbl&gt;\n1                      35\n2                      37\n3                      15\n4                      31\n5                      21\n6                      30\n\n\nget the first 3 rows of the pension allowance column\n\naddressing_health[1:3, pad] \n\n# A tibble: 3 × 1\n  ppg_allowance_decimal\n                  &lt;dbl&gt;\n1                 66.0 \n2                 20.9 \n3                  8.47"
  },
  {
    "objectID": "notes/note-strings-variables-20250929.html#fun-with-frequency-tables",
    "href": "notes/note-strings-variables-20250929.html#fun-with-frequency-tables",
    "title": "variable as column name",
    "section": "fun with frequency tables",
    "text": "fun with frequency tables\nUsing the historydata judges data for this.\n\ng &lt;- \"gender\"\nbps &lt;- \"birthplace_state\"\n\n\ntable(judges_people[[bps]], judges_people[[g]]) |&gt;\n  head(10)\n\n                 \n                   F  M\n  AK               0  1\n  AL               7 75\n  Antigua          1  0\n  AR               2 35\n  Asia Minor       0  1\n  Australia        0  1\n  Austria          1  1\n  Austria-Hungary  0  1\n  AZ               2 18\n  Bermuda          0  1\n\n\nor, to make the table using with(), you want get() again. I imagine something similar applies if you want to use xtab().\n\nwith(judges_people, table(get(bps), get(g))) |&gt;\n  head(10)\n\n                 \n                   F  M\n  AK               0  1\n  AL               7 75\n  Antigua          1  0\n  AR               2 35\n  Asia Minor       0  1\n  Australia        0  1\n  Austria          1  1\n  Austria-Hungary  0  1\n  AZ               2 18\n  Bermuda          0  1"
  },
  {
    "objectID": "notes/note-scales-pretty-numbers-20250901.html",
    "href": "notes/note-scales-pretty-numbers-20250901.html",
    "title": "make numbers more readable with scales::number()",
    "section": "",
    "text": "source(here::here('R/shared.R'))\nlibrary(scales)"
  },
  {
    "objectID": "notes/note-scales-pretty-numbers-20250901.html#includes",
    "href": "notes/note-scales-pretty-numbers-20250901.html#includes",
    "title": "make numbers more readable with scales::number()",
    "section": "",
    "text": "source(here::here('R/shared.R'))\nlibrary(scales)"
  },
  {
    "objectID": "notes/note-scales-pretty-numbers-20250901.html#notes",
    "href": "notes/note-scales-pretty-numbers-20250901.html#notes",
    "title": "make numbers more readable with scales::number()",
    "section": "Notes",
    "text": "Notes\nThe thing I learned: the scales number() function can be used outside ggplot!\n\nsee this post by Cara Thompson\n\nwhy? sometimes precision isn’t everything.\n\nin creating visualisations where the main focus is summary statistics and comparisons between groups rather than on precision down to the closest 0.01, sometimes printing 1234567890 as “1,234.6M” is the most helpful thing to do for the end user.\n\nNote. in the online scales package docs it’s not documented; in R docs it’s described as\n\na low-level helper that powers many of the labelling functions. You should generally not need to call it directly unless you are creating your own labelling function."
  },
  {
    "objectID": "notes/note-scales-pretty-numbers-20250901.html#examples",
    "href": "notes/note-scales-pretty-numbers-20250901.html#examples",
    "title": "make numbers more readable with scales::number()",
    "section": "Examples",
    "text": "Examples\nfrom Thompson post: abbreviating a long number using cut_long_scale (which is also not documented…)\n\nnumber(12345, scale_cut = scales::cut_long_scale())\n\n[1] \"12K\"\n\n\nnegative number\n\nnumber(-12345, accuracy = 0.1, scale_cut = scales::cut_long_scale())\n\n[1] \"-12.3K\"\n\n\na really really really long number\n\nscales::number(\n  1234567890,\n  accuracy = 0.1,\n  drop0trailing = TRUE,\n  big.mark = \",\",\n  scale_cut = scales::cut_long_scale()\n)\n\n[1] \"1,234.6M\"\n\n\nwith mutate in a dataframe\n\n# accuracy: 0.01 for 2 decimal places, 0.1 for one, etc.\nsarna |&gt;\n  filter(value &gt; 1000000) |&gt;\n  head(10) |&gt;\n  mutate(value_commas = number(value, big.mark = \",\"),\n         value_abbr = number(value, accuracy = 0.01, scale_cut = cut_long_scale()))\n\n# A tibble: 10 × 5\n    year estimate         value value_commas value_abbr\n   &lt;int&gt; &lt;fct&gt;            &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;     \n 1  1910 population_low 1508000 1,508,000    1.51M     \n 2  1920 population_low 3300000 3,300,000    3.30M     \n 3  1930 population_low 4228000 4,228,000    4.23M     \n 4  1940 population_low 4771000 4,771,000    4.77M     \n 5  1950 population_low 4500000 4,500,000    4.50M     \n 6  1960 population_low 5367000 5,367,000    5.37M     \n 7  1970 population_low 5370000 5,370,000    5.37M     \n 8  1980 population_low 5500000 5,500,000    5.50M     \n 9  1990 population_low 5515000 5,515,000    5.52M     \n10  2000 population_low 5340000 5,340,000    5.34M     \n\n\nThere are probably lots more possibilities…"
  },
  {
    "objectID": "notes/note-scales-pretty-numbers-20250901.html#resources",
    "href": "notes/note-scales-pretty-numbers-20250901.html#resources",
    "title": "make numbers more readable with scales::number()",
    "section": "Resources",
    "text": "Resources\n\npackage docs"
  },
  {
    "objectID": "notes/note-anonymous-functions-20250906.html",
    "href": "notes/note-anonymous-functions-20250906.html",
    "title": "anonymous functions",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-anonymous-functions-20250906.html#includes",
    "href": "notes/note-anonymous-functions-20250906.html#includes",
    "title": "anonymous functions",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-anonymous-functions-20250906.html#notes",
    "href": "notes/note-anonymous-functions-20250906.html#notes",
    "title": "anonymous functions",
    "section": "Notes",
    "text": "Notes\nI have been very very rubbish at understanding these. making this as a wip to help me get better\na helpful brief intro in Rodrigues book in chapter 3\n\nan anonymous function can always be a regular named function - but “sometimes it is faster to simply use an anonymous function as long as it does not hurt clarity”.\n\ncool but useless post on usefulness and constraints (and suggested alternatives, might follow up later)\n\nAn Anonymous Function (also known as a lambda expression) is a function definition that is not bound to an identifier. That is, it is a function that is created and used, but never assigned to a variable.\n\nHadley Wickham in adv-r\n\n[In R, functions] aren’t automatically bound to a name… R doesn’t have a special syntax for creating a named function: when you create a function, you use the regular assignment operator to give it a name. If you choose not to give the function a name, you get an anonymous function. You use an anonymous function when it’s not worth the effort to give it a name:\n\nLikely to be most useful for v small functions that you won’t need to reuse (but if you do it’s easy to turn the anonymous function into a named one)"
  },
  {
    "objectID": "notes/note-anonymous-functions-20250906.html#examples",
    "href": "notes/note-anonymous-functions-20250906.html#examples",
    "title": "anonymous functions",
    "section": "Examples",
    "text": "Examples\na list of slightly varying datasets - want to map over them to make simple histograms\nRHC heights\n\n# (need height filter because of an erroneous value lol)\nrhc_heights &lt;-\nrhc |&gt;\n  filter(between(height_inches, 50, 90) & gender %in% c(\"female\", \"male\"))\n\na simple histogram with base hist()\n\nhist(rhc_heights$height_inches)\n\n\n\n\n\n\n\n\n\n# use group_split to make list of DFs\nrhc_gender_heights &lt;-\nrhc |&gt;\n  filter(between(height_inches, 50, 80) & gender %in% c(\"female\", \"male\")) |&gt;\n  group_split(gender)\n\nIf you try something like map(rhc_gender_heights, ~hist(height_inches)) it won’t work.\nOne solution is to use an anonymous function.\n\nmap(rhc_gender_heights, (function(x) hist(x$height_inches)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[[1]]\n$breaks\n [1] 50 52 54 56 58 60 62 64 66 68 70 72 74 76\n\n$counts\n [1]    6   35  240 1401 3500 4047 2549  703  136   31    6    3    2\n\n$density\n [1] 2.369855e-04 1.382416e-03 9.479422e-03 5.533612e-02 1.382416e-01\n [6] 1.598467e-01 1.006794e-01 2.776681e-02 5.371672e-03 1.224425e-03\n[11] 2.369855e-04 1.184928e-04 7.899518e-05\n\n$mids\n [1] 51 53 55 57 59 61 63 65 67 69 71 73 75\n\n$xname\n[1] \"x$height_inches\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n\n[[2]]\n$breaks\n [1] 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80\n\n$counts\n [1]    24    50   152   427  2654 11555 26862 35435 27302 12168  2939   520\n[13]    76    30    13\n\n$density\n [1] 9.982780e-05 2.079746e-04 6.322427e-04 1.776103e-03 1.103929e-02\n [6] 4.806292e-02 1.117323e-01 1.473916e-01 1.135624e-01 5.061269e-02\n[11] 1.222475e-02 2.162936e-03 3.161214e-04 1.247847e-04 5.407339e-05\n\n$mids\n [1] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79\n\n$xname\n[1] \"x$height_inches\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\""
  },
  {
    "objectID": "notes/note-anonymous-functions-20250906.html#resources",
    "href": "notes/note-anonymous-functions-20250906.html#resources",
    "title": "anonymous functions",
    "section": "Resources",
    "text": "Resources\n\nRodrigues, chapter 3\nadv-r\ncool but useless\nwikipedia"
  },
  {
    "objectID": "notes/note-automate-frequency-tables-20251005.html",
    "href": "notes/note-automate-frequency-tables-20251005.html",
    "title": "automate frequency tables",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-automate-frequency-tables-20251005.html#includes",
    "href": "notes/note-automate-frequency-tables-20251005.html#includes",
    "title": "automate frequency tables",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-automate-frequency-tables-20251005.html#notes",
    "href": "notes/note-automate-frequency-tables-20251005.html#notes",
    "title": "automate frequency tables",
    "section": "Notes",
    "text": "Notes\nThe scenario: I have a dataset with several variables and want to make frequency tables of all the 2-way combinations (maybe even 3-way combinations)."
  },
  {
    "objectID": "notes/note-automate-frequency-tables-20251005.html#examples",
    "href": "notes/note-automate-frequency-tables-20251005.html#examples",
    "title": "automate frequency tables",
    "section": "Examples",
    "text": "Examples\nUsing Old Bailey trials data.\n\ntrials_cat &lt;-\nobv_trials |&gt;\n  select(deft_speech_cat, deft_gender, offence_cat, verdict_cat) |&gt;\n  filter(!is.na(deft_gender), verdict_cat %in% c(\"guilty\", \"notGuilty\")) \n\n\ntrials_cat |&gt;\n  head(10)\n\n# A tibble: 10 × 4\n   deft_speech_cat deft_gender offence_cat  verdict_cat\n   &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt;      \n 1 deft_speaks     female      theft        guilty     \n 2 deft_silent     male        theft        guilty     \n 3 deft_speaks     male        theft        guilty     \n 4 deft_speaks     female      theft        guilty     \n 5 deft_speaks     male        theft        notGuilty  \n 6 deft_speaks     male        theft        notGuilty  \n 7 deft_speaks     female      theft        guilty     \n 8 deft_speaks     female      theft        notGuilty  \n 9 deft_speaks     male        violentTheft notGuilty  \n10 deft_speaks     male        theft        guilty     \n\n\nGiven a tibble in the format above, with each variable in its own column, it’s amazingly easy to do 1-way frequency tables and get a (named) list of tables.\n\ntoo_easy &lt;-\n  map(trials_cat, table)\n\ntoo_easy\n\n$deft_speech_cat\n\ndeft_silent deft_speaks   no_speech \n       6324        9547        4698 \n\n$deft_gender\n\nfemale   male \n  4367  16202 \n\n$offence_cat\n\nbreakingPeace        damage     deception          kill miscellaneous \n          603            60          1081           351           294 \nroyalOffences        sexual         theft  violentTheft \n         1172           424         16008           576 \n\n$verdict_cat\n\n   guilty notGuilty \n    16046      4523 \n\n\nso then you can run, eg, chi-squared goodness of fit tests on all of them at once…\n\nmap(too_easy, chisq.test)\n\n$deft_speech_cat\n\n    Chi-squared test for given probabilities\n\ndata:  .x[[i]]\nX-squared = 1776.7, df = 2, p-value &lt; 2.2e-16\n\n\n$deft_gender\n\n    Chi-squared test for given probabilities\n\ndata:  .x[[i]]\nX-squared = 6809.6, df = 1, p-value &lt; 2.2e-16\n\n\n$offence_cat\n\n    Chi-squared test for given probabilities\n\ndata:  .x[[i]]\nX-squared = 93145, df = 8, p-value &lt; 2.2e-16\n\n\n$verdict_cat\n\n    Chi-squared test for given probabilities\n\ndata:  .x[[i]]\nX-squared = 6455.3, df = 1, p-value &lt; 2.2e-16\n\n\n2-way tables need a little bit more work. Instead of just using a single tibble, you want a list of tibbles, each one containing a pair of variables.\n[see post on automating counts for the gory details.]\n\ncat_names &lt;- \n  trials_cat |&gt;\n  names() |&gt; \n  set_names() \n\ncat_names_list &lt;-\n  combn(cat_names, m=2 ) |&gt;  \n  as_tibble(.name_repair = ~c(\"sg\", \"so\", \"sv\", \"go\", \"gv\", \"ov\") ) |&gt; \n  as.list()\n\nall_select &lt;- function(data, vars){\n  data |&gt; select(all_of(vars))\n}\n\ntrial_cat_groups &lt;-\ncat_names_list |&gt;\n  map(~all_select(trials_cat, .x))\n\nthen it’s just map() and table() again.\n\n(trial_cat_tabs &lt;-\n  map(trial_cat_groups, table)\n )\n\n$sg\n               deft_gender\ndeft_speech_cat female male\n    deft_silent   1305 5019\n    deft_speaks   2251 7296\n    no_speech      811 3887\n\n$so\n               offence_cat\ndeft_speech_cat breakingPeace damage deception kill miscellaneous royalOffences\n    deft_silent           221     28       348  206            52           267\n    deft_speaks           203     22       256   86            76           578\n    no_speech             179     10       477   59           166           327\n               offence_cat\ndeft_speech_cat sexual theft violentTheft\n    deft_silent     67  4975          160\n    deft_speaks     44  7907          375\n    no_speech      313  3126           41\n\n$sv\n               verdict_cat\ndeft_speech_cat guilty notGuilty\n    deft_silent   4576      1748\n    deft_speaks   8077      1470\n    no_speech     3393      1305\n\n$go\n           offence_cat\ndeft_gender breakingPeace damage deception  kill miscellaneous royalOffences\n     female           107     10        81    83           105           312\n     male             496     50      1000   268           189           860\n           offence_cat\ndeft_gender sexual theft violentTheft\n     female     31  3574           64\n     male      393 12434          512\n\n$gv\n           verdict_cat\ndeft_gender guilty notGuilty\n     female   3251      1116\n     male    12795      3407\n\n$ov\n               verdict_cat\noffence_cat     guilty notGuilty\n  breakingPeace    432       171\n  damage            36        24\n  deception        791       290\n  kill             158       193\n  miscellaneous    188       106\n  royalOffences   1016       156\n  sexual           273       151\n  theft          12777      3231\n  violentTheft     375       201\n\n\nRun chi-squared test of independence on all the tables.\n\nmap(trial_cat_tabs, chisq.test)\n\n$sg\n\n    Pearson's Chi-squared test\n\ndata:  .x[[i]]\nX-squared = 77.028, df = 2, p-value &lt; 2.2e-16\n\n\n$so\n\n    Pearson's Chi-squared test\n\ndata:  .x[[i]]\nX-squared = 1589.5, df = 16, p-value &lt; 2.2e-16\n\n\n$sv\n\n    Pearson's Chi-squared test\n\ndata:  .x[[i]]\nX-squared = 451.34, df = 2, p-value &lt; 2.2e-16\n\n\n$go\n\n    Pearson's Chi-squared test\n\ndata:  .x[[i]]\nX-squared = 281.47, df = 8, p-value &lt; 2.2e-16\n\n\n$gv\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  .x[[i]]\nX-squared = 40.832, df = 1, p-value = 1.659e-10\n\n\n$ov\n\n    Pearson's Chi-squared test\n\ndata:  .x[[i]]\nX-squared = 480.73, df = 8, p-value &lt; 2.2e-16"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TILs and Things",
    "section": "",
    "text": "R code, mostly."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Sharon Howard"
  },
  {
    "objectID": "notes/note-summarise-across-20250804.html",
    "href": "notes/note-summarise-across-20250804.html",
    "title": "summarise() and across()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-summarise-across-20250804.html#includes",
    "href": "notes/note-summarise-across-20250804.html#includes",
    "title": "summarise() and across()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-summarise-across-20250804.html#notes",
    "href": "notes/note-summarise-across-20250804.html#notes",
    "title": "summarise() and across()",
    "section": "Notes",
    "text": "Notes\n\nI’ve been using across() with mutate() since forever but didn’t twig I could use it with summarise() as well!"
  },
  {
    "objectID": "notes/note-summarise-across-20250804.html#examples",
    "href": "notes/note-summarise-across-20250804.html#examples",
    "title": "summarise() and across()",
    "section": "Examples",
    "text": "Examples\n\ncount NAs in multiple columns.\n\nbear in mind this won’t handle 0s (named_petrs) as NAs.\n\ncheshire_petitions |&gt;\n  summarise(across(everything(), ~sum(is.na(.)) )) |&gt;\n  # result will be very wide; use pivot_longer to make it more readable and sortable.\n  pivot_longer(everything(), names_to = \"var\", values_to = \"n\") |&gt;\n  arrange(-n)\n\n# A tibble: 12 × 2\n   var                 n\n   &lt;chr&gt;           &lt;int&gt;\n 1 subtopic          338\n 2 repository        321\n 3 petition_gender   100\n 4 abstract           22\n 5 petition_id         0\n 6 year                0\n 7 topic               0\n 8 petition_type       0\n 9 named_petrs         0\n10 response            0\n11 petitioner          0\n12 reference           0\n\n# I'm not sure there should be so many NAs in repository!\n\n\nmultiple columns and multiple functions (using list())\n\n\n# dataset in historydata\npaulist_missions |&gt;\n  # there are some NAs hiding somewhere, get rid. \n  drop_na(confessions, converts) |&gt;\n  summarise(across(c(duration_days, confessions, converts), \n                   list(mean = mean, med = median)))\n\n# A tibble: 1 × 6\n  duration_days_mean duration_days_med confessions_mean confessions_med\n               &lt;dbl&gt;             &lt;int&gt;            &lt;dbl&gt;           &lt;int&gt;\n1               9.56                 8            1761.            1100\n# ℹ 2 more variables: converts_mean &lt;dbl&gt;, converts_med &lt;int&gt;\n\n\n\nand add group_by\n\n\npaulist_missions |&gt;\n  drop_na(confessions, converts) |&gt;\n  group_by(order) |&gt;\n  summarise(across(c(duration_days, confessions, converts), \n                   list(mean = mean, med = median))) |&gt;\n  ungroup()\n\n# A tibble: 2 × 7\n  order    duration_days_mean duration_days_med confessions_mean confessions_med\n  &lt;chr&gt;                 &lt;dbl&gt;             &lt;dbl&gt;            &lt;dbl&gt;           &lt;dbl&gt;\n1 Paulist                9.46                 8            1741.            1070\n2 Redempt…              10.5                 10            1936.            1375\n# ℹ 2 more variables: converts_mean &lt;dbl&gt;, converts_med &lt;dbl&gt;"
  },
  {
    "objectID": "notes/note-summarise-across-20250804.html#resources",
    "href": "notes/note-summarise-across-20250804.html#resources",
    "title": "summarise() and across()",
    "section": "Resources",
    "text": "Resources\n\nacross doc\nwhy I love across"
  },
  {
    "objectID": "notes/note-vector-deframe-20250805.html",
    "href": "notes/note-vector-deframe-20250805.html",
    "title": "make paired vectors from a DF with deframe()",
    "section": "",
    "text": "library(scales)\nsource(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-vector-deframe-20250805.html#includes",
    "href": "notes/note-vector-deframe-20250805.html#includes",
    "title": "make paired vectors from a DF with deframe()",
    "section": "",
    "text": "library(scales)\nsource(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-vector-deframe-20250805.html#notes",
    "href": "notes/note-vector-deframe-20250805.html#notes",
    "title": "make paired vectors from a DF with deframe()",
    "section": "Notes",
    "text": "Notes\n\ni’ve spent too much time making paired vectors by hand [ ie: c(“key1”=“value1”, “key2”=“value2”) ]\noften for use in ggplot scale_colour_manual but other uses eg in str_replace_all\nan easier way to do this with two columns in a dataframe using tibble::deframe()\nthen it’s easy to use the data you’re actually working with to create the vector"
  },
  {
    "objectID": "notes/note-vector-deframe-20250805.html#examples",
    "href": "notes/note-vector-deframe-20250805.html#examples",
    "title": "make paired vectors from a DF with deframe()",
    "section": "Examples",
    "text": "Examples\nadd a vector of hand-picked colours\n\ncheshire_petitions &lt;-\ncheshire_petitions |&gt;\n  mutate(petition_type = str_remove(petition_type, \" *on behalf\")) \n\ntype_colours &lt;-\n  cheshire_petitions |&gt;\n  count(petition_type) |&gt;\n  # make sure you have things in the order you want\n  # and numbers of things need to match!\n  mutate(colour = c(\"#EE8866\", \"#EEDD88\", \"#99DDFF\")) |&gt;\n  # for deframe need two columns, `name` (key), `value` (value)\n  select(name=petition_type, value=colour) |&gt;\n  deframe()\n\ntype_colours\n\ncollective   multiple     single \n \"#EE8866\"  \"#EEDD88\"  \"#99DDFF\" \n\n\n\ncheshire_petitions |&gt;\n  count(petition_gender, petition_type) |&gt;\n  filter(!is.na(petition_gender)) |&gt;\n  ggplot(aes(petition_gender, n,  fill=petition_type)) +\n  geom_col() +\n  scale_fill_manual(values = type_colours)\n\n\n\n\n\n\n\n\nYou don’t have to make the vector of colours by hand either; could use something like scales::colour_ramp()\n\nramp &lt;- scales::colour_ramp(c(\"orange\",  \"blue\"))\ncolours5 &lt;- ramp(seq(0, 1, length = 5))\n\ncolours5\n\n[1] \"#FFA500\" \"#E77F64\" \"#C7599A\" \"#9731CD\" \"#0000FF\"\n\n\n\nverdict_colours &lt;-\ncoroners |&gt;\n  count(verdict) |&gt;\n  mutate(colours = colours5) |&gt;\n  select(name=verdict, value=colours) |&gt;\n  deframe()\n\nverdict_colours\n\n    accidental       homicide natural causes        suicide   undetermined \n     \"#FFA500\"      \"#E77F64\"      \"#C7599A\"      \"#9731CD\"      \"#0000FF\" \n\n\n\ncoroners |&gt;\n  count(verdict, gender) |&gt;\n  ggplot(aes(gender, n, fill = verdict)) +\n  geom_col(position = \"fill\") +\n  scale_fill_manual(values = verdict_colours)\n\n\n\n\n\n\n\n\na slightly silly example for str_replace_all() - replace a string with an abbreviated version\n\nverdict_abbs &lt;-\ncoroners |&gt;\n  count(verdict) |&gt;\n  mutate(v = c(\"acc\", \"hom\", \"nat\", \"sui\", \"und\")) |&gt;\n  select(name=verdict, value=v) |&gt;\n  deframe()\n\nverdict_abbs\n\n    accidental       homicide natural causes        suicide   undetermined \n         \"acc\"          \"hom\"          \"nat\"          \"sui\"          \"und\" \n\n\n\ncoroners |&gt;\n  mutate(abb = str_replace_all(verdict, verdict_abbs)) |&gt;\n  count(abb)\n\n# A tibble: 5 × 2\n  abb       n\n  &lt;chr&gt; &lt;int&gt;\n1 acc    1193\n2 hom     131\n3 nat     682\n4 sui     700\n5 und     179"
  },
  {
    "objectID": "notes/note-frequency-tables-baser-20250925.html",
    "href": "notes/note-frequency-tables-baser-20250925.html",
    "title": "frequency tables - multidimensional (base R)",
    "section": "",
    "text": "source(here::here('R/shared.R'))\n\npetitions &lt;-\n  cheshire_petitions |&gt;\n  mutate(petition_type = str_remove(petition_type, \" *on behalf\"))"
  },
  {
    "objectID": "notes/note-frequency-tables-baser-20250925.html#includes",
    "href": "notes/note-frequency-tables-baser-20250925.html#includes",
    "title": "frequency tables - multidimensional (base R)",
    "section": "",
    "text": "source(here::here('R/shared.R'))\n\npetitions &lt;-\n  cheshire_petitions |&gt;\n  mutate(petition_type = str_remove(petition_type, \" *on behalf\"))"
  },
  {
    "objectID": "notes/note-frequency-tables-baser-20250925.html#notes",
    "href": "notes/note-frequency-tables-baser-20250925.html#notes",
    "title": "frequency tables - multidimensional (base R)",
    "section": "Notes",
    "text": "Notes\n\nsee also vcd::structable which does essentially the same thing as ftable (but a base R method may be useful if you don’t want vcd)"
  },
  {
    "objectID": "notes/note-frequency-tables-baser-20250925.html#examples",
    "href": "notes/note-frequency-tables-baser-20250925.html#examples",
    "title": "frequency tables - multidimensional (base R)",
    "section": "Examples",
    "text": "Examples\nif you give table() three variables it will make a list of 2-way tables, breaking down by the last variable.\n\n(petitions_table &lt;- \n   table(petitions$topic, petitions$petition_gender, petitions$petition_type) )\n\n, ,  = collective\n\n                    \n                      f fm  m\n  alehouse            0  0  1\n  charitable brief    0  0  1\n  cottage             1  0  1\n  dissenting worship  0  0  0\n  employment          0  0  0\n  imprisoned debtors  0  0  0\n  litigation          3  0  2\n  military relief     0  0  2\n  officeholding       0  0  0\n  other               0  0  0\n  paternity           0  0  0\n  poor relief         0  0  1\n  rates               0  0  0\n\n, ,  = multiple\n\n                    \n                      f fm  m\n  alehouse            0  0  0\n  charitable brief    1  1  0\n  cottage             1  7  3\n  dissenting worship  0  0  3\n  employment          0  0  1\n  imprisoned debtors  0  0  0\n  litigation          1 13 15\n  military relief     0  0  0\n  officeholding       0  0  4\n  other               0  0  1\n  paternity           0  2  2\n  poor relief         0  4  1\n  rates               0  0 13\n\n, ,  = single\n\n                    \n                      f fm  m\n  alehouse            2  0 11\n  charitable brief    0  0  9\n  cottage            17  0 60\n  dissenting worship  0  0  2\n  employment          6  0  8\n  imprisoned debtors  0  0  1\n  litigation         31  0 97\n  military relief     7  0 21\n  officeholding       0  0 12\n  other               4  0  8\n  paternity          36  0 20\n  poor relief        20  0 34\n  rates               2  0 20\n\n\nxtabs does the same thing\n\nxtabs(~ topic + petition_gender + petition_type, data=petitions) \n\n, , petition_type = collective\n\n                    petition_gender\ntopic                 f fm  m\n  alehouse            0  0  1\n  charitable brief    0  0  1\n  cottage             1  0  1\n  dissenting worship  0  0  0\n  employment          0  0  0\n  imprisoned debtors  0  0  0\n  litigation          3  0  2\n  military relief     0  0  2\n  officeholding       0  0  0\n  other               0  0  0\n  paternity           0  0  0\n  poor relief         0  0  1\n  rates               0  0  0\n\n, , petition_type = multiple\n\n                    petition_gender\ntopic                 f fm  m\n  alehouse            0  0  0\n  charitable brief    1  1  0\n  cottage             1  7  3\n  dissenting worship  0  0  3\n  employment          0  0  1\n  imprisoned debtors  0  0  0\n  litigation          1 13 15\n  military relief     0  0  0\n  officeholding       0  0  4\n  other               0  0  1\n  paternity           0  2  2\n  poor relief         0  4  1\n  rates               0  0 13\n\n, , petition_type = single\n\n                    petition_gender\ntopic                 f fm  m\n  alehouse            2  0 11\n  charitable brief    0  0  9\n  cottage            17  0 60\n  dissenting worship  0  0  2\n  employment          6  0  8\n  imprisoned debtors  0  0  1\n  litigation         31  0 97\n  military relief     7  0 21\n  officeholding       0  0 12\n  other               4  0  8\n  paternity          36  0 20\n  poor relief        20  0 34\n  rates               2  0 20\n\n\nftable() makes a flattened 3-way table\nyou can do it in one step (play around with order of variables…)\n\nftable(petition_type ~ topic + petition_gender, petitions) \n\n                                   petition_type collective multiple single\ntopic              petition_gender                                         \nalehouse           f                                      0        0      2\n                   fm                                     0        0      0\n                   m                                      1        0     11\ncharitable brief   f                                      0        1      0\n                   fm                                     0        1      0\n                   m                                      1        0      9\ncottage            f                                      1        1     17\n                   fm                                     0        7      0\n                   m                                      1        3     60\ndissenting worship f                                      0        0      0\n                   fm                                     0        0      0\n                   m                                      0        3      2\nemployment         f                                      0        0      6\n                   fm                                     0        0      0\n                   m                                      0        1      8\nimprisoned debtors f                                      0        0      0\n                   fm                                     0        0      0\n                   m                                      0        0      1\nlitigation         f                                      3        1     31\n                   fm                                     0       13      0\n                   m                                      2       15     97\nmilitary relief    f                                      0        0      7\n                   fm                                     0        0      0\n                   m                                      2        0     21\nofficeholding      f                                      0        0      0\n                   fm                                     0        0      0\n                   m                                      0        4     12\nother              f                                      0        0      4\n                   fm                                     0        0      0\n                   m                                      0        1      8\npaternity          f                                      0        0     36\n                   fm                                     0        2      0\n                   m                                      0        2     20\npoor relief        f                                      0        0     20\n                   fm                                     0        4      0\n                   m                                      1        1     34\nrates              f                                      0        0      2\n                   fm                                     0        0      0\n                   m                                      0       13     20\n\n\nor you can give it your list of 2-way tables and it will flatten them into a 3-way. (vcd::structable will do that as well)\n\nftable(petitions_table)\n\n                       collective multiple single\n                                                 \nalehouse           f            0        0      2\n                   fm           0        0      0\n                   m            1        0     11\ncharitable brief   f            0        1      0\n                   fm           0        1      0\n                   m            1        0      9\ncottage            f            1        1     17\n                   fm           0        7      0\n                   m            1        3     60\ndissenting worship f            0        0      0\n                   fm           0        0      0\n                   m            0        3      2\nemployment         f            0        0      6\n                   fm           0        0      0\n                   m            0        1      8\nimprisoned debtors f            0        0      0\n                   fm           0        0      0\n                   m            0        0      1\nlitigation         f            3        1     31\n                   fm           0       13      0\n                   m            2       15     97\nmilitary relief    f            0        0      7\n                   fm           0        0      0\n                   m            2        0     21\nofficeholding      f            0        0      0\n                   fm           0        0      0\n                   m            0        4     12\nother              f            0        0      4\n                   fm           0        0      0\n                   m            0        1      8\npaternity          f            0        0     36\n                   fm           0        2      0\n                   m            0        2     20\npoor relief        f            0        0     20\n                   fm           0        4      0\n                   m            1        1     34\nrates              f            0        0      2\n                   fm           0        0      0\n                   m            0       13     20"
  },
  {
    "objectID": "notes/note-spreadsheets-20250927.html",
    "href": "notes/note-spreadsheets-20250927.html",
    "title": "spreadsheets",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-spreadsheets-20250927.html#includes",
    "href": "notes/note-spreadsheets-20250927.html#includes",
    "title": "spreadsheets",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-spreadsheets-20250927.html#notes",
    "href": "notes/note-spreadsheets-20250927.html#notes",
    "title": "spreadsheets",
    "section": "Notes",
    "text": "Notes\nI’ve accumulated many bits of code for working with spreadsheets (mainly Excel; sometimes ODS), and can never remember how to use them. So this is a page to bring them together."
  },
  {
    "objectID": "notes/note-spreadsheets-20250927.html#examples",
    "href": "notes/note-spreadsheets-20250927.html#examples",
    "title": "spreadsheets",
    "section": "Examples",
    "text": "Examples\n\nread in multiple sheets in an xlsx\nthere are two functions to this\n\nget a list of sheets in a spreadsheet (and name them)\nread in selected sheets one at a time from the list using sheets$sheetname\n\nnb:\n\nI’ve added guess to the second function because read_excel’s default is hardly ever generous enough to deal with the weirdness of historical spreadsheets\njanitor::clean_names() is used for much the same reason. The names of sheets and columns in sheets are frequently hideous.\n\n\nread_all_sheets &lt;- function(path){\n  path |&gt;\n    readxl::excel_sheets() |&gt;\n    set_names() |&gt;\n    clean_names(\"snake\")\n}\n\nread_a_sheet &lt;- function(sheet, path, guess=1000) {\n  path |&gt;\n    readxl::read_excel(sheet = sheet, guess_max = guess) |&gt;\n    clean_names(case=\"snake\") \n}\n\n\napprentices_path &lt;- here::here(\"data/apprenticeship_disputes.xlsx\") \n\n# this will give a bunch of \"New names\" messages if not suppressed\napprentices_sheets &lt;-\n  apprentices_path |&gt;\n  read_all_sheets() |&gt;\n  map(read_a_sheet, path=apprentices_path, guess=10000)\n\napprentices_main_index &lt;-\n  apprentices_sheets$main_index\n\nOccasionally there might be a lot of sheets that you want to get out of a spreadsheet, so the individual sheet$name method would get tedious.\nThe function list2env() can be used to put all of the sheets from the list as separate DFs into your R environment, but use that function very carefully (eg if any of the sheet names are the same as existing objects it’ll overwrite them without any warning).\n\n## list2env(apprentices_sheets, envir = .GlobalEnv)\n\n\n\nsame for ODS spreadsheets\nTODO: this should work but I need to get an .ods file to test it.\n\nread_ods_sheets &lt;- function(path){\n  path |&gt;\n    ods_sheets() |&gt;\n    set_names()\n}\n\nread_ods_sheet &lt;- function(sheet, path) {\n  path |&gt;\n    read_ods(sheet = sheet) |&gt;\n    clean_names(case=\"snake\") \n}\n\n\n\nwrite several DFs to a single spreadsheet, as separate sheets\nThis is quite easy, as several functions for writing spreadsheets will take a list of DFs and put them in separate tabs.\nBut you have to give each element of the list a name.\nYou can do this by hand in list()\n\nlist_of_dfs &lt;-\n  list(\n    \"petitions\"=cheshire_petitions,\n    \"petitioners\"=cheshire_petitioners\n  )\n\nOr you can make a vector of names to assign to the list\n\nlist_of_unnamed_dfs &lt;-\n  list(cheshire_petitions, cheshire_petitioners)\n\nsheet_names &lt;- c(\"petitions\", \"petitioners\")\n\nnames(list_of_unnamed_dfs) &lt;- sheet_names \n\nIf you have a DF that you want to split up by a chosen group column and write each group to a separate sheet in an xlsx, you can use dplyr::group_split() and then purrr::map() to make sheet names based on the column values.\nNB:\n\nIf the column contains NAs, you need to make a separate group_name column turning them into “na” or similar character string.\nYou might need to do some other manipulation if there are non-standard characters in column values, if you want to avoid spaces, etc etc.\n\n\npetitions_split_gender &lt;-\ncheshire_petitions |&gt;\n  mutate(grp_name = if_else(is.na(petition_gender), \"na\", petition_gender)) |&gt;\n  group_split(grp_name)\n\n  petitions_split_gender |&gt;\n    map(~pull(., grp_name)) |&gt;\n    map(~unique(.)) -&gt; names(petitions_split_gender)\n\n# get rid of the extra grp_name col now you've finished with it\npetitions_split_gender &lt;-\npetitions_split_gender |&gt;\n  map(~select(., -grp_name))\n\nThen you just give the list name in the function to write the spreadsheet.\nThis works with several functions\n\nxlsx\n\n\n # writexl::write_xlsx(petitions_split_gender, \n #          \"path/to/petitions_gender.xlsx\", \n #          format_headers=FALSE)\n\n\n # openxlsx::write.xlsx(list_dfs, \n #                      \"path/to/petitions_petitioners.xlsx\", \n #                      colNames=TRUE)\n\n\nods\n\n\n # readODS::write_ods(list_of_unnamed_dfs, \n #                    \"path/to/petitions_petitioners.ods\")\n\nI haven’t tested it with any others.\nIt’s quite easy to functionify if you’ll need to use it repeatedly.\nNB that you have to “embrace” the group name inside the function\n\n# need to make sure the output_folder exists!\n\n# df = dataframe to be split\n# group = grouping column to split on\n# sheetname = name of the spreadsheet (needs to be \"quoted\" in the args?)\n\none_df_split_to_excel &lt;- function(df, group, sheetname){\n  \n  file_name &lt;- paste0(sheetname, \".xlsx\")  \n  file_path &lt;- here::here(\"output_folder\", file_name)\n  \n  # split the df into groups\n  list_dfs &lt;- \n    df |&gt;\n    group_split({{group}})\n  \n  # group name -&gt; list name which will be used as the spreadsheet tab name\n  list_dfs |&gt;\n    purrr::map(~pull(., {{group}})) |&gt;\n    purrr::map(~unique(.)) -&gt;names(list_dfs)\n   \n   # write to spreadsheet\n   writexl::write_xlsx(list_dfs, file_path, format_headers = FALSE)\n}"
  },
  {
    "objectID": "notes/note-spreadsheets-20250927.html#resources",
    "href": "notes/note-spreadsheets-20250927.html#resources",
    "title": "spreadsheets",
    "section": "Resources",
    "text": "Resources\n\nreadxl workflows\nWrite & Read Multiple Excel files with purrr"
  },
  {
    "objectID": "notes/note-na-omit-20250721.html",
    "href": "notes/note-na-omit-20250721.html",
    "title": "filter missing values flexibly with na.omit or drop_na",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-na-omit-20250721.html#includes",
    "href": "notes/note-na-omit-20250721.html#includes",
    "title": "filter missing values flexibly with na.omit or drop_na",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "notes/note-na-omit-20250721.html#notes",
    "href": "notes/note-na-omit-20250721.html#notes",
    "title": "filter missing values flexibly with na.omit or drop_na",
    "section": "Notes",
    "text": "Notes\n\nsometimes you want to get rid of rows that have any missing values\nusual caveats would apply about blanket dropping NAs though!"
  },
  {
    "objectID": "notes/note-na-omit-20250721.html#examples",
    "href": "notes/note-na-omit-20250721.html#examples",
    "title": "filter missing values flexibly with na.omit or drop_na",
    "section": "Examples",
    "text": "Examples\n\nfilter() limitations\nfilter and !is.na - simple but only one variable at a time.\n\njudges100 |&gt; \n  filter(!is.na(name_suffix)) \n\n# A tibble: 10 × 15\n   judge_id name_first name_middle name_last name_suffix birth_date\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1     3518 Gerald     Austin      McHugh    Jr.               1954\n 2     2736 Henry      Harold      Kennedy   Jr.               1948\n 3     1136 Joseph     Chappell    Hutcheson Jr.               1879\n 4     3001 John       Glover      Roberts   Jr.               1955\n 5      660 John       Malcolm     Duhe      Jr.               1933\n 6     2471 Edmund     &lt;NA&gt;        Waddill   Jr.               1855\n 7      931 Ralph      B.          Guy       Jr.               1929\n 8      193 Solomon    &lt;NA&gt;        Blatt     Jr.               1921\n 9      929 George     F.          Gunn      Jr.               1927\n10      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\ncan use filter with if_all to remove rows with any NAs, but it’s quite fiddly - needs if_all, everything, tilde and !is.na(.x)\n\njudges100 |&gt; \n  filter(if_all(everything(), ~ !is.na(.x))) \n\n# A tibble: 3 × 15\n  judge_id name_first name_middle name_last name_suffix birth_date\n     &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n1     1136 Joseph     Chappell    Hutcheson Jr.               1879\n2      929 George     F.          Gunn      Jr.               1927\n3      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\n\n\nna.omit()\nmuch simpler to just na.omit() !\n\njudges100 |&gt;\n  na.omit()\n\n# A tibble: 3 × 15\n  judge_id name_first name_middle name_last name_suffix birth_date\n     &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n1     1136 Joseph     Chappell    Hutcheson Jr.               1879\n2      929 George     F.          Gunn      Jr.               1927\n3      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\nyou can also use it like this to filter on a single column, but idk why you’d want to.\n\njudges100[!is.na(judges100$name_suffix), ]\n\n# A tibble: 10 × 15\n   judge_id name_first name_middle name_last name_suffix birth_date\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1     3518 Gerald     Austin      McHugh    Jr.               1954\n 2     2736 Henry      Harold      Kennedy   Jr.               1948\n 3     1136 Joseph     Chappell    Hutcheson Jr.               1879\n 4     3001 John       Glover      Roberts   Jr.               1955\n 5      660 John       Malcolm     Duhe      Jr.               1933\n 6     2471 Edmund     &lt;NA&gt;        Waddill   Jr.               1855\n 7      931 Ralph      B.          Guy       Jr.               1929\n 8      193 Solomon    &lt;NA&gt;        Blatt     Jr.               1921\n 9      929 George     F.          Gunn      Jr.               1927\n10      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\n\n\ntidyr::drop_na()\n\nmuch easier for a subset of variables\n\nthough it’s simple for everything too\n\njudges100 |&gt;\n  drop_na()\n\n# A tibble: 3 × 15\n  judge_id name_first name_middle name_last name_suffix birth_date\n     &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n1     1136 Joseph     Chappell    Hutcheson Jr.               1879\n2      929 George     F.          Gunn      Jr.               1927\n3      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\nfor a selection, any tidy-select thing should work\n(but you don’t need c() to select multiple variables)\n\njudges100 |&gt;\n  drop_na(name_suffix, death_date)\n\n# A tibble: 4 × 15\n  judge_id name_first name_middle name_last name_suffix birth_date\n     &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n1     1136 Joseph     Chappell    Hutcheson Jr.               1879\n2     2471 Edmund     &lt;NA&gt;        Waddill   Jr.               1855\n3      929 George     F.          Gunn      Jr.               1927\n4      144 David      Owen        Belew     Jr.               1920\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\n\njudges100 |&gt;\n  drop_na(-name_suffix)\n\n# A tibble: 35 × 15\n   judge_id name_first name_middle name_last name_suffix birth_date\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1      432 George     Edward      Cire      &lt;NA&gt;              1922\n 2      188 Charles    Stanley     Blair     &lt;NA&gt;              1927\n 3     2080 Harold     Lyman       Ryan      &lt;NA&gt;              1923\n 4      393 David      Kellogg     Cartter   &lt;NA&gt;              1812\n 5     1136 Joseph     Chappell    Hutcheson Jr.               1879\n 6     2567 Edward     Douglass    White     &lt;NA&gt;              1845\n 7     1337 Kenesaw    Mountain    Landis    &lt;NA&gt;              1866\n 8     3257 Glenni     William     Scofield  &lt;NA&gt;              1817\n 9     2258 John       Emilio      Sprizzo   &lt;NA&gt;              1934\n10     1260 Thomas     Martin      Kennerly  &lt;NA&gt;              1874\n# ℹ 25 more rows\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;\n\n\n\njudges100 |&gt;\n  drop_na(where(is.numeric))\n\n# A tibble: 58 × 15\n   judge_id name_first name_middle name_last name_suffix birth_date\n      &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1      432 George     Edward      Cire      &lt;NA&gt;              1922\n 2      831 John       &lt;NA&gt;        Gayle     &lt;NA&gt;              1792\n 3      188 Charles    Stanley     Blair     &lt;NA&gt;              1927\n 4     2080 Harold     Lyman       Ryan      &lt;NA&gt;              1923\n 5      393 David      Kellogg     Cartter   &lt;NA&gt;              1812\n 6     1136 Joseph     Chappell    Hutcheson Jr.               1879\n 7      661 Edward     &lt;NA&gt;        Dumbauld  &lt;NA&gt;              1905\n 8      573 David      &lt;NA&gt;        Davis     &lt;NA&gt;              1815\n 9     2567 Edward     Douglass    White     &lt;NA&gt;              1845\n10     1337 Kenesaw    Mountain    Landis    &lt;NA&gt;              1866\n# ℹ 48 more rows\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;"
  },
  {
    "objectID": "notes/note-na-omit-20250721.html#resources",
    "href": "notes/note-na-omit-20250721.html#resources",
    "title": "filter missing values flexibly with na.omit or drop_na",
    "section": "Resources",
    "text": "Resources\n\nExclude observations with missing data\nRDocumentation\nHow to Use na.omit in R: A Comprehensive Guide to Handling Missing Values"
  },
  {
    "objectID": "dv/slopegraph.html",
    "href": "dv/slopegraph.html",
    "title": "Slopegraphs",
    "section": "",
    "text": "Slopegraphs are simplified line charts that only plot the change between two points.\nAt its core a ggplot-based slopegraph is just a combined line and scatter chart plotting the two pct points for each group. Then it’s a matter of making adjustments to improve appearance and communication, which can vary a lot from one dataset to another.\n\n\n\nvisualising paired data of some kind, such as “before” and “after” points in time, or comparing a paired category such as male/female.\n\n\n\n\n\nlimits on number of points that can be shown\nworks best where there are a few very clear changes\n\n\n\n\n\nif there are several points with very little change, try drawing attention to the bigger changes by greying out the smallest ones.\nuse colour in different ways (highlight two groups) - or not at all (ATB faceted version)\nadd actual numbers/percentages to the chart and drop scales"
  },
  {
    "objectID": "dv/slopegraph.html#notes",
    "href": "dv/slopegraph.html#notes",
    "title": "Slopegraphs",
    "section": "",
    "text": "Slopegraphs are simplified line charts that only plot the change between two points.\nAt its core a ggplot-based slopegraph is just a combined line and scatter chart plotting the two pct points for each group. Then it’s a matter of making adjustments to improve appearance and communication, which can vary a lot from one dataset to another.\n\n\n\nvisualising paired data of some kind, such as “before” and “after” points in time, or comparing a paired category such as male/female.\n\n\n\n\n\nlimits on number of points that can be shown\nworks best where there are a few very clear changes\n\n\n\n\n\nif there are several points with very little change, try drawing attention to the bigger changes by greying out the smallest ones.\nuse colour in different ways (highlight two groups) - or not at all (ATB faceted version)\nadd actual numbers/percentages to the chart and drop scales"
  },
  {
    "objectID": "dv/slopegraph.html#examples",
    "href": "dv/slopegraph.html#examples",
    "title": "Slopegraphs",
    "section": "Examples",
    "text": "Examples\nusing cheshire petitions in mindseyedata\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(tidyverse)\n\nlibrary(ggthemes)\nlibrary(ggrepel)\ntheme_set(theme_minimal())  \n\nlibrary(mindseyedata)\n\n\n# filter out small numbers of petitions from the 16th and 18th centuries\n# remove some topics with very small numbers to make the chart more readable\n# split 1608-48 and 1658-98. \n# As the two groups aren't exactly the same size, I want percentages of each group rather than numbers. \ncheshire_petitions_topics &lt;-\ncheshire_petitions |&gt;\n  select(petition_id, year, topic) |&gt;\n  filter(between(year, 1600, 1700)) |&gt;\n  filter(n()&gt;20, .by = topic) |&gt; \n  mutate(period = if_else(year&lt;1648, \"1608-48\", \"1658-98\")) |&gt;\n  count(period, topic) |&gt;\n  group_by(period) |&gt;\n  mutate(pct=n/sum(n)) |&gt;\n  ungroup() \n\n# text labels\n# for labels on the left\ncheshire_petitions_p1 &lt;-\ncheshire_petitions_topics |&gt; \n  filter(period==\"1608-48\") |&gt;\n  select(period, topic, pct)\n\n\n# for rankings instead of pct\ncheshire_petitions_topics_rankings &lt;-\ncheshire_petitions_topics |&gt;\n  group_by(period) |&gt;\n  arrange(-n, .by_group = TRUE) |&gt;\n  mutate(r = row_number()) |&gt;\n  ungroup() |&gt;\n  mutate(rank = fct_rev(as.factor(r)))\n\n# two lots of text labels this time\ncheshire_petitions_topics_rankings_p1 &lt;-\ncheshire_petitions_topics_rankings |&gt; \n  filter(period==\"1608-48\")\n\ncheshire_petitions_topics_rankings_p2 &lt;-\ncheshire_petitions_topics_rankings |&gt; \n  filter(period==\"1658-98\")\n\n\nQuestion: were there differences in the distribution of petition topics before and after the Civil Wars and Revolution?\n\ncheshire_petitions_topics |&gt;\n  knitr::kable() |&gt;\n  kableExtra::kable_styling()\n\n\n\n\nperiod\ntopic\nn\npct\n\n\n\n\n1608-48\ncottage\n32\n0.1658031\n\n\n1608-48\nlitigation\n98\n0.5077720\n\n\n1608-48\nmilitary relief\n8\n0.0414508\n\n\n1608-48\npaternity\n22\n0.1139896\n\n\n1608-48\npoor relief\n20\n0.1036269\n\n\n1608-48\nrates\n13\n0.0673575\n\n\n1658-98\ncottage\n55\n0.1845638\n\n\n1658-98\nlitigation\n58\n0.1946309\n\n\n1658-98\nmilitary relief\n22\n0.0738255\n\n\n1658-98\npaternity\n41\n0.1375839\n\n\n1658-98\npoor relief\n58\n0.1946309\n\n\n1658-98\nrates\n64\n0.2147651\n\n\n\n\n\n\npercentages\nA completely untweaked ggplot chart:\n\ncheshire_petitions_topics |&gt;\n  ggplot(aes(x=period, y=pct, group=topic)) +\n  geom_line(aes(colour=topic)) +\n  geom_point(aes(colour=topic))\n\n\n\n\n\n\n\n\na lot of wasted space, unwanted grid lines, and it’s not very easy to match the lines to the labels in the legend.\n\ndrop the legend\nadd text labels right next to the points where they’ll be easier to read.\n\nto avoid overlapping text, use geom_text_repel()\n\noften I only want labels on one side of the chart; if on the left, switch the axis labels to the right.\n\n\n\nCode\np1 &lt;-\ncheshire_petitions_topics |&gt;\n  ggplot(aes(x=period, y=pct, group=topic)) +\n  geom_line(aes(colour=topic)) +\n  geom_point(aes(colour=topic)) +\n  # add text labels on left hand side of the chart\n  geom_text_repel(\n    data=cheshire_petitions_p1,\n    aes(label=topic, colour=topic),\n    nudge_x = -0.6, # adjust space between label and chart\n    size=4, # adjust label size\n    min.segment.length = 0,\n    segment.color = \"lightgrey\",\n    seed = 42,\n    direction = \"y\") +\n  # swap axis labels to the right hand side for better use of space\n  # and make them %ages\n  scale_y_continuous(position = \"right\", labels = percent_format()) +\n  # theme tweaks for appearance\n  theme(legend.position = \"none\", # remove all legends\n        aspect.ratio=4/3 # make chart taller and narrower\n        ) + \n  labs(x=NULL, title=\"Cheshire petitions topics\")\n\n\np1\n\n\n\n\n\n\n\n\n\nfinal tweaks to adjust space and positioning\n\np1 +\n  # better colours (from ggthemes package)\n  scale_colour_ptol() +\n  # reduce unwanted space around the chart\n  scale_x_discrete(expand = c(0.1, 0, 0.15, 0)) + \n  # remove unwanted lines\n  theme(panel.border = element_blank(), \n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y=element_blank(),\n        axis.ticks = element_blank()) + \n  labs(y=\"% of petitions\")\n\n\n\n\n\n\n\n\nSo I can see there were some major changes between the two periods: petitions about litigation declined massively, while petitions about rates (taxes, etc) and poor relief increased quite a bit, though less dramatically. The other categories changed only slightly.\n\n\nrankings\ntweaks:\n\nchart clearer this time with text labels on both sides of the chart.\nlike it better without the vertical y axis lines.\n\n\n\nCode\np2 &lt;-\ncheshire_petitions_topics_rankings |&gt;\n  ggplot(aes(x=period, y=rank, group=topic)) +\n  geom_line(aes(colour=topic)) +\n  geom_point(aes(colour=topic)) +\n  # don't need to worry about overlapping labels this time\n  # text labels for 1608-48 on left hand side\n  geom_text(data = cheshire_petitions_topics_rankings_p1, \n            aes(label=topic, colour = topic),\n            nudge_x = -0.08, hjust=\"right\") +\n  # and for 1658-98 on the right\n  geom_text(data = cheshire_petitions_topics_rankings_p2, \n            aes(label=topic, colour = topic),\n            nudge_x = 0.08, hjust=\"left\") +\n  # rank numbers as labels, with rounded edges\n  geom_label(aes(label=rank), label.r = unit(0.4, \"lines\") ) +\n  theme(legend.position = \"none\", \n        aspect.ratio=10/9 \n        ) + \n  # remove x axis text/title\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank()) +\n\n  labs(x=NULL, title=\"Cheshire petitions topics\")\n\n\npros and cons: I like the simplicity of the message using rankings, although I think it’s probably sacrificed a bit too much information on this occasion: it underplays large changes (like litigation) and slightly exaggerates small ones (like paternity).\n\np2 +\n  scale_colour_ptol() +\n  scale_x_discrete(expand = c(0.7, 0, 0.7, 0), position = \"top\") + \n  theme(panel.border = element_blank(), \n        panel.grid.minor.y = element_blank(),\n        panel.grid.major = element_blank(), # remove both x & y this time\n        axis.ticks = element_blank()) + \n  # tweak period labels\n  theme(axis.text.x.top = element_text(size=12, margin = margin(10,0,0,0)) )"
  },
  {
    "objectID": "dv/slopegraph.html#resources",
    "href": "dv/slopegraph.html#resources",
    "title": "Slopegraphs",
    "section": "Resources",
    "text": "Resources\nPossible ggplot extensions\n\nnewggslopegraph (CGPfunctions package)\nggslopegraph()\n\nFurther reading\n\nSlopegraphs and R – A pleasant diversion"
  },
  {
    "objectID": "dv/colour-notes.html",
    "href": "dv/colour-notes.html",
    "title": "Colour Notes",
    "section": "",
    "text": "adapted from mindseye post."
  },
  {
    "objectID": "dv/colour-notes.html#notes",
    "href": "dv/colour-notes.html#notes",
    "title": "Colour Notes",
    "section": "",
    "text": "adapted from mindseye post."
  },
  {
    "objectID": "dv/colour-notes.html#swatchplot",
    "href": "dv/colour-notes.html#swatchplot",
    "title": "Colour Notes",
    "section": "swatchplot()",
    "text": "swatchplot()\n\nlibrary(colorspace)\n\ncolorspace swatchplot() function - useful to quickly check palettes, especially custom palettes in ggplot’s scale_*_manual functions.\nhandy with named palettes too; here’s the viridis palette (specifying 8 colours), with simulation of all three of the main colour blindness types to facilitate comparison:\n\nswatchplot(sequential_hcl(8, \"Viridis\"), cvd = TRUE)\n\n\n\n\n\n\n\n\nfor a diverging palette (ColorBrewer):\n\nswatchplot(diverging_hcl(7, \"Purple-Green\"), cvd = TRUE)\n\n\n\n\n\n\n\n\nBut really comes into its own if you want to test and tweak a custom palette. You can just give it a vector of colours.\nThis is a red-green-blue combination. It’s… not good.\n\nswatchplot(c(\"#F8766D\", \"#00BA38\", \"#619CFF\"), cvd=TRUE)\n\n\n\n\n\n\n\n\nSomething better (colours from Paul Tol’s light qualitative scheme).\n\nswatchplot(c(\"#EE8866\", \"#EEDD88\", \"#99DDFF\", \"#44BB99\", \"#BBCC33\"), cvd=TRUE)\n\n\n\n\n\n\n\n\nIf you need a three colour scheme, these are the colours in Paul Tol’s high-contrast palette:\n\nswatchplot(c('#DDAA33', '#BB5566',  \"#0072B2\"), cvd=T)"
  },
  {
    "objectID": "dv/colour-notes.html#cvd_grid",
    "href": "dv/colour-notes.html#cvd_grid",
    "title": "Colour Notes",
    "section": "cvd_grid()",
    "text": "cvd_grid()\nWith colorblindr you can go a step further than the swatchplot and simulate actual visualisations; this may be particularly useful for line graphs and scatterplots where you can get rather different effects than the blocks of colour in bar charts and the like.\n\n# install colorblindr from github\n# remotes::install_github(\"clauswilke/colorblindr\")\n\nlibrary(ggthemes)\nlibrary(colorblindr)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nScatterplot of the Palmers Penguins dat, using the default ggplot colour palette (as a general rule: don’t do this; it’s ugly as well as being abysmal for the colourblind).\n\npp &lt;-\npenguins |&gt;\n  dplyr::filter(!is.na(sex) ) |&gt;\n  ggplot(aes(bill_length_mm, bill_depth_mm, colour = species)) +\n  geom_point()\n\npp\n\n\n\n\n\n\n\n\nSimulations:\n\nR default colours\n\n\ncvd_grid(pp)\n\n\n\n\n\n\n\n\n\nthe Okabe-Ito colorblind palette in ggthemes\n\n\ncvd_grid(pp + scale_colour_colorblind())\n\n\n\n\n\n\n\n\n\nthe Paul Tol palette in ggthemes:\n\n\ncvd_grid(pp + scale_colour_ptol())"
  },
  {
    "objectID": "dv/colour-notes.html#more-resources",
    "href": "dv/colour-notes.html#more-resources",
    "title": "Colour Notes",
    "section": "more resources",
    "text": "more resources\nUseful tools:\n\nViz Palette\nAn interactive guide to color and contrast\nCoblis color blindness simulator\n\nBlog posts etc:\n\nDatawrapper blog has a great ongoing series of posts, including several specifically on color blindness\n\nColor in data vis category\nColor blindness: Part 1\nColor blindness: Part 2\nColor blindness: Part 3\n\nQuickly assessing colour palettes\nCrafting an effective data visualization color palette (Observable)\nColoring in R’s blind spot\nWorking with colours in R\n\nSome R packages:\n\nprismatic - “The goal of prismatic is to provide color manipulation tools in R, in an intuitive, low-dependency and functional way”\npaleteer - “The goal of paletteer is to be a comprehensive collection of color palettes in R using a common interface”\nkhroma - “an implementation of Okabe and Ito, Tol and Crameri color schemes”\nColors for all - “palettes from several popular and lesser known color palette series… scored on several aspects”\n\nOkabe and Ito:\n\nColor universal design: How to make figures and presentations that are friendly to Colorblind people\nalso: the Okabe and Ito palette as hex values\n\nPaul Tol:\n\nPaul Tol’s notes\n\nBeyond colour blindness, I’ve been reading Jonathan Godfrey’s work for blind R users:\n\nBrailleR [R package]\nStatistical software and blind users [resource]"
  },
  {
    "objectID": "dv/sparklines.html",
    "href": "dv/sparklines.html",
    "title": "Sparklines",
    "section": "",
    "text": "Sparklines are miniature visualisations with very minimal contextual info: features like axis labels and gridlines are usually stripped out. Sometimes you’ll see a single sparkline, but they’re often used in multiples, or embedded in tables.\n\n\n\nProbably the most common use is to show and/or compare trends over time\nThe examples here don’t have very many lines, but they can be scaled up to show dozens of categories at once.\ncan be very effective using a single sparkline inline next to text, or inside tables\n\n\n\n\n\nlose sense of scale\nloss of precision\n\n\n\n\nthe most common form is (as the name suggests) the line chart, but other types of chart like bar charts are sometimes used."
  },
  {
    "objectID": "dv/sparklines.html#notes",
    "href": "dv/sparklines.html#notes",
    "title": "Sparklines",
    "section": "",
    "text": "Sparklines are miniature visualisations with very minimal contextual info: features like axis labels and gridlines are usually stripped out. Sometimes you’ll see a single sparkline, but they’re often used in multiples, or embedded in tables.\n\n\n\nProbably the most common use is to show and/or compare trends over time\nThe examples here don’t have very many lines, but they can be scaled up to show dozens of categories at once.\ncan be very effective using a single sparkline inline next to text, or inside tables\n\n\n\n\n\nlose sense of scale\nloss of precision\n\n\n\n\nthe most common form is (as the name suggests) the line chart, but other types of chart like bar charts are sometimes used."
  },
  {
    "objectID": "dv/sparklines.html#examples",
    "href": "dv/sparklines.html#examples",
    "title": "Sparklines",
    "section": "Examples",
    "text": "Examples\nUsing Old Bailey Online data I’ve extracted using the OBO API.\n\n\nCode\nlibrary(snakecase)\nlibrary(readr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# annual counts of offence categories (counted by trial)\nyear_offence_category_csv &lt;-\n  read_csv(here::here(\"data/year-offence_category-bytrial-20250531.csv\"))\n                       \n# the data from the API is in wide format; make it long format for ggplot\nyear_offence_category_long &lt;-\nyear_offence_category_csv |&gt;\n  rename(year=key) |&gt;\n  select(-doc_count) |&gt;\n  pivot_longer(-year, names_to = \"offence\", values_to = \"count\") |&gt;\n  # some filtering (early years are often incomplete)\n  filter(between(year, 1720, 1899) & offence !=\"miscellaneous\") |&gt;\n  # make camelCase category names look better as labels\n  mutate(offence = to_snake_case(offence, sep_out = \" \"))\n\n\n\nbasic method in ggplot2\nmake a faceted chart and then strip out all or most of the usual annotation.\ncaveat - there are big differences in scale, so that needs to be handled with care!\n\nyear_offence_category_long |&gt;\n  ggplot(aes(year, count)) +\n  geom_line() +\n  # strip.position moves labels to right\n  facet_wrap(~offence, ncol=1, scales=\"free\", strip.position=\"right\") +\n  # expand to reduce/remove margin between the line and strip label\n  scale_x_continuous(expand = c(0,2)) +\n  # theme_void is a blank theme - removes axis text, gridlines etc.\n  theme_void() +\n  # tweak positioning of labels\n  theme(strip.text.y = element_text(angle = 0, vjust=0.4, hjust=0)) +\n  # add a little space below plot title; default feels cramped. \n  theme(plot.title = element_text(margin = margin(0,0,13,0))) +\n  # a cheat to give more of a miniaturised effect\n  theme(aspect.ratio = 1/6) +\n  labs(title=\"OBO offence categories per year 1720-1899\")\n\n\n\n\n\n\n\n\nsome tweaks to the appearance of the plot using ggplot theme() functionality.\n\nyear_offence_category_long |&gt;\n  ggplot(aes(year, count)) +\n  geom_line() +\n  facet_wrap(~offence, ncol=1, scales=\"free\", strip.position=\"right\") +\n  scale_x_continuous(expand = c(0,1)) +\n  # more selective removal of unwanted text, lines etc for more control\n  # theme_minimal is a lightweight theme\n  theme_minimal() +\n  # remove text and title from both axes\n  theme(axis.text = element_blank(),\n        axis.title = element_blank()\n        ) +\n  # remove grid lines\n  theme(panel.grid = element_blank()) +\n  # remove tick marks.\n  theme(axis.ticks  = element_blank())  +\n  # facets background (fill) / border (colour) \n  # a light border gives a bit of definition.\n  theme(panel.background = element_rect(colour = \"#f0f0f0\")) + \n  # ditto for strip labels background/border\n  theme(strip.background = element_rect(fill = \"#f0f0f0\", colour = \"#f0f0f0\")) + \n  theme(strip.text.y = element_text(angle = 0, vjust=0.5, hjust=0)) +\n  theme(plot.title = element_text(margin = margin(0,0,13,0))) +\n  theme(aspect.ratio = 1/6) +\n  labs(title=\"OBO offence categories per year 1720-1899\")\n\n\n\n\n\n\n\n\nExample using data from the historydata package, for a change.\n\nhistorydata::us_state_populations |&gt;  \n  filter(str_detect(state, \"^A\")) |&gt;  \n  ggplot(aes(year, population)) + \n  geom_line() + \n  # strip.position=right rotates the label 90 deg. fix angle in theme. \n  facet_wrap(~state, ncol=1, scales=\"free\", strip.position=\"right\") + \n  # expand to reduce/remove margin between the sparkline and panel label \n  scale_x_continuous(expand = c(0,0)) + \n# strip out unwanted text, lines etc \n# theme_void strips everything.  \n#  theme_void() + \n# or do components separately. \n  theme_minimal() + \n  # Remove text and title from both axes \n  theme(axis.text = element_blank()) + \n  theme(axis.title = element_blank()) + \n  # remove grid lines \n  theme(panel.grid = element_blank()) + \n  # Remove tick marks. \n  theme(axis.ticks  = element_blank())  + \n# end of removing stuff \n  # facets \n  # background (fill) and border (colour) for each facet. a light border gives a bit of definition \n  theme(panel.background = element_rect(colour = \"#f0f0f0\")) +  \n  # ditto for strip labels background/border \n  # is there a way to get rid of the border line *between* facet and strip i wonder? \n  theme(strip.background = element_rect(colour = \"#f0f0f0\")) +  \n  # makes the labels horizontal when they're on the side \n  theme(strip.text.y = element_text(angle = 0, vjust=0.5, hjust=0)) + \n  # use this to see exactly where panel borders are...  how is it different from panel.background above? not the whole thing \n  #theme(panel.border = element_rect(linetype = \"dashed\", fill = NA)) + # if you use fill covers the line, v odd... \n  # nb this is per facet! useful with 1 col, prob not with 2 col \n  theme(aspect.ratio = 1/10) +  \n  # add a tiny bit of space below the title  \n  theme(plot.title = element_text(margin = margin(0,0,15,0))) + \n  labs(title=\"US states population 1820-2020\") \n\n\n\n\n\n\n\n\nAnother highlighting option is to add background to area beneath the line (with ggplot::geom_area()).\n\nyear_offence_category_long |&gt;\n  ggplot(aes(year, count)) +\n  geom_line() +\n  geom_area(alpha=0.1, fill=\"purple\") + \n  facet_wrap(~offence, ncol=1, scales=\"free\", strip.position=\"right\") +\n  scale_x_continuous(expand = c(0,1)) +\n  theme_void() +\n  theme(strip.text.y = element_text(angle = 0, vjust=0.4, hjust=0)) +\n  theme(plot.title = element_text(margin = margin(0,0,13,0))) +\n  theme(aspect.ratio = 1/6) +\n  labs(title=\"OBO offence categories per year 1720-1899\") \n\n\n\n\n\n\n\n\n\n\nggspark\nggspark adds some visual statistical enhancements.\n\nlibrary(ggspark)\n\n\nthe package has two main functions: stat_interquartilerange() that draws a geom_ribbon() between the 1st and 3rd quartile of the variable in the y axis, and stat_sparklabels() that draws points or text labels in the beginning, min, max, and end points of the variable in the y axis.\n\nI didn’t find the ribbon particularly illuminating so I’ve left it out, but the text labels reintroduce some useful context.\nBut it’s a bit cluttered and would get worse with more categories. 0 is the min for most of the categories, so is it that useful anyway? It might be more helpful to have just the starting and max count for each line (I’m not sure how to use geom_text in facets, so that’ll be something to investigate.)\n\nyear_offence_category_long |&gt;\n  ggplot(aes(year, count, group=offence)) +\n  # stat_interquartilerange(geom = \"ribbon\",\n  #                         show.legend = FALSE) +\n  geom_line() +\n  stat_sparklabels(geom = \"text\",\n                   show.legend = FALSE) +\n  scale_colour_manual(\"\", values = c(\"grey8\", '#BB5566',  \"#0072B2\" )) +\n  # expand also stops the text from being clipped\n  scale_y_continuous(expand = c(0.2,1)) +\n  facet_grid(offence~., scales=\"free\") +\n  theme_minimal() + \n  theme(strip.text.y = element_text(angle = 0, vjust=0.5, hjust=0)) +\n  theme(panel.grid = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        axis.text = element_blank()) +\n  theme(aspect.ratio = 1/10) +\n  labs(title = \"OBO offence categories per year 1720-1899\")\n\n\n\n\n\n\n\n\n\n\nreactable + sparkline\nAnother common use of sparklines is to have them embedded in a table. Here, I’ll use the more interactive options available with the reactable and sparkline packages.\nThis time the counts data needs to be summarised in a list column.\n\nyear_offence_category_group &lt;-\nyear_offence_category_long |&gt;\n  group_by(offence) |&gt;\n  # make absolutely sure they're in the right order\n  arrange(year, .by_group = TRUE) |&gt;\n  summarise(offence_count = list(count)) |&gt;\n  ungroup() \n\nA nice feature with this is that the annual counts are in tooltips on hovering over the chart. But the defaults are not quite what I’m after…\n\nlibrary(reactable)\nlibrary(sparkline)\n\nreactable(\n  year_offence_category_group,\n  columns = list(\n    offence_count = colDef(name = \"annual trend 1720-1899\",\n      cell = function(value, index){\n        sparkline(year_offence_category_group$offence_count[[index]] )\n       })\n  )\n)\n\n\n\n\n\n \nHowever, like many R htmlwidgets packages, the underlying javascript library has loads of customisation options. I’m not wild about the format for the tooltips either, and there are probably options for those as well. But I’ll leave it at that for now.\n\nreactable(\n  year_offence_category_group,\n  columns = list(\n    offence = colDef(maxWidth = 150),\n    offence_count = colDef(name = \"annual trend 1720-1899\",\n      cell = function(value, index){\n        sparkline(year_offence_category_group$offence_count[[index]], \n               width=300, \n               height = 40,\n               fillColor = \"#DDAA33\",\n               lineColor = \"black\" \n               )\n       })\n  )\n)\n\n\n\n\n\n \nThe sparkline package can also be used independently of reactable, so for example, single sparklines can be embedded in text.\n\ntheft &lt;- year_offence_category_long |&gt; filter(offence==\"theft\")\n\nkilling &lt;- year_offence_category_long |&gt; filter(offence==\"kill\")\n\nHere’s a sparkline of theft cases   and here’s one for killing   in the text.\n\n\ngt\nThe gt package offers an alternative, though I think it’s less customisable.\nAs with the reactable/sparkline version, the defaults are meh, and some twiddling is needed. I’m not sure if there are additional options for the sparkline function, and it doesn’t have tooltips.\n\nlibrary(gt)\nlibrary(gtExtras) # for the sparkline function\n\nyear_offence_category_group |&gt;\n  gt() |&gt;\n  gt_plt_sparkline(offence_count, fig_dim = c(10,100), same_limit = FALSE, type = \"shaded\", label=FALSE) |&gt;\n  cols_label(offence_count = \"annual trends 1720-1899\") |&gt;\n  cols_width(offence ~ px(150))\n\n\n\n\n\n\n\noffence\nannual trends 1720-1899\n\n\n\n\nbreaking peace\n\n\n\n   \n\n\n\ndamage\n\n\n\n   \n\n\n\ndeception\n\n\n\n   \n\n\n\nkill\n\n\n\n   \n\n\n\nroyal offences\n\n\n\n   \n\n\n\nsexual\n\n\n\n   \n\n\n\ntheft\n\n\n\n   \n\n\n\nviolent theft"
  },
  {
    "objectID": "dv/sparklines.html#resources",
    "href": "dv/sparklines.html#resources",
    "title": "Sparklines",
    "section": "Resources?",
    "text": "Resources?"
  },
  {
    "objectID": "dv/heatmaps.html",
    "href": "dv/heatmaps.html",
    "title": "Heatmaps",
    "section": "",
    "text": "I make ggplot heatmaps with geom_raster() quite often but can never remember how to do them.\nPlus I could probably be doing them better… so this is WIP.\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(patchwork)\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggridges)\n\nlibrary(mindseyedata)\nlibrary(historydata)\n\n\n\nhp_cat_injury &lt;-\n  sab_hp_injuries |&gt; \n  filter(!injury_category %in% c(\"other\", \"injury\")) |&gt;\n  select(-injury, -body_location) |&gt;\n  mutate(collection=\"HP\")\n\n\ndp_cat_injury &lt;-\nsab_dp_injuries |&gt; \n  filter(!injury_category %in% c(\"other\", \"injury\", \"chronic\")) |&gt;\n  select(-injury, -body_location) |&gt;\n  mutate(collection=\"DP\")\n\n\nfacial_injuries &lt;-\nbind_rows(\n    hp_cat_injury,\n    dp_cat_injury\n  ) |&gt;\n  filter(injury_region %in% \"head\") |&gt;\n  mutate(facial_location = case_when(\n    injury_location==\"head\" ~ NA, \n    injury_location %in% c(\"skull\", \"hair\", \"scalp\", \"cranium\", \"occiput\", \"temporal\") ~ NA, \n    str_detect(injury_location, \"\\\\bcheek\") ~ \"cheek\",\n    str_detect(injury_location, \"^eye|eyebrow\") ~ \"eye\",\n     str_detect(injury_location, \"\\\\b(chin)\\\\b\") ~ \"chin\", # ?\n     injury_location==\"maxilla\" ~ \"jaw\",\n     injury_location %in% c(\"temple\", \"forehead\") ~ \"forehead\",\n     str_detect(injury_location, \"^(nasal|nos)\") ~ \"nose\",\n     str_detect(injury_location, \"\\\\b(mouth|tongue)\") ~ \"mouth\",\n     str_detect(injury_location, \"\\\\b(lower lip|upper lip|top lip|under lip)\\\\b|^lip\\\\b\") ~ \"mouth\",\n     str_detect(injury_location, \"\\\\b(ear)\\\\b\") ~ \"ear\",\n     str_detect(injury_location, \"\\\\bfac\") ~ \"face\",\n    .default = injury_location\n  )) |&gt;\n  filter(!is.na(facial_location))"
  },
  {
    "objectID": "dv/heatmaps.html#notes",
    "href": "dv/heatmaps.html#notes",
    "title": "Heatmaps",
    "section": "",
    "text": "I make ggplot heatmaps with geom_raster() quite often but can never remember how to do them.\nPlus I could probably be doing them better… so this is WIP.\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(patchwork)\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggridges)\n\nlibrary(mindseyedata)\nlibrary(historydata)\n\n\n\nhp_cat_injury &lt;-\n  sab_hp_injuries |&gt; \n  filter(!injury_category %in% c(\"other\", \"injury\")) |&gt;\n  select(-injury, -body_location) |&gt;\n  mutate(collection=\"HP\")\n\n\ndp_cat_injury &lt;-\nsab_dp_injuries |&gt; \n  filter(!injury_category %in% c(\"other\", \"injury\", \"chronic\")) |&gt;\n  select(-injury, -body_location) |&gt;\n  mutate(collection=\"DP\")\n\n\nfacial_injuries &lt;-\nbind_rows(\n    hp_cat_injury,\n    dp_cat_injury\n  ) |&gt;\n  filter(injury_region %in% \"head\") |&gt;\n  mutate(facial_location = case_when(\n    injury_location==\"head\" ~ NA, \n    injury_location %in% c(\"skull\", \"hair\", \"scalp\", \"cranium\", \"occiput\", \"temporal\") ~ NA, \n    str_detect(injury_location, \"\\\\bcheek\") ~ \"cheek\",\n    str_detect(injury_location, \"^eye|eyebrow\") ~ \"eye\",\n     str_detect(injury_location, \"\\\\b(chin)\\\\b\") ~ \"chin\", # ?\n     injury_location==\"maxilla\" ~ \"jaw\",\n     injury_location %in% c(\"temple\", \"forehead\") ~ \"forehead\",\n     str_detect(injury_location, \"^(nasal|nos)\") ~ \"nose\",\n     str_detect(injury_location, \"\\\\b(mouth|tongue)\") ~ \"mouth\",\n     str_detect(injury_location, \"\\\\b(lower lip|upper lip|top lip|under lip)\\\\b|^lip\\\\b\") ~ \"mouth\",\n     str_detect(injury_location, \"\\\\b(ear)\\\\b\") ~ \"ear\",\n     str_detect(injury_location, \"\\\\bfac\") ~ \"face\",\n    .default = injury_location\n  )) |&gt;\n  filter(!is.na(facial_location))"
  },
  {
    "objectID": "dv/heatmaps.html#examples",
    "href": "dv/heatmaps.html#examples",
    "title": "Heatmaps",
    "section": "Examples",
    "text": "Examples\nbasic geom_raster with counts - nicely shows where most facial injuries are located in the DP collection of the Skin and Bone data.\n\nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  filter(collection==\"DP\") |&gt;\n  count(gender, facial_location) |&gt;\n  ggplot(aes(x=facial_location, y=\"\", fill=n)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"DP women\", fill=\"count\") \n\n\n\n\n\n\n\n\nBut I want to compare DP and HP collections and there’s a problem: DP data is much bigger than HP.\n\nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  count(collection, facial_location) |&gt;\n  ggplot(aes(x=facial_location, y=collection, fill=n)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"women\", fill=\"count\") \n\n\n\n\n\n\n\n\nI could use patchwork (and sometimes have) so the scales are independent. But I still can’t compare them directly because there are a couple of categories not present in the HP data. I’d have to do some extra faffing to include the two missing categories.\n\nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  filter(collection==\"HP\") |&gt;\n  count(gender, facial_location) |&gt;\n  ggplot(aes(x=facial_location, y=\"\", fill=n)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"HP women\", fill=\"count\")  +\n  \nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  filter(collection==\"DP\") |&gt;\n  count(gender, facial_location) |&gt;\n  ggplot(aes(x=facial_location, y=\"\", fill=n)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"DP women\", fill=\"count\")  +\n  \nplot_layout(ncol = 1)\n\n\n\n\n\n\n\n\nIt’s simpler and better to normalise the data.\nBut looks like I’ve been doing it all wrong all this time. (well maybe not completely wrong)\nMy usual method: turn each count into a proportion of the total for the group with n/sum(n).\n\nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  count(collection, facial_location) |&gt;\n  group_by(collection) |&gt;\n  mutate(p = n/sum(n)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x=facial_location, y=collection, fill=p)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"women\", fill=\"prop\") \n\n\n\n\n\n\n\n\nBut I’ve discovered the scales rescale function.\nIt rescales the counts from 0 to 1. If I were even slightly less rubbish at statistics I’d have realised this is much better.\n\nfacial_injuries |&gt;\n  filter(gender==\"female\") |&gt;\n  count(collection, facial_location) |&gt;\n  group_by(collection) |&gt;\n  mutate(rescaled = rescale(n)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x=facial_location, y=collection, fill=rescaled)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"women\") \n\n\n\n\n\n\n\n\nThe result in the first version isn’t entirely wrong, but the n/sum(n) methods kind of flattens out the data and it’s much harder to see.\n[nb: look up how to increase space between the legend and label, because when it goes all the way to 1 it looks very tight]\nAn alternative is similar to my original but instead use n/max(n). It’ll give slightly different numbers from rescale but the difference is unlikely to be noticeable in the heatmap.\n\nfacial_injuries |&gt;\n  filter(gender ==\"female\") |&gt;\n  count(collection, facial_location) |&gt;\n  group_by(collection) |&gt;\n  mutate(p = n/max(n)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x=facial_location, y=collection, fill=p)) +\n  geom_raster() +\n  scale_fill_viridis_c() +\n  labs(y=NULL, x=NULL, title = \"women\", fill=\"prop\")"
  },
  {
    "objectID": "dv/heatmaps.html#resources",
    "href": "dv/heatmaps.html#resources",
    "title": "Heatmaps",
    "section": "Resources",
    "text": "Resources\n\nfrom data to vis\nr graph gallery\nmockup blog\nalbert rapp correlation heatmap\nstatology"
  },
  {
    "objectID": "dv/dv-til/pretty-breaks.html",
    "href": "dv/dv-til/pretty-breaks.html",
    "title": "pretty() breaks",
    "section": "",
    "text": "pretty() is a base R function to “compute a sequence of about n+1 equally spaced ‘round’ values which cover the range of the values in x”.\nhandy to tweak breaks inside ggplot scale_*_ functions if you don’t like the ggplot defaults, without having to work anything out for yourself\n\nhelpful SO comment (my emphasis)\n\nthe way pretty works is not easily predictable. I usually remind myself that it was implemented to create reasonable tick marks for charts. In a chart you usually need a good first and last value and equal steps in between…\n\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggridges)\n\nlibrary(mindseyedata)\nlibrary(historydata)"
  },
  {
    "objectID": "dv/dv-til/pretty-breaks.html#notes",
    "href": "dv/dv-til/pretty-breaks.html#notes",
    "title": "pretty() breaks",
    "section": "",
    "text": "pretty() is a base R function to “compute a sequence of about n+1 equally spaced ‘round’ values which cover the range of the values in x”.\nhandy to tweak breaks inside ggplot scale_*_ functions if you don’t like the ggplot defaults, without having to work anything out for yourself\n\nhelpful SO comment (my emphasis)\n\nthe way pretty works is not easily predictable. I usually remind myself that it was implemented to create reasonable tick marks for charts. In a chart you usually need a good first and last value and equal steps in between…\n\n\n\nCode\nlibrary(scales) \nlibrary(janitor) \nlibrary(glue)\nlibrary(tidyverse)\n\nlibrary(ggthemes)\ntheme_set(theme_minimal())  \n\nlibrary(ggridges)\n\nlibrary(mindseyedata)\nlibrary(historydata)"
  },
  {
    "objectID": "dv/dv-til/pretty-breaks.html#examples",
    "href": "dv/dv-til/pretty-breaks.html#examples",
    "title": "pretty() breaks",
    "section": "Examples",
    "text": "Examples\n\n# count of topic for the scale\npetitions_topic &lt;-\n  cheshire_petitions |&gt; \n  count(topic)\n\n(pet_pretty_break &lt;-\n  pretty(petitions_topic$n, n=10))\n\n [1]   0  20  40  60  80 100 120 140 160 180\n\n\n\ncheshire_petitions |&gt;\n  mutate(petition_type = str_remove(petition_type, \" *on behalf\")) |&gt;\n  count(topic, petition_type) |&gt;\n  mutate(topic = fct_rev(topic)) |&gt;\n  ggplot(aes(n, topic, fill = petition_type)) +\n  geom_col() +\n  scale_x_continuous(breaks = pet_pretty_break) +\n  scale_fill_tableau()\n\n\n\n\n\n\n\n\n\nmethodists |&gt;\n  ggplot(aes(year, members_total)) +\n  geom_point() +\n  scale_y_continuous(breaks = pretty(methodists$members_total, n=10)) +\n  scale_x_continuous(breaks = pretty(methodists$year, n=10))\n\n\n\n\n\n\n\n\nUses outside ggplot?"
  },
  {
    "objectID": "dv/dv-til/pretty-breaks.html#more",
    "href": "dv/dv-til/pretty-breaks.html#more",
    "title": "pretty() breaks",
    "section": "More",
    "text": "More\nThe scales package has some fancier axis breaks functions including eg for log scales and date/time scales. To try out some time!"
  },
  {
    "objectID": "dv/dv-til/pretty-breaks.html#resources",
    "href": "dv/dv-til/pretty-breaks.html#resources",
    "title": "pretty() breaks",
    "section": "Resources",
    "text": "Resources\nrdocumentation"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html",
    "href": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html",
    "title": "move legend into an empty ggplot facet to save space",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#includes",
    "href": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#includes",
    "title": "move legend into an empty ggplot facet to save space",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#notes",
    "href": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#notes",
    "title": "move legend into an empty ggplot facet to save space",
    "section": "Notes",
    "text": "Notes\n\nadjust position in guides() and theme()\noriginal TIL and SO is superseded to some extent\n\nPlease use the legend.position.inside argument of theme() instead.\n\n\nlegend.position.inside A numeric vector of length two setting the placement of legends that have the “inside” position."
  },
  {
    "objectID": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#example",
    "href": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#example",
    "title": "move legend into an empty ggplot facet to save space",
    "section": "Example",
    "text": "Example\n\nlibrary(waffle) \n \ncheshire_petitions_responses &lt;- \n  cheshire_petitions |&gt; \n  filter(response!=\"uncertain\") |&gt; \n  # slightly simplified responses - merge non-full grants and merge written rejections \n  mutate(response_ss = case_when( \n    response==\"grant_cond\" ~ \"grant_part\", \n    response %in% c(\"nothing\", \"absent\") ~ \"rejected\", \n    TRUE ~ response \n  )) |&gt; \n  # order of values  \n  mutate(response_ss = fct_relevel(response_ss, \"granted\", \"grant_part\", \"referred\", \"rejected\", \"no_response\")) |&gt;  \n  mutate(period = case_when( \n    year&lt;1600 ~ \"1500s\", \n    year&lt;1630 ~ \"1608-1628\", \n    year&lt;1650 ~ \"1638-1658\", \n    year&lt;1700 ~ \"1668-1698\", \n    year&gt;1700 ~ \"1700s\" \n  ))  \n \ncheshire_petitions_responses |&gt; \n  count(period, response_ss) |&gt; \n    ggplot(aes(fill=response_ss, values=n)) + \n  geom_waffle(colour=\"white\", n_rows = 10, make_proportional = TRUE) +  \n  # can't remember how to fix ordering in waffle... was it something to do with reordering when you make the df, not when doing the ggplot???? not sure. \n  coord_equal() + \n  facet_wrap(~period) + \n    scale_fill_manual(values = c('#2166ac',  '#92c5de',  '#d1e5f0', '#f4a582','#d6604d')) + \n  theme_minimal() + \n  theme_enhance_waffle() + \n  theme(legend.position.inside = c(0.9,0.3) ) + # pretty close, will do for now. \n  # theme(legend.position = c(1,0), legend.justification = c(1,0)) + # correct place but warning \n  guides(fill = guide_legend(title.position = \"top\" , position = \"inside\")) + \n  labs(title=\"Changing responses to Cheshire QS petitions 1573-1798\", fill=\"response\", caption=\"1 square=1% of petitions\")"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#resources",
    "href": "dv/dv-til/til-ggplot-legend-empty-facet-20250630.html#resources",
    "title": "move legend into an empty ggplot facet to save space",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/questions/54438495/shift-legend-into-empty-facets-of-a-faceted-plot-in-ggplot2\nhttps://www.tidyverse.org/blog/2024/02/ggplot2-3-5-0-legends/#placement"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html",
    "href": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html",
    "title": "change legend ordering in geom_waffle for fill",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#includes",
    "href": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#includes",
    "title": "change legend ordering in geom_waffle for fill",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#notes",
    "href": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#notes",
    "title": "change legend ordering in geom_waffle for fill",
    "section": "Notes",
    "text": "Notes\n\nin scale_fill_* use guide = guide_legend(reverse = TRUE)\nlegend order doesn’t actually seem to be a problem any more?\nthen again I’m not keen on the order inside the waffle. but this doesn’t fix that."
  },
  {
    "objectID": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#example",
    "href": "dv/dv-til/til-ggplot-waffle-order-legend-20250630.html#example",
    "title": "change legend ordering in geom_waffle for fill",
    "section": "Example",
    "text": "Example\n\nlibrary(waffle) \nlibrary(ggthemes) \n \n \ncheshire_petitions |&gt; \n  count(petition_gender, response) |&gt; \n  ggplot(aes(fill=response, values=n)) + \n  geom_waffle(colour=\"white\", make_proportional = TRUE, n_rows = 10) + \n  coord_equal() + \n  facet_wrap(~petition_gender) + \n  theme_minimal() + \n  theme_enhance_waffle() + \n  # it does reverse the legend, *without* changing order in waffles. \n  scale_fill_tableau(guide = guide_legend(reverse = TRUE)) \n\n\n\n\n\n\n\n# what happens if you use fct_rev on response_cat ? order in waffles is unchanged but legend is in reverse order \n# cheshire_petitions |&gt; \n#   count(petition_gender, response) |&gt; \n#   mutate(response_cat=fct_rev(response)) |&gt; \n#   ggplot(aes(fill=response_cat, values=n)) + \n#   geom_waffle(colour=\"white\", flip = TRUE, make_proportional = TRUE, n_rows = 10) + \n#   coord_equal() + \n#   facet_wrap(~petition_gender) + \n#   theme_minimal() + \n#   theme_enhance_waffle() + \n#   scale_fill_tableau() \n \n \n# response_cat order in waffles unchanged. legend same order, but colours different! \n# cheshire_petitions |&gt; \n#   count(petition_gender, response) |&gt; \n#   mutate(response_cat = fct_reorder(response, n)) |&gt; \n#   ggplot(aes(fill=response_cat, values=n)) + \n#   geom_waffle(colour=\"white\", flip = TRUE, make_proportional = TRUE, n_rows = 10) + \n#   coord_equal() + \n#   facet_wrap(~petition_gender) + \n#   theme_minimal() + \n#   theme_enhance_waffle() + \n#   scale_fill_tableau()"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html",
    "href": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html",
    "title": "function using ggsave to make TIFF image with specific properties",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#includes",
    "href": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#includes",
    "title": "function using ggsave to make TIFF image with specific properties",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#notes",
    "href": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#notes",
    "title": "function using ggsave to make TIFF image with specific properties",
    "section": "Notes",
    "text": "Notes\n\nuse in the same way as ggsave, immediately after the ggplot\nthis was to make hi quality images for an article\nthen added a download link in the text pointing to the saved file, for the article authors\nupdated: no longer needs type"
  },
  {
    "objectID": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#function",
    "href": "dv/dv-til/til-ggplot-images-save-tiffs-20250630.html#function",
    "title": "function using ggsave to make TIFF image with specific properties",
    "section": "Function",
    "text": "Function\n\nggsave_tif &lt;- function(f, w=10, h=7){ \n  ggsave( \n    f, \n    path = here::here(\"pub_fig\"), # obvsly this folder needs to exist! \n    device = \"tiff\", \n    width = w, \n    height = h, \n    units = \"in\", \n    dpi = 300, \n    #type=\"cairo\", \n    compression=\"lzw\" \n  ) \n}"
  },
  {
    "objectID": "dv/dv-til/ggplot-geom-count.html",
    "href": "dv/dv-til/ggplot-geom-count.html",
    "title": "ggplot geom_count()",
    "section": "",
    "text": "a really neat, quick chart for visualising the relationship between two categorical variables in a dataset.\nworks best with small numbers of variables, not too extreme differences\n[imported from mindseye TILs]\n\n\nlibrary(mindseyedata)\nlibrary(ggplot2)"
  },
  {
    "objectID": "dv/dv-til/ggplot-geom-count.html#notes",
    "href": "dv/dv-til/ggplot-geom-count.html#notes",
    "title": "ggplot geom_count()",
    "section": "",
    "text": "a really neat, quick chart for visualising the relationship between two categorical variables in a dataset.\nworks best with small numbers of variables, not too extreme differences\n[imported from mindseye TILs]\n\n\nlibrary(mindseyedata)\nlibrary(ggplot2)"
  },
  {
    "objectID": "dv/dv-til/ggplot-geom-count.html#examples",
    "href": "dv/dv-til/ggplot-geom-count.html#examples",
    "title": "ggplot geom_count()",
    "section": "Examples",
    "text": "Examples\n\ncoroners |&gt;\n  ggplot(aes(x=verdict, y=gender)) +\n  geom_count()\n\n\n\n\n\n\n\n\n\ncheshire_petitions |&gt;\n  ggplot(aes(x=topic, y=petition_type)) +\n  geom_count()"
  },
  {
    "objectID": "dv/dv-til/ggplot-geom-count.html#resources",
    "href": "dv/dv-til/ggplot-geom-count.html#resources",
    "title": "ggplot geom_count()",
    "section": "resources",
    "text": "resources\n\nR for Data Science\nggplot doc for geom_count()"
  },
  {
    "objectID": "tils/til-subsetting-unique-sort-20250630.html",
    "href": "tils/til-subsetting-unique-sort-20250630.html",
    "title": "make vector of labels from a df column with [[",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-subsetting-unique-sort-20250630.html#includes",
    "href": "tils/til-subsetting-unique-sort-20250630.html#includes",
    "title": "make vector of labels from a df column with [[",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-subsetting-unique-sort-20250630.html#notes",
    "href": "tils/til-subsetting-unique-sort-20250630.html#notes",
    "title": "make vector of labels from a df column with [[",
    "section": "Notes",
    "text": "Notes\n\nsee TIL using filenames to make labels"
  },
  {
    "objectID": "tils/til-subsetting-unique-sort-20250630.html#example",
    "href": "tils/til-subsetting-unique-sort-20250630.html#example",
    "title": "make vector of labels from a df column with [[",
    "section": "Example",
    "text": "Example\n\nunique(cheshire_petitions[[\"topic\"]]) \n\n [1] \"litigation\"         \"cottage\"            \"officeholding\"     \n [4] \"poor relief\"        \"other\"              \"rates\"             \n [7] \"paternity\"          \"military relief\"    \"alehouse\"          \n[10] \"employment\"         \"charitable brief\"   \"dissenting worship\"\n[13] \"imprisoned debtors\"\n\n# can add sort  \nsort(unique(cheshire_petitions[[\"topic\"]])) \n\n [1] \"alehouse\"           \"charitable brief\"   \"cottage\"           \n [4] \"dissenting worship\" \"employment\"         \"imprisoned debtors\"\n [7] \"litigation\"         \"military relief\"    \"officeholding\"     \n[10] \"other\"              \"paternity\"          \"poor relief\"       \n[13] \"rates\"             \n\n# and desc somewhere? hmm then you just get negative numbers. strange. \n#desc(sort(unique(cheshire_petitions[[\"topic\"]])))"
  },
  {
    "objectID": "tils/til-nocode-yaml-anywhere-20250630.html",
    "href": "tils/til-nocode-yaml-anywhere-20250630.html",
    "title": "yaml doesn’t have to be at the start of a rmd document!",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-yaml-anywhere-20250630.html#includes",
    "href": "tils/til-nocode-yaml-anywhere-20250630.html#includes",
    "title": "yaml doesn’t have to be at the start of a rmd document!",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-yaml-anywhere-20250630.html#notes",
    "href": "tils/til-nocode-yaml-anywhere-20250630.html#notes",
    "title": "yaml doesn’t have to be at the start of a rmd document!",
    "section": "Notes",
    "text": "Notes\n\nYou can use inline R code (see Section 3.1) anywhere in an Rmd document, including the YAML metadata section. This means some YAML metadata can be dynamically generated with inline R code, such as the document title.\nIf your title depends on an R variable created later in the document, you may add the title field in a later YAML section,\n\nThe title works in this case because Pandoc can read any number of YAML sections in a document (and merge them)."
  },
  {
    "objectID": "tils/til-nocode-yaml-anywhere-20250630.html#resources",
    "href": "tils/til-nocode-yaml-anywhere-20250630.html#resources",
    "title": "yaml doesn’t have to be at the start of a rmd document!",
    "section": "Resources",
    "text": "Resources\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook/dynamic-yaml.html"
  },
  {
    "objectID": "tils/til-expand-grid-make-pairs-20250630.html",
    "href": "tils/til-expand-grid-make-pairs-20250630.html",
    "title": "create a tibble from all combinations of inputs with expand_grid",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-expand-grid-make-pairs-20250630.html#includes",
    "href": "tils/til-expand-grid-make-pairs-20250630.html#includes",
    "title": "create a tibble from all combinations of inputs with expand_grid",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-expand-grid-make-pairs-20250630.html#notes",
    "href": "tils/til-expand-grid-make-pairs-20250630.html#notes",
    "title": "create a tibble from all combinations of inputs with expand_grid",
    "section": "Notes",
    "text": "Notes\n\nlike complete() but for vectors\ncreates identical pairs (a+a) - filter out if unwanted\n\nalso repeated pairs (a+b and b+a). if you don’t want that, use combn() TIL"
  },
  {
    "objectID": "tils/til-expand-grid-make-pairs-20250630.html#example",
    "href": "tils/til-expand-grid-make-pairs-20250630.html#example",
    "title": "create a tibble from all combinations of inputs with expand_grid",
    "section": "Example",
    "text": "Example\n\nagg_variables_csv &lt;- \n  read_csv(here::here(\"data/agg_variables.csv\"), show_col_types = FALSE) \n \nagg_variables_names &lt;- \nagg_variables_csv$name \n \n \nexpand_grid(rows=agg_variables_names, series=agg_variables_names) |&gt; \n   # filter out a+a \n   filter(rows != series) \n\n# A tibble: 240 × 2\n   rows             series                \n   &lt;chr&gt;            &lt;chr&gt;                 \n 1 offence_category offence_subcategory   \n 2 offence_category plea                  \n 3 offence_category verdict_category      \n 4 offence_category verdict_subcategory   \n 5 offence_category punishment_category   \n 6 offence_category punishment_subcategory\n 7 offence_category defendant_gender      \n 8 offence_category defendant_age         \n 9 offence_category victim_gender         \n10 offence_category victim_age            \n# ℹ 230 more rows"
  },
  {
    "objectID": "tils/til-expand-grid-make-pairs-20250630.html#resources",
    "href": "tils/til-expand-grid-make-pairs-20250630.html#resources",
    "title": "create a tibble from all combinations of inputs with expand_grid",
    "section": "Resources",
    "text": "Resources\n\nhttps://tidyr.tidyverse.org/reference/expand_grid.html"
  },
  {
    "objectID": "tils/til-fill-seq-len-20250630.html",
    "href": "tils/til-fill-seq-len-20250630.html",
    "title": "fill in start-end sequences with seq() or seq_len()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-fill-seq-len-20250630.html#includes",
    "href": "tils/til-fill-seq-len-20250630.html#includes",
    "title": "fill in start-end sequences with seq() or seq_len()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-fill-seq-len-20250630.html#notes",
    "href": "tils/til-fill-seq-len-20250630.html#notes",
    "title": "fill in start-end sequences with seq() or seq_len()",
    "section": "Notes",
    "text": "Notes\n\nif you just want a sequence from 1 by 1, like 1 2 3 4 5, seq_len is more concise\nif you want a sequence incrementing by some other number than 1, seq might be more flexible\nyou can also do maths to seq() !\n\nNote that [seq] dispatches on the class of the first argument irrespective of argument names. This can have unintended consequences if it is called with just one argument intending this to be taken as along.with: it is much better to use seq_along in that case.\n\nsee map2 and seq TIL for more of this\nneed to look at seq_along too\nalso full_seq! (see notes/ how to use complete)\nhttps://tidyr.tidyverse.org/reference/full_seq.html"
  },
  {
    "objectID": "tils/til-fill-seq-len-20250630.html#example",
    "href": "tils/til-fill-seq-len-20250630.html#example",
    "title": "fill in start-end sequences with seq() or seq_len()",
    "section": "Example",
    "text": "Example\n\nc(seq_len(5) ^ 2) # [1]  1  4  9 16 25 \n\n[1]  1  4  9 16 25\n\nseq_len(5) # [1] 1 2 3 4 5 \n\n[1] 1 2 3 4 5\n\nseq(1,901,100) #  [1]   1 101 201 301 401 501 601 701 801 901 \n\n [1]   1 101 201 301 401 501 601 701 801 901\n\nseq(1,901,100) +1 \n\n [1]   2 102 202 302 402 502 602 702 802 902\n\nseq(1,901,100) *2 \n\n [1]    2  202  402  602  802 1002 1202 1402 1602 1802"
  },
  {
    "objectID": "tils/til-fill-seq-len-20250630.html#resources",
    "href": "tils/til-fill-seq-len-20250630.html#resources",
    "title": "fill in start-end sequences with seq() or seq_len()",
    "section": "Resources",
    "text": "Resources\n\nhttps://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html\nhttps://www.rdocumentation.org/packages/base/versions/3.6.2/topics/seq\nhttps://tidyr.tidyverse.org/reference/full_seq.html"
  },
  {
    "objectID": "tils/til-grouping-do-thing-in-groupby-20250630.html",
    "href": "tils/til-grouping-do-thing-in-groupby-20250630.html",
    "title": "create a new grouping column within group_by",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-do-thing-in-groupby-20250630.html#includes",
    "href": "tils/til-grouping-do-thing-in-groupby-20250630.html#includes",
    "title": "create a new grouping column within group_by",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-do-thing-in-groupby-20250630.html#notes",
    "href": "tils/til-grouping-do-thing-in-groupby-20250630.html#notes",
    "title": "create a new grouping column within group_by",
    "section": "Notes",
    "text": "Notes\n\nQ: can you group by (eg) x==“something or other”?\ni think epi handbook is clearer than the dplyr offishul explanation…\n\n\nYou can also create a new grouping column within the group_by() statement. This is equivalent to calling mutate() before the group_by(). For a quick tabulation this style can be handy, but for more clarity in your code consider creating this column in its own mutate() step and then piping to group_by().\n\nso then you can do stuff based on whether a col has some feature or other, if you don’t want to make a column to keep."
  },
  {
    "objectID": "tils/til-grouping-do-thing-in-groupby-20250630.html#example",
    "href": "tils/til-grouping-do-thing-in-groupby-20250630.html#example",
    "title": "create a new grouping column within group_by",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  group_by(topic_grp = if_else(topic==\"litigation\", \"litigation\", \"other\")) |&gt; \n  tally() \n\n# A tibble: 2 × 2\n  topic_grp      n\n  &lt;chr&gt;      &lt;int&gt;\n1 litigation   178\n2 other        435"
  },
  {
    "objectID": "tils/til-grouping-do-thing-in-groupby-20250630.html#resources",
    "href": "tils/til-grouping-do-thing-in-groupby-20250630.html#resources",
    "title": "create a new grouping column within group_by",
    "section": "Resources",
    "text": "Resources\n\nhttps://epirhandbook.com/en/new_pages/grouping.html#new-columns"
  },
  {
    "objectID": "tils/til-filter-not-in-nas-20250630.html",
    "href": "tils/til-filter-not-in-nas-20250630.html",
    "title": "filter with not %in% handles NAs differently from !=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-not-in-nas-20250630.html#includes",
    "href": "tils/til-filter-not-in-nas-20250630.html#includes",
    "title": "filter with not %in% handles NAs differently from !=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-not-in-nas-20250630.html#notes",
    "href": "tils/til-filter-not-in-nas-20250630.html#notes",
    "title": "filter with not %in% handles NAs differently from !=",
    "section": "Notes",
    "text": "Notes\n\nnot %in% doesn’t drop NAs but != does\n\nnb don’t need c() if you only have a single value"
  },
  {
    "objectID": "tils/til-filter-not-in-nas-20250630.html#example",
    "href": "tils/til-filter-not-in-nas-20250630.html#example",
    "title": "filter with not %in% handles NAs differently from !=",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  filter(!petition_gender %in% \"f\") # 481 \n\n# A tibble: 481 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 2        1117  1577 litigat… anti     single                  1 m              \n 3        1118  1587 litigat… anti     single                  1 m              \n 4        1120  1590 litigat… anti     single                  1 m              \n 5        1121  1590 cottage  pro      multiple on …           2 m              \n 6        1122  1590 litigat… anti     collective              0 &lt;NA&gt;           \n 7        1123  1592 officeh… dischar… single                  1 m              \n 8        1124  1592 litigat… anti     single                  1 m              \n 9        1125  1592 cottage  pro      multiple on …           2 m              \n10        1126  1594 litigat… other    collective              0 &lt;NA&gt;           \n# ℹ 471 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\ncheshire_petitions |&gt; \n  filter(petition_gender !=\"f\") # 381 \n\n# A tibble: 381 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1117  1577 litigat… anti     single                  1 m              \n 2        1118  1587 litigat… anti     single                  1 m              \n 3        1120  1590 litigat… anti     single                  1 m              \n 4        1121  1590 cottage  pro      multiple on …           2 m              \n 5        1123  1592 officeh… dischar… single                  1 m              \n 6        1124  1592 litigat… anti     single                  1 m              \n 7        1125  1592 cottage  pro      multiple on …           2 m              \n 8        1127  1594 litigat… pro      multiple                3 fm             \n 9        1128  1594 cottage  pro      single                  1 m              \n10        1129  1594 poor re… pro      single                  1 m              \n# ℹ 371 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-lag-lead-20250630.html",
    "href": "tils/til-lag-lead-20250630.html",
    "title": "previous or next values in a vector",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lag-lead-20250630.html#includes",
    "href": "tils/til-lag-lead-20250630.html#includes",
    "title": "previous or next values in a vector",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-lag-lead-20250630.html#notes",
    "href": "tils/til-lag-lead-20250630.html#notes",
    "title": "previous or next values in a vector",
    "section": "Notes",
    "text": "Notes\n\nwanted to do this more than once and had no idea these existed…\n\nFind the “previous” (lag()) or “next” (lead()) values in a vector. Useful for comparing values behind of or ahead of the current values."
  },
  {
    "objectID": "tils/til-lag-lead-20250630.html#example",
    "href": "tils/til-lag-lead-20250630.html#example",
    "title": "previous or next values in a vector",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n  filter(!is.na(birth_date)) |&gt; # just in case \n  select(birth_date) |&gt; \n  head(10) |&gt; \n  mutate(birth_lag = lag(birth_date), birth_lead=lead(birth_date)) \n\n# A tibble: 10 × 3\n   birth_date birth_lag birth_lead\n        &lt;int&gt;     &lt;int&gt;      &lt;int&gt;\n 1       1922        NA       1954\n 2       1954      1922       1792\n 3       1792      1954       1927\n 4       1927      1792       1923\n 5       1923      1927       1948\n 6       1948      1923       1951\n 7       1951      1948       1962\n 8       1962      1951       1812\n 9       1812      1962       1879\n10       1879      1812         NA"
  },
  {
    "objectID": "tils/til-lag-lead-20250630.html#resources",
    "href": "tils/til-lag-lead-20250630.html#resources",
    "title": "previous or next values in a vector",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/lead-lag.html"
  },
  {
    "objectID": "tils/til-fill-map-seq-20250630.html",
    "href": "tils/til-fill-map-seq-20250630.html",
    "title": "fill out a list from a start to end number",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-fill-map-seq-20250630.html#includes",
    "href": "tils/til-fill-map-seq-20250630.html#includes",
    "title": "fill out a list from a start to end number",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-fill-map-seq-20250630.html#notes",
    "href": "tils/til-fill-map-seq-20250630.html#notes",
    "title": "fill out a list from a start to end number",
    "section": "Notes",
    "text": "Notes\n\nfor data that has start and end columns of some sort, eg birth and death dates\nsee also full_seq and complete notes rmd"
  },
  {
    "objectID": "tils/til-fill-map-seq-20250630.html#example",
    "href": "tils/til-fill-map-seq-20250630.html#example",
    "title": "fill out a list from a start to end number",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n  select(judge_id, persname, birth_date, death_date, birthplace_state, death_state) |&gt; \n  # death NA probably means they're still alive so could make them 2025 or filter out.  \n  # (birth filter is just in case of any NAs) \n  mutate(death_date = if_else(is.na(death_date), 2025, death_date)) |&gt; \n  filter(!is.na(death_date) & !is.na(birth_date)) |&gt; \n  head(10) |&gt; \n  # date will be a list column \n  mutate(date = map2(birth_date, death_date, ~seq(.x, .y, by=1))) |&gt; \n  # unpack each increment onto its own row \n  unnest(date) \n\n# A tibble: 719 × 7\n   judge_id persname    birth_date death_date birthplace_state death_state  date\n      &lt;int&gt; &lt;chr&gt;            &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;       &lt;dbl&gt;\n 1      432 George Cire       1922       1985 TX               TX           1922\n 2      432 George Cire       1922       1985 TX               TX           1923\n 3      432 George Cire       1922       1985 TX               TX           1924\n 4      432 George Cire       1922       1985 TX               TX           1925\n 5      432 George Cire       1922       1985 TX               TX           1926\n 6      432 George Cire       1922       1985 TX               TX           1927\n 7      432 George Cire       1922       1985 TX               TX           1928\n 8      432 George Cire       1922       1985 TX               TX           1929\n 9      432 George Cire       1922       1985 TX               TX           1930\n10      432 George Cire       1922       1985 TX               TX           1931\n# ℹ 709 more rows"
  },
  {
    "objectID": "tils/til-fill-map-seq-20250630.html#resources",
    "href": "tils/til-fill-map-seq-20250630.html#resources",
    "title": "fill out a list from a start to end number",
    "section": "Resources",
    "text": "Resources\n\nhttps://stat.ethz.ch/R-manual/R-devel/library/base/html/seq.html\nhttps://www.rdocumentation.org/packages/base/versions/3.6.2/topics/seq"
  },
  {
    "objectID": "tils/til-strings-accented-characters-20250630.html",
    "href": "tils/til-strings-accented-characters-20250630.html",
    "title": "function to replace accented characters with non-accented",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-strings-accented-characters-20250630.html#includes",
    "href": "tils/til-strings-accented-characters-20250630.html#includes",
    "title": "function to replace accented characters with non-accented",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-strings-accented-characters-20250630.html#notes",
    "href": "tils/til-strings-accented-characters-20250630.html#notes",
    "title": "function to replace accented characters with non-accented",
    "section": "Notes",
    "text": "Notes\n\nto filter/process/match strings containing (inconsistently) accented characters, replacing them using str_trans_general is effective\nstringi::stri_trans_general(x, id=“Latin-ASCII”)\n\nkeep a copy of the original string\nthere are quite a few stri_trans_* functions. should probably investigate further!\nI also learned that rgx to match accented characters is hard and weird…!\nyou really want to avoid trying to match accents with regex!\nsome accented characters work and some that look identical don’t…\nand letters added via the keyboard behave really strangely. i wonder if this is rstudio?\npasted in from loc_name_cln are a bit odd too but they do work.\n(more wtf in the bn rmd)\ndata and documentation https://github.com/Beyond-Notability/bn_r_doc\nfile https://github.com/Beyond-Notability/bn_r_doc/blob/main/loc/outputs/loc_bn_records.json"
  },
  {
    "objectID": "tils/til-strings-accented-characters-20250630.html#example",
    "href": "tils/til-strings-accented-characters-20250630.html#example",
    "title": "function to replace accented characters with non-accented",
    "section": "Example",
    "text": "Example\n\nbn_loc_fromjson &lt;- \n  jsonlite::fromJSON(here::here(\"data/loc_bn_records.json\")) \n# fromJSON simplifies the json (cf read_json) \n \n# unpack to one row per creator per work including bn_id etc. \nloc_creators_works &lt;- \nbn_loc_fromjson |&gt; \n  select(-creators, -keywords, -permalink, -publisher) |&gt; \n  bind_cols( \n    bn_loc_fromjson$creators |&gt; \n      enframe(name=\"row\", value = \"names\")  \n  ) |&gt; \n  unnest(names) \n \n# accents in titles as well as names \nloc_creators_works |&gt; \n  mutate(name_cln = stringi::stri_trans_general(name, id = \"Latin-ASCII\"), \n         title_cln = stringi::stri_trans_general(title, id=\"Latin-ASCII\")) |&gt; \n  select(name, name_cln, title, title_cln) |&gt; \n  filter(name != name_cln | title != title_cln) \n\n# A tibble: 87 × 4\n   name                  name_cln              title                   title_cln\n   &lt;chr&gt;                 &lt;chr&gt;                 &lt;chr&gt;                   &lt;chr&gt;    \n 1 Bozon, Nicole         Bozon, Nicole         Les contes moralisés    Les cont…\n 2 Smith, Lucy Toulmin   Smith, Lucy Toulmin   Les contes moralisés    Les cont…\n 3 Meyer, Paul           Meyer, Paul           Les contes moralisés    Les cont…\n 4 Smith, Joshua Toulmin Smith, Joshua Toulmin English gilds. The ori… English …\n 5 Smith, Lucy Toulmin   Smith, Lucy Toulmin   English gilds. The ori… English …\n 6 Brentano, Lujo        Brentano, Lujo        English gilds. The ori… English …\n 7 Firdawsī.             Firdawsi.             The story-book of the … The stor…\n 8 Gareis, Karl          Gareis, Karl          Patentgesetzgebung: Sa… Patentge…\n 9 Werner, A.            Werner, A.            Patentgesetzgebung: Sa… Patentge…\n10 Osterrieth, Albert    Osterrieth, Albert    Patentgesetzgebung: Sa… Patentge…\n# ℹ 77 more rows"
  },
  {
    "objectID": "tils/til-dates-todays-date-20250630.html",
    "href": "tils/til-dates-todays-date-20250630.html",
    "title": "make and format a current date/datetime, eg for filenames",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-dates-todays-date-20250630.html#includes",
    "href": "tils/til-dates-todays-date-20250630.html#includes",
    "title": "make and format a current date/datetime, eg for filenames",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-dates-todays-date-20250630.html#example",
    "href": "tils/til-dates-todays-date-20250630.html#example",
    "title": "make and format a current date/datetime, eg for filenames",
    "section": "Example",
    "text": "Example\n\n# today() is a lubridate function which just returns the date as yyyy-mm-dd \npaste0(\"filename_\", today(), \".txt\") \n\n[1] \"filename_2025-09-26.txt\"\n\n# \"filename_2025-06-28.txt\" \n \n# wrap in format() to tweak formatting \nformat(today(), \"%Y%m%d\") \n\n[1] \"20250926\"\n\n# base R Sys.Date() works too.  \nformat(Sys.Date(), \"%Y%m%d\")  \n\n[1] \"20250926\"\n\n# or if you wanted a full date-time timestamp \nformat(Sys.Date(), \"%Y%m%d%H%M%S\") \n\n[1] \"20250926000000\""
  },
  {
    "objectID": "tils/til-grouping-dedup-topn-rownumber-20250630.html",
    "href": "tils/til-grouping-dedup-topn-rownumber-20250630.html",
    "title": "slice min/max with row_number, to replace top_n",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dedup-topn-rownumber-20250630.html#includes",
    "href": "tils/til-grouping-dedup-topn-rownumber-20250630.html#includes",
    "title": "slice min/max with row_number, to replace top_n",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-grouping-dedup-topn-rownumber-20250630.html#notes",
    "href": "tils/til-grouping-dedup-topn-rownumber-20250630.html#notes",
    "title": "slice min/max with row_number, to replace top_n",
    "section": "Notes",
    "text": "Notes\n\npreviously done this with top_n; handy for quick deduping or a single row per group\nbut…\n\ntop_n() has been superseded in favour of slice_min()/slice_max(). While it will not be deprecated in the near future, retirement means that we will only perform critical bug fixes, so we recommend moving to the newer alternatives.\n\nwhat are the differences?\nslice_min/max has to have explicit n=\n\ndifferent order?\noriginal with top_n; 1 for the first row, -1 for the last\ncheshire_petitions |&gt;\ngroup_by(topic) |&gt;\ntop_n(1, row_number()) |&gt;\nungroup()\ncheshire_petitions |&gt;\ngroup_by(topic) |&gt;\ntop_n(-1, row_number()) |&gt;\nungroup()"
  },
  {
    "objectID": "tils/til-grouping-dedup-topn-rownumber-20250630.html#example",
    "href": "tils/til-grouping-dedup-topn-rownumber-20250630.html#example",
    "title": "slice min/max with row_number, to replace top_n",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n# this = top_n(-1, rn) BUT sorts in reverse(?) order (I think, NAs confound things a bit) \n  group_by(topic) |&gt; \n  slice_min(n=1, row_number()) |&gt; \n  ungroup() \n\n# A tibble: 13 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1197  1618 alehouse pro      single                  1 m              \n 2        1365  1648 charita… &lt;NA&gt;     single                  1 m              \n 3        1121  1590 cottage  pro      multiple on …           2 m              \n 4        1711  1758 dissent… &lt;NA&gt;     single                  1 m              \n 5        1236  1628 employm… &lt;NA&gt;     single                  1 f              \n 6        1714  1778 impriso… &lt;NA&gt;     single                  1 m              \n 7        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 8        1156  1608 militar… &lt;NA&gt;     single                  1 m              \n 9        1123  1592 officeh… dischar… single                  1 m              \n10        1131  1595 other    passport single                  1 m              \n11        1152  1608 paterni… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n12        1129  1594 poor re… pro      single                  1 m              \n13        1140  1599 rates    anti     collective              0 &lt;NA&gt;           \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\ncheshire_petitions |&gt; \n# this = top_n(1, rn), but reverse order. \n  group_by(topic) |&gt; \n  slice_max(n=1, row_number()) |&gt; \n  ungroup() \n\n# A tibble: 13 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1646  1668 alehouse &lt;NA&gt;     single                  1 m              \n 2        1728  1788 charita… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n 3        1683  1688 cottage  &lt;NA&gt;     single                  1 m              \n 4        1726  1768 dissent… &lt;NA&gt;     multiple                4 m              \n 5        1707  1738 employm… &lt;NA&gt;     single                  1 m              \n 6        1714  1778 impriso… &lt;NA&gt;     single                  1 m              \n 7        1722  1728 litigat… &lt;NA&gt;     multiple                2 fm             \n 8        1654  1678 militar… veteran  single                  1 m              \n 9        1725  1768 officeh… &lt;NA&gt;     multiple                2 m              \n10        1720  1798 other    &lt;NA&gt;     single                  1 m              \n11        1679  1688 paterni… &lt;NA&gt;     single                  1 f              \n12        1712  1778 poor re… &lt;NA&gt;     single                  1 m              \n13        1694  1688 rates    &lt;NA&gt;     collective              0 &lt;NA&gt;           \n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-grouping-dedup-topn-rownumber-20250630.html#resources",
    "href": "tils/til-grouping-dedup-topn-rownumber-20250630.html#resources",
    "title": "slice min/max with row_number, to replace top_n",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/slice.html"
  },
  {
    "objectID": "tils/til-filter-if-any-all-x-20250630.html",
    "href": "tils/til-filter-if-any-all-x-20250630.html",
    "title": "filter rows on multiple columns with (x) instead of tilde",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-if-any-all-x-20250630.html#includes",
    "href": "tils/til-filter-if-any-all-x-20250630.html#includes",
    "title": "filter rows on multiple columns with (x) instead of tilde",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-if-any-all-x-20250630.html#notes",
    "href": "tils/til-filter-if-any-all-x-20250630.html#notes",
    "title": "filter rows on multiple columns with (x) instead of tilde",
    "section": "Notes",
    "text": "Notes\n\nis the tilde syntax (cf using (x)) a purrr thing? find out more\n(x) seems to do the same thing as ~ but NB have to remove . from the .x as well.\nthis is an “anonymous function”, isn’t it?"
  },
  {
    "objectID": "tils/til-filter-if-any-all-x-20250630.html#example",
    "href": "tils/til-filter-if-any-all-x-20250630.html#example",
    "title": "filter rows on multiple columns with (x) instead of tilde",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  filter(if_any(everything(), \\(x) is.na(x))) # 100 \n\n# A tibble: 369 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 2        1122  1590 litigat… anti     collective              0 &lt;NA&gt;           \n 3        1126  1594 litigat… other    collective              0 &lt;NA&gt;           \n 4        1133  1597 cottage  anti     collective              0 &lt;NA&gt;           \n 5        1137  1598 litigat… anti     collective              0 &lt;NA&gt;           \n 6        1140  1599 rates    anti     collective              0 &lt;NA&gt;           \n 7        1141  1599 litigat… anti     collective              0 &lt;NA&gt;           \n 8        1142  1608 litigat… &lt;NA&gt;     multiple                5 fm             \n 9        1143  1608 litigat… &lt;NA&gt;     single                  1 m              \n10        1144  1608 litigat… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n# ℹ 359 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\n# the opposite - get rid of rows that have any NAs at all \ncheshire_petitions |&gt; \n  filter(if_all(everything(), \\(x) !is.na(x))) # s/b 513 (613-100) \n\n# A tibble: 244 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1117  1577 litigat… anti     single                  1 m              \n 2        1118  1587 litigat… anti     single                  1 m              \n 3        1119  1589 litigat… anti     single                  1 f              \n 4        1120  1590 litigat… anti     single                  1 m              \n 5        1121  1590 cottage  pro      multiple on …           2 m              \n 6        1123  1592 officeh… dischar… single                  1 m              \n 7        1124  1592 litigat… anti     single                  1 m              \n 8        1125  1592 cottage  pro      multiple on …           2 m              \n 9        1127  1594 litigat… pro      multiple                3 fm             \n10        1128  1594 cottage  pro      single                  1 m              \n# ℹ 234 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-filter-if-any-all-x-20250630.html#resources",
    "href": "tils/til-filter-if-any-all-x-20250630.html#resources",
    "title": "filter rows on multiple columns with (x) instead of tilde",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/across.html\nhttps://coolbutuseless.github.io/2019/03/13/anonymous-functions-in-r-part-1/"
  },
  {
    "objectID": "tils/til-nocode-parse-number-dots-20250630.html",
    "href": "tils/til-nocode-parse-number-dots-20250630.html",
    "title": "import numerical data - parse_number quirks",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-parse-number-dots-20250630.html#includes",
    "href": "tils/til-nocode-parse-number-dots-20250630.html#includes",
    "title": "import numerical data - parse_number quirks",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-parse-number-dots-20250630.html#notes",
    "href": "tils/til-nocode-parse-number-dots-20250630.html#notes",
    "title": "import numerical data - parse_number quirks",
    "section": "Notes",
    "text": "Notes\n\neg seems fine with letters and things but doesn’t like dots\nit can parse nd (early 1680s) but not n.d. (c. 1610)."
  },
  {
    "objectID": "tils/til-complete-counted-combinations-20250630.html",
    "href": "tils/til-complete-counted-combinations-20250630.html",
    "title": "fill in missing values with complete()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-complete-counted-combinations-20250630.html#includes",
    "href": "tils/til-complete-counted-combinations-20250630.html#includes",
    "title": "fill in missing values with complete()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-complete-counted-combinations-20250630.html#notes",
    "href": "tils/til-complete-counted-combinations-20250630.html#notes",
    "title": "fill in missing values with complete()",
    "section": "Notes",
    "text": "Notes\n\nit’s not exactly missing data, but sometimes you want something like this for ggplot\nfill=list(n=0) will fill missings with 0 instead of NA"
  },
  {
    "objectID": "tils/til-complete-counted-combinations-20250630.html#example",
    "href": "tils/til-complete-counted-combinations-20250630.html#example",
    "title": "fill in missing values with complete()",
    "section": "Example",
    "text": "Example\n\njudges100_appts |&gt; \n  count(judge_id, court_type) |&gt; \n  complete(judge_id, court_type, fill=list(n=0)) \n\n# A tibble: 500 × 3\n   judge_id court_type          n\n      &lt;int&gt; &lt;chr&gt;           &lt;int&gt;\n 1      110 Court of Claims     0\n 2      110 USCA                0\n 3      110 USCC (1869)         0\n 4      110 USDC                1\n 5      110 USSC                0\n 6      144 Court of Claims     0\n 7      144 USCA                0\n 8      144 USCC (1869)         0\n 9      144 USDC                1\n10      144 USSC                0\n# ℹ 490 more rows"
  },
  {
    "objectID": "tils/til-complete-counted-combinations-20250630.html#resources",
    "href": "tils/til-complete-counted-combinations-20250630.html#resources",
    "title": "fill in missing values with complete()",
    "section": "Resources",
    "text": "Resources\n\nhttps://tidyr.tidyverse.org/reference/complete.html"
  },
  {
    "objectID": "tils/til-xml2-create-simple-xml-20250630.html",
    "href": "tils/til-xml2-create-simple-xml-20250630.html",
    "title": "create a simple XML file from a data frame with xml2",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml2-create-simple-xml-20250630.html#includes",
    "href": "tils/til-xml2-create-simple-xml-20250630.html#includes",
    "title": "create a simple XML file from a data frame with xml2",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml2-create-simple-xml-20250630.html#notes",
    "href": "tils/til-xml2-create-simple-xml-20250630.html#notes",
    "title": "create a simple XML file from a data frame with xml2",
    "section": "Notes",
    "text": "Notes\n\nSO reply with the for() loop on SO using XML package rather than xml2\nhttps://stackoverflow.com/a/57639226/7281022"
  },
  {
    "objectID": "tils/til-xml2-create-simple-xml-20250630.html#example",
    "href": "tils/til-xml2-create-simple-xml-20250630.html#example",
    "title": "create a simple XML file from a data frame with xml2",
    "section": "Example",
    "text": "Example\n\ncheshire_sample &lt;- \n# really small set of petitions, just get one per topic \n  cheshire_petitions |&gt; \n  group_by(topic) |&gt; \n  slice_min(n=1, row_number()) |&gt; \n  ungroup() \n \nlibrary(xml2) \n \n#first create the xml doc that will contain all xml structure \npetitions_doc &lt;- xml_new_root(\"list_elements\")  \n \n# this just adds empty test_element containers, same number as rows in df.  \n# for loop will do for now, but should work out how to use purrr::map maybe see jennybc tutorial?  \n# the name test_nodes is only for convenience at this point i *think*; it'll get overwritten next line. \n \nfor (test_nodes in 1:nrow(cheshire_sample)) { \n  xml_add_child(petitions_doc, \"test_element\") \n} \n \n# &gt; add the elements in each person node. No loop is required as xml_add_child function is vectorized. \n \n# before you can add a child element you have to do this.  \n# you only have to do it once though, not for every child. \ntest_nodes &lt;- xml_find_all(petitions_doc, \"//test_element\") \n \n# add an attribute to test_element called id. \nxml_attr(test_nodes, \"id\") &lt;- cheshire_sample$petition_id \n \n# then you can add child elements to test_nodes. but you can only add single values. \n# NB doesn't work with cols that are factors, have to convert to chr first. \n# none of these examples should have any NAs, but they need specific handling (see TEI XML TIL) \nxml_add_child(test_nodes, \"topic\", cheshire_sample$topic) \nxml_add_child(test_nodes, \"year\", cheshire_sample$year)  \nxml_add_child(test_nodes, \"type\", cheshire_sample$petition_type)  \n \n# etc etc until you've added all children of test_element that you want \n \n# to insert empty element called test \nxml_add_child(test_nodes, \"test\")  \n \n# save the xml tree into a file [done] \n# write_xml(petitions_doc, file = here::here(\"outputs/petitions-topics.xml\"), options =c(\"format\")) \n \n# show the content of the file \n# cat(as.character(petitions_doc))"
  },
  {
    "objectID": "tils/til-xml2-create-simple-xml-20250630.html#resources",
    "href": "tils/til-xml2-create-simple-xml-20250630.html#resources",
    "title": "create a simple XML file from a data frame with xml2",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/questions/57624678/generate-xml-document-in-r\nhttps://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html\nhttps://stackoverflow.com/a/57639226/7281022"
  },
  {
    "objectID": "tils/til-subsetting-101-gotchas-to-understand-20250630.html",
    "href": "tils/til-subsetting-101-gotchas-to-understand-20250630.html",
    "title": "subsetting in base R - notes and gotchas",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#includes",
    "href": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#includes",
    "title": "subsetting in base R - notes and gotchas",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#notes",
    "href": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#notes",
    "title": "subsetting in base R - notes and gotchas",
    "section": "Notes",
    "text": "Notes\n\npenguins will work but would prefer history data!\n\nThe [ operator always returns an object of the same class as the original. It can be used to select multiple elements of an object\n\n\nThe [[ operator is used to extract elements of a list or a data frame. It can only be used to extract a single element and the class of the returned object will not necessarily be a list or data frame.\n\n\nThe $ operator is used to extract elements of a list or data frame by literal name. Its semantics are similar to that of [[.\n\nQ: commas. what is the , doing in this example [src?]?? removing it doens’t seem to make any difference\nmtcars[, c(“mpg”, “cyl”, “wt”)]\n\nmtcars[c(“mpg”, “cyl”, “wt”)]"
  },
  {
    "objectID": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#example",
    "href": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#example",
    "title": "subsetting in base R - notes and gotchas",
    "section": "Example",
    "text": "Example\n\npenguins[[\"bill_len\"]] # bill_len col as a vector of values. \n\n  [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n [16] 36.6 38.7 42.5 34.4 46.0 37.8 37.7 35.9 38.2 38.8 35.3 40.6 40.5 37.9 40.5\n [31] 39.5 37.2 39.5 40.9 36.4 39.2 38.8 42.2 37.6 39.8 36.5 40.8 36.0 44.1 37.0\n [46] 39.6 41.1 37.5 36.0 42.3 39.6 40.1 35.0 42.0 34.5 41.4 39.0 40.6 36.5 37.6\n [61] 35.7 41.3 37.6 41.1 36.4 41.6 35.5 41.1 35.9 41.8 33.5 39.7 39.6 45.8 35.5\n [76] 42.8 40.9 37.2 36.2 42.1 34.6 42.9 36.7 35.1 37.3 41.3 36.3 36.9 38.3 38.9\n [91] 35.7 41.1 34.0 39.6 36.2 40.8 38.1 40.3 33.1 43.2 35.0 41.0 37.7 37.8 37.9\n[106] 39.7 38.6 38.2 38.1 43.2 38.1 45.6 39.7 42.2 39.6 42.7 38.6 37.3 35.7 41.1\n[121] 36.2 37.7 40.2 41.4 35.2 40.6 38.8 41.5 39.0 44.1 38.5 43.1 36.8 37.5 38.1\n[136] 41.1 35.6 40.2 37.0 39.7 40.2 40.6 32.1 40.7 37.3 39.0 39.2 36.6 36.0 37.8\n[151] 36.0 41.5 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\n[166] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1 44.5 47.8\n[181] 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0 48.7 42.7 49.6 45.3\n[196] 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5 45.1 50.1 46.5 45.0 43.8 45.5\n[211] 43.2 50.4 45.3 46.2 45.7 54.3 45.8 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2\n[226] 46.5 46.4 48.6 47.5 51.1 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3\n[241] 47.5 52.1 47.5 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2\n[256] 49.1 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5 48.8\n[271] 47.2   NA 46.8 50.4 45.2 49.9 46.5 50.0 51.3 45.4 52.7 45.2 46.1 51.3 46.0\n[286] 51.3 46.6 51.7 47.0 52.0 45.9 50.5 50.3 58.0 46.4 49.2 42.4 48.5 43.2 50.6\n[301] 46.7 52.0 50.5 49.5 46.4 52.8 40.9 54.2 42.5 51.0 49.7 47.5 47.6 52.0 46.9\n[316] 53.5 49.0 46.2 50.9 45.5 50.9 50.8 50.1 49.0 51.5 49.8 48.1 51.4 45.7 50.7\n[331] 42.5 52.2 45.2 49.3 50.2 45.6 51.9 46.8 45.7 55.8 43.5 49.6 50.8 50.2\n\npenguins$bill_len # same again  \n\n  [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n [16] 36.6 38.7 42.5 34.4 46.0 37.8 37.7 35.9 38.2 38.8 35.3 40.6 40.5 37.9 40.5\n [31] 39.5 37.2 39.5 40.9 36.4 39.2 38.8 42.2 37.6 39.8 36.5 40.8 36.0 44.1 37.0\n [46] 39.6 41.1 37.5 36.0 42.3 39.6 40.1 35.0 42.0 34.5 41.4 39.0 40.6 36.5 37.6\n [61] 35.7 41.3 37.6 41.1 36.4 41.6 35.5 41.1 35.9 41.8 33.5 39.7 39.6 45.8 35.5\n [76] 42.8 40.9 37.2 36.2 42.1 34.6 42.9 36.7 35.1 37.3 41.3 36.3 36.9 38.3 38.9\n [91] 35.7 41.1 34.0 39.6 36.2 40.8 38.1 40.3 33.1 43.2 35.0 41.0 37.7 37.8 37.9\n[106] 39.7 38.6 38.2 38.1 43.2 38.1 45.6 39.7 42.2 39.6 42.7 38.6 37.3 35.7 41.1\n[121] 36.2 37.7 40.2 41.4 35.2 40.6 38.8 41.5 39.0 44.1 38.5 43.1 36.8 37.5 38.1\n[136] 41.1 35.6 40.2 37.0 39.7 40.2 40.6 32.1 40.7 37.3 39.0 39.2 36.6 36.0 37.8\n[151] 36.0 41.5 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\n[166] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1 44.5 47.8\n[181] 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0 48.7 42.7 49.6 45.3\n[196] 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5 45.1 50.1 46.5 45.0 43.8 45.5\n[211] 43.2 50.4 45.3 46.2 45.7 54.3 45.8 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2\n[226] 46.5 46.4 48.6 47.5 51.1 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3\n[241] 47.5 52.1 47.5 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2\n[256] 49.1 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5 48.8\n[271] 47.2   NA 46.8 50.4 45.2 49.9 46.5 50.0 51.3 45.4 52.7 45.2 46.1 51.3 46.0\n[286] 51.3 46.6 51.7 47.0 52.0 45.9 50.5 50.3 58.0 46.4 49.2 42.4 48.5 43.2 50.6\n[301] 46.7 52.0 50.5 49.5 46.4 52.8 40.9 54.2 42.5 51.0 49.7 47.5 47.6 52.0 46.9\n[316] 53.5 49.0 46.2 50.9 45.5 50.9 50.8 50.1 49.0 51.5 49.8 48.1 51.4 45.7 50.7\n[331] 42.5 52.2 45.2 49.3 50.2 45.6 51.9 46.8 45.7 55.8 43.5 49.6 50.8 50.2\n\npenguins[[3]]  # same again \n\n  [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n [16] 36.6 38.7 42.5 34.4 46.0 37.8 37.7 35.9 38.2 38.8 35.3 40.6 40.5 37.9 40.5\n [31] 39.5 37.2 39.5 40.9 36.4 39.2 38.8 42.2 37.6 39.8 36.5 40.8 36.0 44.1 37.0\n [46] 39.6 41.1 37.5 36.0 42.3 39.6 40.1 35.0 42.0 34.5 41.4 39.0 40.6 36.5 37.6\n [61] 35.7 41.3 37.6 41.1 36.4 41.6 35.5 41.1 35.9 41.8 33.5 39.7 39.6 45.8 35.5\n [76] 42.8 40.9 37.2 36.2 42.1 34.6 42.9 36.7 35.1 37.3 41.3 36.3 36.9 38.3 38.9\n [91] 35.7 41.1 34.0 39.6 36.2 40.8 38.1 40.3 33.1 43.2 35.0 41.0 37.7 37.8 37.9\n[106] 39.7 38.6 38.2 38.1 43.2 38.1 45.6 39.7 42.2 39.6 42.7 38.6 37.3 35.7 41.1\n[121] 36.2 37.7 40.2 41.4 35.2 40.6 38.8 41.5 39.0 44.1 38.5 43.1 36.8 37.5 38.1\n[136] 41.1 35.6 40.2 37.0 39.7 40.2 40.6 32.1 40.7 37.3 39.0 39.2 36.6 36.0 37.8\n[151] 36.0 41.5 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\n[166] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1 44.5 47.8\n[181] 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0 48.7 42.7 49.6 45.3\n[196] 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5 45.1 50.1 46.5 45.0 43.8 45.5\n[211] 43.2 50.4 45.3 46.2 45.7 54.3 45.8 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2\n[226] 46.5 46.4 48.6 47.5 51.1 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3\n[241] 47.5 52.1 47.5 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2\n[256] 49.1 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5 48.8\n[271] 47.2   NA 46.8 50.4 45.2 49.9 46.5 50.0 51.3 45.4 52.7 45.2 46.1 51.3 46.0\n[286] 51.3 46.6 51.7 47.0 52.0 45.9 50.5 50.3 58.0 46.4 49.2 42.4 48.5 43.2 50.6\n[301] 46.7 52.0 50.5 49.5 46.4 52.8 40.9 54.2 42.5 51.0 49.7 47.5 47.6 52.0 46.9\n[316] 53.5 49.0 46.2 50.9 45.5 50.9 50.8 50.1 49.0 51.5 49.8 48.1 51.4 45.7 50.7\n[331] 42.5 52.2 45.2 49.3 50.2 45.6 51.9 46.8 45.7 55.8 43.5 49.6 50.8 50.2\n\npenguins[,3]  # depends...! this is interesting. with a DF I got a vector of values again, but after changing to a tibble it's a tibble with single column.  \n\n  [1] 39.1 39.5 40.3   NA 36.7 39.3 38.9 39.2 34.1 42.0 37.8 37.8 41.1 38.6 34.6\n [16] 36.6 38.7 42.5 34.4 46.0 37.8 37.7 35.9 38.2 38.8 35.3 40.6 40.5 37.9 40.5\n [31] 39.5 37.2 39.5 40.9 36.4 39.2 38.8 42.2 37.6 39.8 36.5 40.8 36.0 44.1 37.0\n [46] 39.6 41.1 37.5 36.0 42.3 39.6 40.1 35.0 42.0 34.5 41.4 39.0 40.6 36.5 37.6\n [61] 35.7 41.3 37.6 41.1 36.4 41.6 35.5 41.1 35.9 41.8 33.5 39.7 39.6 45.8 35.5\n [76] 42.8 40.9 37.2 36.2 42.1 34.6 42.9 36.7 35.1 37.3 41.3 36.3 36.9 38.3 38.9\n [91] 35.7 41.1 34.0 39.6 36.2 40.8 38.1 40.3 33.1 43.2 35.0 41.0 37.7 37.8 37.9\n[106] 39.7 38.6 38.2 38.1 43.2 38.1 45.6 39.7 42.2 39.6 42.7 38.6 37.3 35.7 41.1\n[121] 36.2 37.7 40.2 41.4 35.2 40.6 38.8 41.5 39.0 44.1 38.5 43.1 36.8 37.5 38.1\n[136] 41.1 35.6 40.2 37.0 39.7 40.2 40.6 32.1 40.7 37.3 39.0 39.2 36.6 36.0 37.8\n[151] 36.0 41.5 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\n[166] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1 44.5 47.8\n[181] 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0 48.7 42.7 49.6 45.3\n[196] 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5 45.1 50.1 46.5 45.0 43.8 45.5\n[211] 43.2 50.4 45.3 46.2 45.7 54.3 45.8 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2\n[226] 46.5 46.4 48.6 47.5 51.1 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3\n[241] 47.5 52.1 47.5 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2\n[256] 49.1 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5 48.8\n[271] 47.2   NA 46.8 50.4 45.2 49.9 46.5 50.0 51.3 45.4 52.7 45.2 46.1 51.3 46.0\n[286] 51.3 46.6 51.7 47.0 52.0 45.9 50.5 50.3 58.0 46.4 49.2 42.4 48.5 43.2 50.6\n[301] 46.7 52.0 50.5 49.5 46.4 52.8 40.9 54.2 42.5 51.0 49.7 47.5 47.6 52.0 46.9\n[316] 53.5 49.0 46.2 50.9 45.5 50.9 50.8 50.1 49.0 51.5 49.8 48.1 51.4 45.7 50.7\n[331] 42.5 52.2 45.2 49.3 50.2 45.6 51.9 46.8 45.7 55.8 43.5 49.6 50.8 50.2\n\npenguins[3] # df/tibble with single col  \n\n    bill_len\n1       39.1\n2       39.5\n3       40.3\n4         NA\n5       36.7\n6       39.3\n7       38.9\n8       39.2\n9       34.1\n10      42.0\n11      37.8\n12      37.8\n13      41.1\n14      38.6\n15      34.6\n16      36.6\n17      38.7\n18      42.5\n19      34.4\n20      46.0\n21      37.8\n22      37.7\n23      35.9\n24      38.2\n25      38.8\n26      35.3\n27      40.6\n28      40.5\n29      37.9\n30      40.5\n31      39.5\n32      37.2\n33      39.5\n34      40.9\n35      36.4\n36      39.2\n37      38.8\n38      42.2\n39      37.6\n40      39.8\n41      36.5\n42      40.8\n43      36.0\n44      44.1\n45      37.0\n46      39.6\n47      41.1\n48      37.5\n49      36.0\n50      42.3\n51      39.6\n52      40.1\n53      35.0\n54      42.0\n55      34.5\n56      41.4\n57      39.0\n58      40.6\n59      36.5\n60      37.6\n61      35.7\n62      41.3\n63      37.6\n64      41.1\n65      36.4\n66      41.6\n67      35.5\n68      41.1\n69      35.9\n70      41.8\n71      33.5\n72      39.7\n73      39.6\n74      45.8\n75      35.5\n76      42.8\n77      40.9\n78      37.2\n79      36.2\n80      42.1\n81      34.6\n82      42.9\n83      36.7\n84      35.1\n85      37.3\n86      41.3\n87      36.3\n88      36.9\n89      38.3\n90      38.9\n91      35.7\n92      41.1\n93      34.0\n94      39.6\n95      36.2\n96      40.8\n97      38.1\n98      40.3\n99      33.1\n100     43.2\n101     35.0\n102     41.0\n103     37.7\n104     37.8\n105     37.9\n106     39.7\n107     38.6\n108     38.2\n109     38.1\n110     43.2\n111     38.1\n112     45.6\n113     39.7\n114     42.2\n115     39.6\n116     42.7\n117     38.6\n118     37.3\n119     35.7\n120     41.1\n121     36.2\n122     37.7\n123     40.2\n124     41.4\n125     35.2\n126     40.6\n127     38.8\n128     41.5\n129     39.0\n130     44.1\n131     38.5\n132     43.1\n133     36.8\n134     37.5\n135     38.1\n136     41.1\n137     35.6\n138     40.2\n139     37.0\n140     39.7\n141     40.2\n142     40.6\n143     32.1\n144     40.7\n145     37.3\n146     39.0\n147     39.2\n148     36.6\n149     36.0\n150     37.8\n151     36.0\n152     41.5\n153     46.1\n154     50.0\n155     48.7\n156     50.0\n157     47.6\n158     46.5\n159     45.4\n160     46.7\n161     43.3\n162     46.8\n163     40.9\n164     49.0\n165     45.5\n166     48.4\n167     45.8\n168     49.3\n169     42.0\n170     49.2\n171     46.2\n172     48.7\n173     50.2\n174     45.1\n175     46.5\n176     46.3\n177     42.9\n178     46.1\n179     44.5\n180     47.8\n181     48.2\n182     50.0\n183     47.3\n184     42.8\n185     45.1\n186     59.6\n187     49.1\n188     48.4\n189     42.6\n190     44.4\n191     44.0\n192     48.7\n193     42.7\n194     49.6\n195     45.3\n196     49.6\n197     50.5\n198     43.6\n199     45.5\n200     50.5\n201     44.9\n202     45.2\n203     46.6\n204     48.5\n205     45.1\n206     50.1\n207     46.5\n208     45.0\n209     43.8\n210     45.5\n211     43.2\n212     50.4\n213     45.3\n214     46.2\n215     45.7\n216     54.3\n217     45.8\n218     49.8\n219     46.2\n220     49.5\n221     43.5\n222     50.7\n223     47.7\n224     46.4\n225     48.2\n226     46.5\n227     46.4\n228     48.6\n229     47.5\n230     51.1\n231     45.2\n232     45.2\n233     49.1\n234     52.5\n235     47.4\n236     50.0\n237     44.9\n238     50.8\n239     43.4\n240     51.3\n241     47.5\n242     52.1\n243     47.5\n244     52.2\n245     45.5\n246     49.5\n247     44.5\n248     50.8\n249     49.4\n250     46.9\n251     48.4\n252     51.1\n253     48.5\n254     55.9\n255     47.2\n256     49.1\n257     47.3\n258     46.8\n259     41.7\n260     53.4\n261     43.3\n262     48.1\n263     50.5\n264     49.8\n265     43.5\n266     51.5\n267     46.2\n268     55.1\n269     44.5\n270     48.8\n271     47.2\n272       NA\n273     46.8\n274     50.4\n275     45.2\n276     49.9\n277     46.5\n278     50.0\n279     51.3\n280     45.4\n281     52.7\n282     45.2\n283     46.1\n284     51.3\n285     46.0\n286     51.3\n287     46.6\n288     51.7\n289     47.0\n290     52.0\n291     45.9\n292     50.5\n293     50.3\n294     58.0\n295     46.4\n296     49.2\n297     42.4\n298     48.5\n299     43.2\n300     50.6\n301     46.7\n302     52.0\n303     50.5\n304     49.5\n305     46.4\n306     52.8\n307     40.9\n308     54.2\n309     42.5\n310     51.0\n311     49.7\n312     47.5\n313     47.6\n314     52.0\n315     46.9\n316     53.5\n317     49.0\n318     46.2\n319     50.9\n320     45.5\n321     50.9\n322     50.8\n323     50.1\n324     49.0\n325     51.5\n326     49.8\n327     48.1\n328     51.4\n329     45.7\n330     50.7\n331     42.5\n332     52.2\n333     45.2\n334     49.3\n335     50.2\n336     45.6\n337     51.9\n338     46.8\n339     45.7\n340     55.8\n341     43.5\n342     49.6\n343     50.8\n344     50.2\n\npenguins[3,] # a df with all columns for the third row \n\n  species    island bill_len bill_dep flipper_len body_mass    sex year\n3  Adelie Torgersen     40.3       18         195      3250 female 2007\n\npenguins[3,3] # third col in third row, as a vector or single cell tibble \n\n[1] 40.3\n\nnames(penguins[1]) # [1] \"species\" - name of the first col  \n\n[1] \"species\"\n\nnames(penguins[\"species\"]) # [1] \"species\" [this seems a very silly thing to do...?] \n\n[1] \"species\"\n\n# names(penguins[species]) # error object species not found \n# names(penguins[[species]]) # ditto \nnames(penguins[[\"species\"]]) # NULL \n\nNULL"
  },
  {
    "objectID": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#resources",
    "href": "tils/til-subsetting-101-gotchas-to-understand-20250630.html#resources",
    "title": "subsetting in base R - notes and gotchas",
    "section": "Resources",
    "text": "Resources\n\nhttps://adv-r.hadley.nz/subsetting.html"
  },
  {
    "objectID": "tils/til-mutate-across-conditional-20250630.html",
    "href": "tils/til-mutate-across-conditional-20250630.html",
    "title": "mutate across() with case_when()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-mutate-across-conditional-20250630.html#includes",
    "href": "tils/til-mutate-across-conditional-20250630.html#includes",
    "title": "mutate across() with case_when()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-mutate-across-conditional-20250630.html#notes",
    "href": "tils/til-mutate-across-conditional-20250630.html#notes",
    "title": "mutate across() with case_when()",
    "section": "Notes",
    "text": "Notes\n\nthis is not ideal but gives the idea; should make a better example\ncolumns can be quite mixed, but needs some coherence."
  },
  {
    "objectID": "tils/til-mutate-across-conditional-20250630.html#example",
    "href": "tils/til-mutate-across-conditional-20250630.html#example",
    "title": "mutate across() with case_when()",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n  select(petition_id, topic, subtopic, petition_gender) |&gt; \n  mutate(across(c(subtopic, petition_gender), \n                ~case_when( \n                  is.na(.) ~ \"no\", \n                  .==\"\" ~ \"no\", \n                  .== 0 ~ \"no\", \n                  str_detect(., \"unspecified|unknown\") ~ \"no\", \n                  .default = \"yes\" \n                ), \n                # make new cols instead of replace existing \n                .names = \"has_{.col}\" \n                )) |&gt; \n  count(has_subtopic, has_petition_gender) \n\n# A tibble: 4 × 3\n  has_subtopic has_petition_gender     n\n  &lt;chr&gt;        &lt;chr&gt;               &lt;int&gt;\n1 no           no                     69\n2 no           yes                   269\n3 yes          no                     31\n4 yes          yes                   244"
  },
  {
    "objectID": "tils/til-mutate-across-conditional-20250630.html#resources",
    "href": "tils/til-mutate-across-conditional-20250630.html#resources",
    "title": "mutate across() with case_when()",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/across.html"
  },
  {
    "objectID": "tils/til-tables-with-table-20250630.html",
    "href": "tils/til-tables-with-table-20250630.html",
    "title": "frequency tables with table() (and add dimnames)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-with-table-20250630.html#includes",
    "href": "tils/til-tables-with-table-20250630.html#includes",
    "title": "frequency tables with table() (and add dimnames)",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-with-table-20250630.html#notes",
    "href": "tils/til-tables-with-table-20250630.html#notes",
    "title": "frequency tables with table() (and add dimnames)",
    "section": "Notes",
    "text": "Notes\n\nnot sure if there’s a way to use this with already counted data. but see xtabs TIL\nyou can add names with = or dnn\nsee https://www.spsanderson.com/steveondata/posts/2025-07-14/ on use of with()"
  },
  {
    "objectID": "tils/til-tables-with-table-20250630.html#example",
    "href": "tils/til-tables-with-table-20250630.html#example",
    "title": "frequency tables with table() (and add dimnames)",
    "section": "Example",
    "text": "Example\n\ntable(type=cheshire_petitions$petition_type, gender=cheshire_petitions$petition_gender) \n\n                      gender\ntype                     f  fm   m\n  collective             0   0   0\n  collective on behalf   4   0   8\n  multiple               2  26  41\n  multiple on behalf     1   1   2\n  single               125   0 303\n\n# table(cheshire_petitions$petition_type, cheshire_petitions$petition_gender, dnn=c(\"type\", \"gender\"))"
  },
  {
    "objectID": "tils/til-xml-extract-elements-with-ns-20250630.html",
    "href": "tils/til-xml-extract-elements-with-ns-20250630.html",
    "title": "extract specific elements out of tei xml into a tibble.",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-extract-elements-with-ns-20250630.html#includes",
    "href": "tils/til-xml-extract-elements-with-ns-20250630.html#includes",
    "title": "extract specific elements out of tei xml into a tibble.",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-extract-elements-with-ns-20250630.html#notes",
    "href": "tils/til-xml-extract-elements-with-ns-20250630.html#notes",
    "title": "extract specific elements out of tei xml into a tibble.",
    "section": "Notes",
    "text": "Notes\n\nthis can easily be functionified if you’ll need to run it repeatedly"
  },
  {
    "objectID": "tils/til-xml-extract-elements-with-ns-20250630.html#example",
    "href": "tils/til-xml-extract-elements-with-ns-20250630.html#example",
    "title": "extract specific elements out of tei xml into a tibble.",
    "section": "Example",
    "text": "Example\n\nlibrary(xml2) \n \ntei_judges_xml &lt;- \n  read_xml(here::here(\"outputs/tei-judges.xml\"), options = \"\") \n \nns &lt;- xml_ns_rename(xml_ns(tei_judges_xml), d1 = \"tei\") \n \ntibble( \n    id=xml_text(xml_find_all(tei_judges_xml, \".//tei:listPerson/tei:person/@xml:id\", ns) ),  \n    name=xml_text(xml_find_all(tei_judges_xml, \".//tei:listPerson/tei:person/tei:persName[@type='label']\", ns)), \n    txt=xml_text(xml_find_all(tei_judges_xml, \".//tei:listPerson/tei:person\", ns)) \n  ) \n\n# A tibble: 100 × 3\n   id         name             txt                                              \n   &lt;chr&gt;      &lt;chr&gt;            &lt;chr&gt;                                            \n 1 judge_432  George Cire      \"\\n          George Cire\\n          \\n          …\n 2 judge_3518 Gerald McHugh    \"\\n          Gerald McHugh\\n          \\n        …\n 3 judge_831  John Gayle       \"\\n          John Gayle\\n          \\n           …\n 4 judge_188  Charles Blair    \"\\n          Charles Blair\\n          \\n        …\n 5 judge_2080 Harold Ryan      \"\\n          Harold Ryan\\n          \\n          …\n 6 judge_2736 Henry Kennedy    \"\\n          Henry Kennedy\\n          \\n        …\n 7 judge_1678 Kevin Moore      \"\\n          Kevin Moore\\n          \\n          …\n 8 judge_3016 Louise Flanagan  \"\\n          Louise Flanagan\\n          \\n      …\n 9 judge_393  David Cartter    \"\\n          David Cartter\\n          \\n        …\n10 judge_1136 Joseph Hutcheson \"\\n          Joseph Hutcheson\\n          \\n     …\n# ℹ 90 more rows"
  },
  {
    "objectID": "tils/til-tables-xtabs-count-data-20250630.html",
    "href": "tils/til-tables-xtabs-count-data-20250630.html",
    "title": "frequency tables with xtabs() for counted data",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-xtabs-count-data-20250630.html#includes",
    "href": "tils/til-tables-xtabs-count-data-20250630.html#includes",
    "title": "frequency tables with xtabs() for counted data",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-xtabs-count-data-20250630.html#notes",
    "href": "tils/til-tables-xtabs-count-data-20250630.html#notes",
    "title": "frequency tables with xtabs() for counted data",
    "section": "Notes",
    "text": "Notes\n\nxtabs is handy anyway because you have a data= option, and it does names\nuse of ~ and +\ncan also be used for uncounted data"
  },
  {
    "objectID": "tils/til-tables-xtabs-count-data-20250630.html#example",
    "href": "tils/til-tables-xtabs-count-data-20250630.html#example",
    "title": "frequency tables with xtabs() for counted data",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions_topic_type_counted &lt;- \ncheshire_petitions |&gt; \n  count(topic, petition_type) \n \n# with counted data \nxtabs(n~topic+petition_type, data=cheshire_petitions_topic_type_counted) \n\n                    petition_type\ntopic                collective collective on behalf multiple\n  alehouse                    3                    1        0\n  charitable brief            4                    1        2\n  cottage                     2                    2        8\n  dissenting worship          0                    0        3\n  employment                  0                    0        1\n  imprisoned debtors          0                    0        0\n  litigation                 16                    5       29\n  military relief             0                    2        0\n  officeholding               5                    0        4\n  other                       4                    0        1\n  paternity                   3                    0        4\n  poor relief                20                    1        4\n  rates                      43                    0       13\n                    petition_type\ntopic                multiple on behalf single\n  alehouse                            0     13\n  charitable brief                    0      9\n  cottage                             3     77\n  dissenting worship                  0      2\n  employment                          0     14\n  imprisoned debtors                  0      1\n  litigation                          0    128\n  military relief                     0     28\n  officeholding                       0     12\n  other                               0     12\n  paternity                           0     56\n  poor relief                         1     54\n  rates                               0     22\n\n# cf. with uncounted data. \n# xtabs(~topic+petition_type, data=cheshire_petitions)"
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html",
    "href": "tils/til-functions-arg-varname-20250630.html",
    "title": "function argument used as variable name with !! and :=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html#includes",
    "href": "tils/til-functions-arg-varname-20250630.html#includes",
    "title": "function argument used as variable name with !! and :=",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html#notes",
    "href": "tils/til-functions-arg-varname-20250630.html#notes",
    "title": "function argument used as variable name with !! and :=",
    "section": "Notes",
    "text": "Notes\n\ni’ve used this in the context of making a y/n “is” or “has” column.\nthe point was that you might have several possible data2 to compare and it’s a single line each time\n(originally data1 = named DF)\nthe id column for joining has to be called “id” in both DFs\nx has to be quoted … if i used deparse(substitute) could I change that? not sure."
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html#function",
    "href": "tils/til-functions-arg-varname-20250630.html#function",
    "title": "function argument used as variable name with !! and :=",
    "section": "Function",
    "text": "Function\n\nmake_yn &lt;- function(data1, data2, x){ \n   \n  # make the variable name \n  v = paste0(\"is_\", x) \n   \n  data1 |&gt; \n  left_join(data2 |&gt; select(id) |&gt; mutate(is_x=\"yes\"), by=\"id\") |&gt; \n  mutate(!! v := if_else(is.na(is_x), \"no\", \"yes\")) |&gt; \n    select(-is_x) \n}"
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html#example",
    "href": "tils/til-functions-arg-varname-20250630.html#example",
    "title": "function argument used as variable name with !! and :=",
    "section": "Example",
    "text": "Example\n\njudges100_ussc &lt;- \n  judges100_appts |&gt; \n  filter(court_type==\"USSC\") |&gt; \n  mutate(id=paste0(\"judge_\", judge_id)) |&gt; \n  distinct(id, court_type) \n \nmake_yn(judges100, judges100_ussc, \"USSC\") |&gt; \n  count(is_USSC, gender) \n\n# A tibble: 3 × 3\n  is_USSC gender     n\n  &lt;chr&gt;   &lt;chr&gt;  &lt;int&gt;\n1 no      F         15\n2 no      M         81\n3 yes     M          4"
  },
  {
    "objectID": "tils/til-functions-arg-varname-20250630.html#resources",
    "href": "tils/til-functions-arg-varname-20250630.html#resources",
    "title": "function argument used as variable name with !! and :=",
    "section": "Resources",
    "text": "Resources\n\nhttps://stackoverflow.com/questions/69276207/how-to-assign-function-argument-to-variable-name/69276257#69276257"
  },
  {
    "objectID": "tils/til-xml2-attr-flatten-20250630.html",
    "href": "tils/til-xml2-attr-flatten-20250630.html",
    "title": "extract an attribute out of XML docs and flatten into a vector",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml2-attr-flatten-20250630.html#includes",
    "href": "tils/til-xml2-attr-flatten-20250630.html#includes",
    "title": "extract an attribute out of XML docs and flatten into a vector",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml2-attr-flatten-20250630.html#notes",
    "href": "tils/til-xml2-attr-flatten-20250630.html#notes",
    "title": "extract an attribute out of XML docs and flatten into a vector",
    "section": "Notes",
    "text": "Notes\n\nexample needs a folder containing at least two TEI xml files."
  },
  {
    "objectID": "tils/til-xml2-attr-flatten-20250630.html#example",
    "href": "tils/til-xml2-attr-flatten-20250630.html#example",
    "title": "extract an attribute out of XML docs and flatten into a vector",
    "section": "Example",
    "text": "Example\n\nlibrary(xml2) \n \ntei_list &lt;- list.files(here::here(\"data/xml/prep_for_txt\"), full.names = TRUE) \n \n# don't need options=\"\" in this case because you're only getting attributes. \ntest_xml &lt;-  map(tei_list, read_xml) \n \n# nb this is simple because the root node TEI has xml:id you want. might not always be that easy! \ntest_xml |&gt; \n   map(~xml_attr(., \"id\")) |&gt; \n   unlist() \n\n[1] \"atb-book-one\"             \"atb-book-two\"            \n[3] \"atb-book-three\"           \"atb-book-of-remembrances\""
  },
  {
    "objectID": "tils/til-tables-vcd-structable-20250630.html",
    "href": "tils/til-tables-vcd-structable-20250630.html",
    "title": "frequency tables 3-way or more with vcd structable",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-vcd-structable-20250630.html#includes",
    "href": "tils/til-tables-vcd-structable-20250630.html#includes",
    "title": "frequency tables 3-way or more with vcd structable",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-tables-vcd-structable-20250630.html#notes",
    "href": "tils/til-tables-vcd-structable-20250630.html#notes",
    "title": "frequency tables 3-way or more with vcd structable",
    "section": "Notes",
    "text": "Notes\n\nyou can do stuff to the DF inside structable, though for more than a quick filter it’s probably better to make new DF beforehand and use that.\n(I don’t think structable is pipable)\nvcd_diff_size_val_tab_inst &lt;- structable(same_dmy_all ~ item_size + mean_pay_val,\n\n                                      sb_items_inst_nk |&gt; filter(inst_type==\"kw\"))"
  },
  {
    "objectID": "tils/til-tables-vcd-structable-20250630.html#example",
    "href": "tils/til-tables-vcd-structable-20250630.html#example",
    "title": "frequency tables 3-way or more with vcd structable",
    "section": "Example",
    "text": "Example\n\nvcd::structable(petition_type ~ topic + petition_gender, cheshire_petitions) \n\n                                   petition_type collective collective on behalf multiple multiple on behalf single\ntopic              petition_gender                                                                                 \nalehouse           f                                      0                    0        0                  0      2\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    1        0                  0     11\ncharitable brief   f                                      0                    0        1                  0      0\n                   fm                                     0                    0        1                  0      0\n                   m                                      0                    1        0                  0      9\ncottage            f                                      0                    1        0                  1     17\n                   fm                                     0                    0        7                  0      0\n                   m                                      0                    1        1                  2     60\ndissenting worship f                                      0                    0        0                  0      0\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0        3                  0      2\nemployment         f                                      0                    0        0                  0      6\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0        1                  0      8\nimprisoned debtors f                                      0                    0        0                  0      0\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0        0                  0      1\nlitigation         f                                      0                    3        1                  0     31\n                   fm                                     0                    0       13                  0      0\n                   m                                      0                    2       15                  0     97\nmilitary relief    f                                      0                    0        0                  0      7\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    2        0                  0     21\nofficeholding      f                                      0                    0        0                  0      0\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0        4                  0     12\nother              f                                      0                    0        0                  0      4\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0        1                  0      8\npaternity          f                                      0                    0        0                  0     36\n                   fm                                     0                    0        2                  0      0\n                   m                                      0                    0        2                  0     20\npoor relief        f                                      0                    0        0                  0     20\n                   fm                                     0                    0        3                  1      0\n                   m                                      0                    1        1                  0     34\nrates              f                                      0                    0        0                  0      2\n                   fm                                     0                    0        0                  0      0\n                   m                                      0                    0       13                  0     20\n\n# need to check what this does with NAs? looks like it drops them. check NA options"
  },
  {
    "objectID": "tils/til-tables-vcd-structable-20250630.html#resources",
    "href": "tils/til-tables-vcd-structable-20250630.html#resources",
    "title": "frequency tables 3-way or more with vcd structable",
    "section": "Resources",
    "text": "Resources\n\nhttps://friendly.github.io/vcdExtra/articles/a1-creating.html"
  },
  {
    "objectID": "tils/til-nocode-regex-comments-20250630.html",
    "href": "tils/til-nocode-regex-comments-20250630.html",
    "title": "add regex comments to your R code",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-regex-comments-20250630.html#includes",
    "href": "tils/til-nocode-regex-comments-20250630.html#includes",
    "title": "add regex comments to your R code",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-nocode-regex-comments-20250630.html#example",
    "href": "tils/til-nocode-regex-comments-20250630.html#example",
    "title": "add regex comments to your R code",
    "section": "Example",
    "text": "Example\n\n# find_link &lt;- regex(\" \n#   \\\\[   # Grab opening square bracket \n#   .+?   # Find smallest internal text as possible \n#   \\\\]   # Closing square bracket \n#   \\\\(   # Opening parenthesis \n#   .+?   # Link text, again as small as possible \n#   \\\\)   # Closing parenthesis \n#   \", \n#  comments = TRUE) \n#  \n# BUT NB:  \n# &gt;     If TRUE, white space and comments beginning with # are ignored. Escape literal spaces with \\\\ ."
  },
  {
    "objectID": "tils/til-filter-multiple-columns-20250630.html",
    "href": "tils/til-filter-multiple-columns-20250630.html",
    "title": "filter rows on multiple columns using if_any() or if_all()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-multiple-columns-20250630.html#includes",
    "href": "tils/til-filter-multiple-columns-20250630.html#includes",
    "title": "filter rows on multiple columns using if_any() or if_all()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-filter-multiple-columns-20250630.html#notes",
    "href": "tils/til-filter-multiple-columns-20250630.html#notes",
    "title": "filter rows on multiple columns using if_any() or if_all()",
    "section": "Notes",
    "text": "Notes\n\ncan use any sort of tidy-select thing"
  },
  {
    "objectID": "tils/til-filter-multiple-columns-20250630.html#example",
    "href": "tils/til-filter-multiple-columns-20250630.html#example",
    "title": "filter rows on multiple columns using if_any() or if_all()",
    "section": "Example",
    "text": "Example\n\ncheshire_petitions |&gt; \n# only get rows that contain NAs somewhere \n  filter(if_any(everything(), ~is.na(.x))) # 100 \n\n# A tibble: 369 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1116  1573 litigat… anti     collective              0 &lt;NA&gt;           \n 2        1122  1590 litigat… anti     collective              0 &lt;NA&gt;           \n 3        1126  1594 litigat… other    collective              0 &lt;NA&gt;           \n 4        1133  1597 cottage  anti     collective              0 &lt;NA&gt;           \n 5        1137  1598 litigat… anti     collective              0 &lt;NA&gt;           \n 6        1140  1599 rates    anti     collective              0 &lt;NA&gt;           \n 7        1141  1599 litigat… anti     collective              0 &lt;NA&gt;           \n 8        1142  1608 litigat… &lt;NA&gt;     multiple                5 fm             \n 9        1143  1608 litigat… &lt;NA&gt;     single                  1 m              \n10        1144  1608 litigat… &lt;NA&gt;     collective              0 &lt;NA&gt;           \n# ℹ 359 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\ncheshire_petitions |&gt; \n# the opposite - get rid of rows that have any NAs at all \n  filter(if_all(everything(), ~ !is.na(.x))) # s/b 513 (613-100) \n\n# A tibble: 244 × 12\n   petition_id  year topic    subtopic petition_type named_petrs petition_gender\n         &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;          \n 1        1117  1577 litigat… anti     single                  1 m              \n 2        1118  1587 litigat… anti     single                  1 m              \n 3        1119  1589 litigat… anti     single                  1 f              \n 4        1120  1590 litigat… anti     single                  1 m              \n 5        1121  1590 cottage  pro      multiple on …           2 m              \n 6        1123  1592 officeh… dischar… single                  1 m              \n 7        1124  1592 litigat… anti     single                  1 m              \n 8        1125  1592 cottage  pro      multiple on …           2 m              \n 9        1127  1594 litigat… pro      multiple                3 fm             \n10        1128  1594 cottage  pro      single                  1 m              \n# ℹ 234 more rows\n# ℹ 5 more variables: response &lt;chr&gt;, petitioner &lt;chr&gt;, abstract &lt;chr&gt;,\n#   reference &lt;chr&gt;, repository &lt;chr&gt;\n\njudges100 |&gt; \n# look in any columns that contain the string \"city\" (contains() would also work in this case) \n  filter(if_any(matches(\"city\"), ~str_detect(., \"Miami\")))  \n\n# A tibble: 1 × 15\n  judge_id name_first name_middle name_last name_suffix birth_date\n     &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n1     1243 James      W.          Kehoe     &lt;NA&gt;              1925\n# ℹ 9 more variables: birthplace_city &lt;chr&gt;, birthplace_state &lt;chr&gt;,\n#   death_date &lt;int&gt;, death_city &lt;chr&gt;, death_state &lt;chr&gt;, gender &lt;chr&gt;,\n#   race &lt;chr&gt;, persname &lt;chr&gt;, id &lt;chr&gt;"
  },
  {
    "objectID": "tils/til-filter-multiple-columns-20250630.html#resources",
    "href": "tils/til-filter-multiple-columns-20250630.html#resources",
    "title": "filter rows on multiple columns using if_any() or if_all()",
    "section": "Resources",
    "text": "Resources\n\nhttps://dplyr.tidyverse.org/reference/across.html\nhttps://stackoverflow.com/a/66908277/7281022"
  },
  {
    "objectID": "tils/til-complete-nesting-multiple-20250630.html",
    "href": "tils/til-complete-nesting-multiple-20250630.html",
    "title": "fill in gaps with complete() and nesting()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-complete-nesting-multiple-20250630.html#includes",
    "href": "tils/til-complete-nesting-multiple-20250630.html#includes",
    "title": "fill in gaps with complete() and nesting()",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-complete-nesting-multiple-20250630.html#notes",
    "href": "tils/til-complete-nesting-multiple-20250630.html#notes",
    "title": "fill in gaps with complete() and nesting()",
    "section": "Notes",
    "text": "Notes\n\nwhat does nesting do? it groups variables together, so complete doesn’t try to make every single combination, only the possible combinations of each group.\n\nYOU CAN USE NESTING MORE THAN ONCE"
  },
  {
    "objectID": "tils/til-complete-nesting-multiple-20250630.html#example",
    "href": "tils/til-complete-nesting-multiple-20250630.html#example",
    "title": "fill in gaps with complete() and nesting()",
    "section": "Example",
    "text": "Example\n\njudges100 |&gt; \n# every possible court(name+type) for every name/id combo. (6100 rows) if not on a court nomination_date = NA. \n  select(judge_id, persname) |&gt; \n  inner_join(judges100_appts |&gt; select(court_name, court_type, judge_id, nomination_date), by=\"judge_id\") |&gt; \n  complete(nesting(judge_id, persname), nesting(court_name, court_type)) \n\n# A tibble: 6,100 × 5\n   judge_id persname     court_name                   court_type nomination_date\n      &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;                        &lt;chr&gt;      &lt;chr&gt;          \n 1      110 John Bartels Court of Claims              Court of … &lt;NA&gt;           \n 2      110 John Bartels Supreme Court of the United… USSC       &lt;NA&gt;           \n 3      110 John Bartels Supreme Court of the United… USSC       &lt;NA&gt;           \n 4      110 John Bartels U. S. Circuit Courts for th… USCC (186… &lt;NA&gt;           \n 5      110 John Bartels U. S. Circuit Courts for th… USCC (186… &lt;NA&gt;           \n 6      110 John Bartels U. S. Court of Appeals for … USCA       &lt;NA&gt;           \n 7      110 John Bartels U. S. Court of Appeals for … USCA       &lt;NA&gt;           \n 8      110 John Bartels U. S. Court of Appeals for … USCA       &lt;NA&gt;           \n 9      110 John Bartels U. S. Court of Appeals for … USCA       &lt;NA&gt;           \n10      110 John Bartels U. S. Court of Appeals for … USCA       &lt;NA&gt;           \n# ℹ 6,090 more rows\n\njudges100 |&gt; \n# just completing court_type 511 rows. (5 court types). date NA if not actually on that court type. \n  select(judge_id, persname) |&gt; \n  inner_join(judges100_appts |&gt; select(court_type, judge_id, nomination_date), by=\"judge_id\") |&gt; \n  complete(nesting(judge_id, persname), court_type) \n\n# A tibble: 511 × 4\n   judge_id persname     court_type      nomination_date\n      &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;           &lt;chr&gt;          \n 1      110 John Bartels Court of Claims &lt;NA&gt;           \n 2      110 John Bartels USCA            &lt;NA&gt;           \n 3      110 John Bartels USCC (1869)     &lt;NA&gt;           \n 4      110 John Bartels USDC            04/20/1959     \n 5      110 John Bartels USSC            &lt;NA&gt;           \n 6      144 David Belew  Court of Claims &lt;NA&gt;           \n 7      144 David Belew  USCA            &lt;NA&gt;           \n 8      144 David Belew  USCC (1869)     &lt;NA&gt;           \n 9      144 David Belew  USDC            02/09/1979     \n10      144 David Belew  USSC            &lt;NA&gt;           \n# ℹ 501 more rows"
  },
  {
    "objectID": "tils/til-complete-nesting-multiple-20250630.html#resources",
    "href": "tils/til-complete-nesting-multiple-20250630.html#resources",
    "title": "fill in gaps with complete() and nesting()",
    "section": "Resources",
    "text": "Resources\n\nhttps://tidyr.tidyverse.org/reference/complete.html\nhttps://tidyr.tidyverse.org/reference/expand.html"
  },
  {
    "objectID": "tils/til-xml-xml2-stripping-20250630.html",
    "href": "tils/til-xml-xml2-stripping-20250630.html",
    "title": "read_xml needs options=blank to stop it stripping out blank text nodes",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-xml2-stripping-20250630.html#includes",
    "href": "tils/til-xml-xml2-stripping-20250630.html#includes",
    "title": "read_xml needs options=blank to stop it stripping out blank text nodes",
    "section": "",
    "text": "source(here::here('R/shared.R'))"
  },
  {
    "objectID": "tils/til-xml-xml2-stripping-20250630.html#example",
    "href": "tils/til-xml-xml2-stripping-20250630.html#example",
    "title": "read_xml needs options=blank to stop it stripping out blank text nodes",
    "section": "Example",
    "text": "Example\n\n# xml2::read_xml(\"filename.xml\", options = \"\")"
  }
]